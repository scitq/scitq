// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: taskqueue.proto

package taskqueuepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskQueue_SubmitTask_FullMethodName             = "/taskqueue.TaskQueue/SubmitTask"
	TaskQueue_RegisterWorker_FullMethodName         = "/taskqueue.TaskQueue/RegisterWorker"
	TaskQueue_PingAndTakeNewTasks_FullMethodName    = "/taskqueue.TaskQueue/PingAndTakeNewTasks"
	TaskQueue_UpdateTaskStatus_FullMethodName       = "/taskqueue.TaskQueue/UpdateTaskStatus"
	TaskQueue_SendTaskLogs_FullMethodName           = "/taskqueue.TaskQueue/SendTaskLogs"
	TaskQueue_StreamTaskLogsOutput_FullMethodName   = "/taskqueue.TaskQueue/StreamTaskLogsOutput"
	TaskQueue_StreamTaskLogsErr_FullMethodName      = "/taskqueue.TaskQueue/StreamTaskLogsErr"
	TaskQueue_GetLogsChunk_FullMethodName           = "/taskqueue.TaskQueue/GetLogsChunk"
	TaskQueue_ListTasks_FullMethodName              = "/taskqueue.TaskQueue/ListTasks"
	TaskQueue_ListWorkers_FullMethodName            = "/taskqueue.TaskQueue/ListWorkers"
	TaskQueue_CreateWorker_FullMethodName           = "/taskqueue.TaskQueue/CreateWorker"
	TaskQueue_UpdateWorkerStatus_FullMethodName     = "/taskqueue.TaskQueue/UpdateWorkerStatus"
	TaskQueue_DeleteWorker_FullMethodName           = "/taskqueue.TaskQueue/DeleteWorker"
	TaskQueue_UpdateWorker_FullMethodName           = "/taskqueue.TaskQueue/UpdateWorker"
	TaskQueue_GetWorkerStatuses_FullMethodName      = "/taskqueue.TaskQueue/GetWorkerStatuses"
	TaskQueue_ListJobs_FullMethodName               = "/taskqueue.TaskQueue/ListJobs"
	TaskQueue_GetJobStatuses_FullMethodName         = "/taskqueue.TaskQueue/GetJobStatuses"
	TaskQueue_DeleteJob_FullMethodName              = "/taskqueue.TaskQueue/DeleteJob"
	TaskQueue_UpdateJob_FullMethodName              = "/taskqueue.TaskQueue/UpdateJob"
	TaskQueue_ListFlavors_FullMethodName            = "/taskqueue.TaskQueue/ListFlavors"
	TaskQueue_GetRcloneConfig_FullMethodName        = "/taskqueue.TaskQueue/GetRcloneConfig"
	TaskQueue_GetDockerCredentials_FullMethodName   = "/taskqueue.TaskQueue/GetDockerCredentials"
	TaskQueue_Login_FullMethodName                  = "/taskqueue.TaskQueue/Login"
	TaskQueue_Logout_FullMethodName                 = "/taskqueue.TaskQueue/Logout"
	TaskQueue_CreateUser_FullMethodName             = "/taskqueue.TaskQueue/CreateUser"
	TaskQueue_ListUsers_FullMethodName              = "/taskqueue.TaskQueue/ListUsers"
	TaskQueue_DeleteUser_FullMethodName             = "/taskqueue.TaskQueue/DeleteUser"
	TaskQueue_UpdateUser_FullMethodName             = "/taskqueue.TaskQueue/UpdateUser"
	TaskQueue_ChangePassword_FullMethodName         = "/taskqueue.TaskQueue/ChangePassword"
	TaskQueue_ListRecruiters_FullMethodName         = "/taskqueue.TaskQueue/ListRecruiters"
	TaskQueue_CreateRecruiter_FullMethodName        = "/taskqueue.TaskQueue/CreateRecruiter"
	TaskQueue_UpdateRecruiter_FullMethodName        = "/taskqueue.TaskQueue/UpdateRecruiter"
	TaskQueue_DeleteRecruiter_FullMethodName        = "/taskqueue.TaskQueue/DeleteRecruiter"
	TaskQueue_ListWorkflows_FullMethodName          = "/taskqueue.TaskQueue/ListWorkflows"
	TaskQueue_CreateWorkflow_FullMethodName         = "/taskqueue.TaskQueue/CreateWorkflow"
	TaskQueue_DeleteWorkflow_FullMethodName         = "/taskqueue.TaskQueue/DeleteWorkflow"
	TaskQueue_ListSteps_FullMethodName              = "/taskqueue.TaskQueue/ListSteps"
	TaskQueue_CreateStep_FullMethodName             = "/taskqueue.TaskQueue/CreateStep"
	TaskQueue_DeleteStep_FullMethodName             = "/taskqueue.TaskQueue/DeleteStep"
	TaskQueue_GetStepStats_FullMethodName           = "/taskqueue.TaskQueue/GetStepStats"
	TaskQueue_GetWorkerStats_FullMethodName         = "/taskqueue.TaskQueue/GetWorkerStats"
	TaskQueue_FetchList_FullMethodName              = "/taskqueue.TaskQueue/FetchList"
	TaskQueue_FetchInfo_FullMethodName              = "/taskqueue.TaskQueue/FetchInfo"
	TaskQueue_UploadTemplate_FullMethodName         = "/taskqueue.TaskQueue/UploadTemplate"
	TaskQueue_RunTemplate_FullMethodName            = "/taskqueue.TaskQueue/RunTemplate"
	TaskQueue_ListTemplates_FullMethodName          = "/taskqueue.TaskQueue/ListTemplates"
	TaskQueue_ListTemplateRuns_FullMethodName       = "/taskqueue.TaskQueue/ListTemplateRuns"
	TaskQueue_UpdateTemplateRun_FullMethodName      = "/taskqueue.TaskQueue/UpdateTemplateRun"
	TaskQueue_DeleteTemplateRun_FullMethodName      = "/taskqueue.TaskQueue/DeleteTemplateRun"
	TaskQueue_GetWorkspaceRoot_FullMethodName       = "/taskqueue.TaskQueue/GetWorkspaceRoot"
	TaskQueue_RegisterSpecifications_FullMethodName = "/taskqueue.TaskQueue/RegisterSpecifications"
	TaskQueue_ReportWorkerEvent_FullMethodName      = "/taskqueue.TaskQueue/ReportWorkerEvent"
	TaskQueue_ListWorkerEvents_FullMethodName       = "/taskqueue.TaskQueue/ListWorkerEvents"
	TaskQueue_DeleteWorkerEvent_FullMethodName      = "/taskqueue.TaskQueue/DeleteWorkerEvent"
	TaskQueue_PruneWorkerEvents_FullMethodName      = "/taskqueue.TaskQueue/PruneWorkerEvents"
)

// TaskQueueClient is the client API for TaskQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskQueueClient interface {
	SubmitTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*WorkerId, error)
	PingAndTakeNewTasks(ctx context.Context, in *PingAndGetNewTasksRequest, opts ...grpc.CallOption) (*TaskListAndOther, error)
	UpdateTaskStatus(ctx context.Context, in *TaskStatusUpdate, opts ...grpc.CallOption) (*Ack, error)
	SendTaskLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TaskLog, Ack], error)
	StreamTaskLogsOutput(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLog], error)
	StreamTaskLogsErr(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLog], error)
	GetLogsChunk(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*LogChunkList, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*TaskList, error)
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*WorkersList, error)
	CreateWorker(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*WorkerIds, error)
	UpdateWorkerStatus(ctx context.Context, in *WorkerStatus, opts ...grpc.CallOption) (*Ack, error)
	DeleteWorker(ctx context.Context, in *WorkerDeletion, opts ...grpc.CallOption) (*JobId, error)
	UpdateWorker(ctx context.Context, in *WorkerUpdateRequest, opts ...grpc.CallOption) (*Ack, error)
	GetWorkerStatuses(ctx context.Context, in *WorkerStatusRequest, opts ...grpc.CallOption) (*WorkerStatusResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*JobsList, error)
	GetJobStatuses(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	DeleteJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Ack, error)
	UpdateJob(ctx context.Context, in *JobUpdate, opts ...grpc.CallOption) (*Ack, error)
	ListFlavors(ctx context.Context, in *ListFlavorsRequest, opts ...grpc.CallOption) (*FlavorsList, error)
	GetRcloneConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RcloneConfig, error)
	GetDockerCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DockerCredentials, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Ack, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserId, error)
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UsersList, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Ack, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Ack, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Ack, error)
	ListRecruiters(ctx context.Context, in *RecruiterFilter, opts ...grpc.CallOption) (*RecruiterList, error)
	CreateRecruiter(ctx context.Context, in *Recruiter, opts ...grpc.CallOption) (*Ack, error)
	UpdateRecruiter(ctx context.Context, in *RecruiterUpdate, opts ...grpc.CallOption) (*Ack, error)
	DeleteRecruiter(ctx context.Context, in *RecruiterId, opts ...grpc.CallOption) (*Ack, error)
	ListWorkflows(ctx context.Context, in *WorkflowFilter, opts ...grpc.CallOption) (*WorkflowList, error)
	CreateWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowId, error)
	DeleteWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*Ack, error)
	ListSteps(ctx context.Context, in *StepFilter, opts ...grpc.CallOption) (*StepList, error)
	CreateStep(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepId, error)
	DeleteStep(ctx context.Context, in *StepId, opts ...grpc.CallOption) (*Ack, error)
	GetStepStats(ctx context.Context, in *StepStatsRequest, opts ...grpc.CallOption) (*StepStatsResponse, error)
	GetWorkerStats(ctx context.Context, in *GetWorkerStatsRequest, opts ...grpc.CallOption) (*GetWorkerStatsResponse, error)
	FetchList(ctx context.Context, in *FetchListRequest, opts ...grpc.CallOption) (*FetchListResponse, error)
	FetchInfo(ctx context.Context, in *FetchListRequest, opts ...grpc.CallOption) (*FetchInfoResponse, error)
	// Template system
	UploadTemplate(ctx context.Context, in *UploadTemplateRequest, opts ...grpc.CallOption) (*UploadTemplateResponse, error)
	RunTemplate(ctx context.Context, in *RunTemplateRequest, opts ...grpc.CallOption) (*TemplateRun, error)
	ListTemplates(ctx context.Context, in *TemplateFilter, opts ...grpc.CallOption) (*TemplateList, error)
	ListTemplateRuns(ctx context.Context, in *TemplateRunFilter, opts ...grpc.CallOption) (*TemplateRunList, error)
	UpdateTemplateRun(ctx context.Context, in *UpdateTemplateRunRequest, opts ...grpc.CallOption) (*Ack, error)
	DeleteTemplateRun(ctx context.Context, in *DeleteTemplateRunRequest, opts ...grpc.CallOption) (*Ack, error)
	GetWorkspaceRoot(ctx context.Context, in *WorkspaceRootRequest, opts ...grpc.CallOption) (*WorkspaceRootResponse, error)
	RegisterSpecifications(ctx context.Context, in *ResourceSpec, opts ...grpc.CallOption) (*Ack, error)
	// Worker events
	ReportWorkerEvent(ctx context.Context, in *WorkerEvent, opts ...grpc.CallOption) (*Ack, error)
	ListWorkerEvents(ctx context.Context, in *WorkerEventFilter, opts ...grpc.CallOption) (*WorkerEventList, error)
	DeleteWorkerEvent(ctx context.Context, in *WorkerEventId, opts ...grpc.CallOption) (*Ack, error)
	PruneWorkerEvents(ctx context.Context, in *WorkerEventPruneFilter, opts ...grpc.CallOption) (*WorkerEventPruneResult, error)
}

type taskQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskQueueClient(cc grpc.ClientConnInterface) TaskQueueClient {
	return &taskQueueClient{cc}
}

func (c *taskQueueClient) SubmitTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, TaskQueue_SubmitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*WorkerId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerId)
	err := c.cc.Invoke(ctx, TaskQueue_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) PingAndTakeNewTasks(ctx context.Context, in *PingAndGetNewTasksRequest, opts ...grpc.CallOption) (*TaskListAndOther, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskListAndOther)
	err := c.cc.Invoke(ctx, TaskQueue_PingAndTakeNewTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateTaskStatus(ctx context.Context, in *TaskStatusUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) SendTaskLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TaskLog, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskQueue_ServiceDesc.Streams[0], TaskQueue_SendTaskLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskLog, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_SendTaskLogsClient = grpc.ClientStreamingClient[TaskLog, Ack]

func (c *taskQueueClient) StreamTaskLogsOutput(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskQueue_ServiceDesc.Streams[1], TaskQueue_StreamTaskLogsOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskId, TaskLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_StreamTaskLogsOutputClient = grpc.ServerStreamingClient[TaskLog]

func (c *taskQueueClient) StreamTaskLogsErr(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskQueue_ServiceDesc.Streams[2], TaskQueue_StreamTaskLogsErr_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskId, TaskLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_StreamTaskLogsErrClient = grpc.ServerStreamingClient[TaskLog]

func (c *taskQueueClient) GetLogsChunk(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*LogChunkList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogChunkList)
	err := c.cc.Invoke(ctx, TaskQueue_GetLogsChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, TaskQueue_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*WorkersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkersList)
	err := c.cc.Invoke(ctx, TaskQueue_ListWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) CreateWorker(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*WorkerIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerIds)
	err := c.cc.Invoke(ctx, TaskQueue_CreateWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateWorkerStatus(ctx context.Context, in *WorkerStatus, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateWorkerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteWorker(ctx context.Context, in *WorkerDeletion, opts ...grpc.CallOption) (*JobId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobId)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateWorker(ctx context.Context, in *WorkerUpdateRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) GetWorkerStatuses(ctx context.Context, in *WorkerStatusRequest, opts ...grpc.CallOption) (*WorkerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerStatusResponse)
	err := c.cc.Invoke(ctx, TaskQueue_GetWorkerStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*JobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobsList)
	err := c.cc.Invoke(ctx, TaskQueue_ListJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) GetJobStatuses(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, TaskQueue_GetJobStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateJob(ctx context.Context, in *JobUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListFlavors(ctx context.Context, in *ListFlavorsRequest, opts ...grpc.CallOption) (*FlavorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlavorsList)
	err := c.cc.Invoke(ctx, TaskQueue_ListFlavors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) GetRcloneConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RcloneConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RcloneConfig)
	err := c.cc.Invoke(ctx, TaskQueue_GetRcloneConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) GetDockerCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DockerCredentials, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DockerCredentials)
	err := c.cc.Invoke(ctx, TaskQueue_GetDockerCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, TaskQueue_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserId)
	err := c.cc.Invoke(ctx, TaskQueue_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, TaskQueue_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListRecruiters(ctx context.Context, in *RecruiterFilter, opts ...grpc.CallOption) (*RecruiterList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecruiterList)
	err := c.cc.Invoke(ctx, TaskQueue_ListRecruiters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) CreateRecruiter(ctx context.Context, in *Recruiter, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_CreateRecruiter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateRecruiter(ctx context.Context, in *RecruiterUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateRecruiter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteRecruiter(ctx context.Context, in *RecruiterId, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteRecruiter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListWorkflows(ctx context.Context, in *WorkflowFilter, opts ...grpc.CallOption) (*WorkflowList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowList)
	err := c.cc.Invoke(ctx, TaskQueue_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) CreateWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowId)
	err := c.cc.Invoke(ctx, TaskQueue_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListSteps(ctx context.Context, in *StepFilter, opts ...grpc.CallOption) (*StepList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StepList)
	err := c.cc.Invoke(ctx, TaskQueue_ListSteps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) CreateStep(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StepId)
	err := c.cc.Invoke(ctx, TaskQueue_CreateStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteStep(ctx context.Context, in *StepId, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) GetStepStats(ctx context.Context, in *StepStatsRequest, opts ...grpc.CallOption) (*StepStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StepStatsResponse)
	err := c.cc.Invoke(ctx, TaskQueue_GetStepStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) GetWorkerStats(ctx context.Context, in *GetWorkerStatsRequest, opts ...grpc.CallOption) (*GetWorkerStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkerStatsResponse)
	err := c.cc.Invoke(ctx, TaskQueue_GetWorkerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) FetchList(ctx context.Context, in *FetchListRequest, opts ...grpc.CallOption) (*FetchListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchListResponse)
	err := c.cc.Invoke(ctx, TaskQueue_FetchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) FetchInfo(ctx context.Context, in *FetchListRequest, opts ...grpc.CallOption) (*FetchInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchInfoResponse)
	err := c.cc.Invoke(ctx, TaskQueue_FetchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UploadTemplate(ctx context.Context, in *UploadTemplateRequest, opts ...grpc.CallOption) (*UploadTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadTemplateResponse)
	err := c.cc.Invoke(ctx, TaskQueue_UploadTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) RunTemplate(ctx context.Context, in *RunTemplateRequest, opts ...grpc.CallOption) (*TemplateRun, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TemplateRun)
	err := c.cc.Invoke(ctx, TaskQueue_RunTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListTemplates(ctx context.Context, in *TemplateFilter, opts ...grpc.CallOption) (*TemplateList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TemplateList)
	err := c.cc.Invoke(ctx, TaskQueue_ListTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListTemplateRuns(ctx context.Context, in *TemplateRunFilter, opts ...grpc.CallOption) (*TemplateRunList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TemplateRunList)
	err := c.cc.Invoke(ctx, TaskQueue_ListTemplateRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateTemplateRun(ctx context.Context, in *UpdateTemplateRunRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateTemplateRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteTemplateRun(ctx context.Context, in *DeleteTemplateRunRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteTemplateRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) GetWorkspaceRoot(ctx context.Context, in *WorkspaceRootRequest, opts ...grpc.CallOption) (*WorkspaceRootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceRootResponse)
	err := c.cc.Invoke(ctx, TaskQueue_GetWorkspaceRoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) RegisterSpecifications(ctx context.Context, in *ResourceSpec, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_RegisterSpecifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ReportWorkerEvent(ctx context.Context, in *WorkerEvent, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_ReportWorkerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) ListWorkerEvents(ctx context.Context, in *WorkerEventFilter, opts ...grpc.CallOption) (*WorkerEventList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerEventList)
	err := c.cc.Invoke(ctx, TaskQueue_ListWorkerEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) DeleteWorkerEvent(ctx context.Context, in *WorkerEventId, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_DeleteWorkerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) PruneWorkerEvents(ctx context.Context, in *WorkerEventPruneFilter, opts ...grpc.CallOption) (*WorkerEventPruneResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerEventPruneResult)
	err := c.cc.Invoke(ctx, TaskQueue_PruneWorkerEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskQueueServer is the server API for TaskQueue service.
// All implementations must embed UnimplementedTaskQueueServer
// for forward compatibility.
type TaskQueueServer interface {
	SubmitTask(context.Context, *TaskRequest) (*TaskResponse, error)
	RegisterWorker(context.Context, *WorkerInfo) (*WorkerId, error)
	PingAndTakeNewTasks(context.Context, *PingAndGetNewTasksRequest) (*TaskListAndOther, error)
	UpdateTaskStatus(context.Context, *TaskStatusUpdate) (*Ack, error)
	SendTaskLogs(grpc.ClientStreamingServer[TaskLog, Ack]) error
	StreamTaskLogsOutput(*TaskId, grpc.ServerStreamingServer[TaskLog]) error
	StreamTaskLogsErr(*TaskId, grpc.ServerStreamingServer[TaskLog]) error
	GetLogsChunk(context.Context, *GetLogsRequest) (*LogChunkList, error)
	ListTasks(context.Context, *ListTasksRequest) (*TaskList, error)
	ListWorkers(context.Context, *ListWorkersRequest) (*WorkersList, error)
	CreateWorker(context.Context, *WorkerRequest) (*WorkerIds, error)
	UpdateWorkerStatus(context.Context, *WorkerStatus) (*Ack, error)
	DeleteWorker(context.Context, *WorkerDeletion) (*JobId, error)
	UpdateWorker(context.Context, *WorkerUpdateRequest) (*Ack, error)
	GetWorkerStatuses(context.Context, *WorkerStatusRequest) (*WorkerStatusResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*JobsList, error)
	GetJobStatuses(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	DeleteJob(context.Context, *JobId) (*Ack, error)
	UpdateJob(context.Context, *JobUpdate) (*Ack, error)
	ListFlavors(context.Context, *ListFlavorsRequest) (*FlavorsList, error)
	GetRcloneConfig(context.Context, *emptypb.Empty) (*RcloneConfig, error)
	GetDockerCredentials(context.Context, *emptypb.Empty) (*DockerCredentials, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *Token) (*Ack, error)
	CreateUser(context.Context, *CreateUserRequest) (*UserId, error)
	ListUsers(context.Context, *emptypb.Empty) (*UsersList, error)
	DeleteUser(context.Context, *UserId) (*Ack, error)
	UpdateUser(context.Context, *User) (*Ack, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*Ack, error)
	ListRecruiters(context.Context, *RecruiterFilter) (*RecruiterList, error)
	CreateRecruiter(context.Context, *Recruiter) (*Ack, error)
	UpdateRecruiter(context.Context, *RecruiterUpdate) (*Ack, error)
	DeleteRecruiter(context.Context, *RecruiterId) (*Ack, error)
	ListWorkflows(context.Context, *WorkflowFilter) (*WorkflowList, error)
	CreateWorkflow(context.Context, *WorkflowRequest) (*WorkflowId, error)
	DeleteWorkflow(context.Context, *WorkflowId) (*Ack, error)
	ListSteps(context.Context, *StepFilter) (*StepList, error)
	CreateStep(context.Context, *StepRequest) (*StepId, error)
	DeleteStep(context.Context, *StepId) (*Ack, error)
	GetStepStats(context.Context, *StepStatsRequest) (*StepStatsResponse, error)
	GetWorkerStats(context.Context, *GetWorkerStatsRequest) (*GetWorkerStatsResponse, error)
	FetchList(context.Context, *FetchListRequest) (*FetchListResponse, error)
	FetchInfo(context.Context, *FetchListRequest) (*FetchInfoResponse, error)
	// Template system
	UploadTemplate(context.Context, *UploadTemplateRequest) (*UploadTemplateResponse, error)
	RunTemplate(context.Context, *RunTemplateRequest) (*TemplateRun, error)
	ListTemplates(context.Context, *TemplateFilter) (*TemplateList, error)
	ListTemplateRuns(context.Context, *TemplateRunFilter) (*TemplateRunList, error)
	UpdateTemplateRun(context.Context, *UpdateTemplateRunRequest) (*Ack, error)
	DeleteTemplateRun(context.Context, *DeleteTemplateRunRequest) (*Ack, error)
	GetWorkspaceRoot(context.Context, *WorkspaceRootRequest) (*WorkspaceRootResponse, error)
	RegisterSpecifications(context.Context, *ResourceSpec) (*Ack, error)
	// Worker events
	ReportWorkerEvent(context.Context, *WorkerEvent) (*Ack, error)
	ListWorkerEvents(context.Context, *WorkerEventFilter) (*WorkerEventList, error)
	DeleteWorkerEvent(context.Context, *WorkerEventId) (*Ack, error)
	PruneWorkerEvents(context.Context, *WorkerEventPruneFilter) (*WorkerEventPruneResult, error)
	mustEmbedUnimplementedTaskQueueServer()
}

// UnimplementedTaskQueueServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskQueueServer struct{}

func (UnimplementedTaskQueueServer) SubmitTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedTaskQueueServer) RegisterWorker(context.Context, *WorkerInfo) (*WorkerId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedTaskQueueServer) PingAndTakeNewTasks(context.Context, *PingAndGetNewTasksRequest) (*TaskListAndOther, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingAndTakeNewTasks not implemented")
}
func (UnimplementedTaskQueueServer) UpdateTaskStatus(context.Context, *TaskStatusUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedTaskQueueServer) SendTaskLogs(grpc.ClientStreamingServer[TaskLog, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method SendTaskLogs not implemented")
}
func (UnimplementedTaskQueueServer) StreamTaskLogsOutput(*TaskId, grpc.ServerStreamingServer[TaskLog]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskLogsOutput not implemented")
}
func (UnimplementedTaskQueueServer) StreamTaskLogsErr(*TaskId, grpc.ServerStreamingServer[TaskLog]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskLogsErr not implemented")
}
func (UnimplementedTaskQueueServer) GetLogsChunk(context.Context, *GetLogsRequest) (*LogChunkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogsChunk not implemented")
}
func (UnimplementedTaskQueueServer) ListTasks(context.Context, *ListTasksRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskQueueServer) ListWorkers(context.Context, *ListWorkersRequest) (*WorkersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedTaskQueueServer) CreateWorker(context.Context, *WorkerRequest) (*WorkerIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorker not implemented")
}
func (UnimplementedTaskQueueServer) UpdateWorkerStatus(context.Context, *WorkerStatus) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkerStatus not implemented")
}
func (UnimplementedTaskQueueServer) DeleteWorker(context.Context, *WorkerDeletion) (*JobId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorker not implemented")
}
func (UnimplementedTaskQueueServer) UpdateWorker(context.Context, *WorkerUpdateRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorker not implemented")
}
func (UnimplementedTaskQueueServer) GetWorkerStatuses(context.Context, *WorkerStatusRequest) (*WorkerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerStatuses not implemented")
}
func (UnimplementedTaskQueueServer) ListJobs(context.Context, *ListJobsRequest) (*JobsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedTaskQueueServer) GetJobStatuses(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatuses not implemented")
}
func (UnimplementedTaskQueueServer) DeleteJob(context.Context, *JobId) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedTaskQueueServer) UpdateJob(context.Context, *JobUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedTaskQueueServer) ListFlavors(context.Context, *ListFlavorsRequest) (*FlavorsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlavors not implemented")
}
func (UnimplementedTaskQueueServer) GetRcloneConfig(context.Context, *emptypb.Empty) (*RcloneConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRcloneConfig not implemented")
}
func (UnimplementedTaskQueueServer) GetDockerCredentials(context.Context, *emptypb.Empty) (*DockerCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDockerCredentials not implemented")
}
func (UnimplementedTaskQueueServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTaskQueueServer) Logout(context.Context, *Token) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedTaskQueueServer) CreateUser(context.Context, *CreateUserRequest) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTaskQueueServer) ListUsers(context.Context, *emptypb.Empty) (*UsersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedTaskQueueServer) DeleteUser(context.Context, *UserId) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedTaskQueueServer) UpdateUser(context.Context, *User) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedTaskQueueServer) ChangePassword(context.Context, *ChangePasswordRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedTaskQueueServer) ListRecruiters(context.Context, *RecruiterFilter) (*RecruiterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecruiters not implemented")
}
func (UnimplementedTaskQueueServer) CreateRecruiter(context.Context, *Recruiter) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecruiter not implemented")
}
func (UnimplementedTaskQueueServer) UpdateRecruiter(context.Context, *RecruiterUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecruiter not implemented")
}
func (UnimplementedTaskQueueServer) DeleteRecruiter(context.Context, *RecruiterId) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecruiter not implemented")
}
func (UnimplementedTaskQueueServer) ListWorkflows(context.Context, *WorkflowFilter) (*WorkflowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedTaskQueueServer) CreateWorkflow(context.Context, *WorkflowRequest) (*WorkflowId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedTaskQueueServer) DeleteWorkflow(context.Context, *WorkflowId) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedTaskQueueServer) ListSteps(context.Context, *StepFilter) (*StepList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSteps not implemented")
}
func (UnimplementedTaskQueueServer) CreateStep(context.Context, *StepRequest) (*StepId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStep not implemented")
}
func (UnimplementedTaskQueueServer) DeleteStep(context.Context, *StepId) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStep not implemented")
}
func (UnimplementedTaskQueueServer) GetStepStats(context.Context, *StepStatsRequest) (*StepStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStepStats not implemented")
}
func (UnimplementedTaskQueueServer) GetWorkerStats(context.Context, *GetWorkerStatsRequest) (*GetWorkerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerStats not implemented")
}
func (UnimplementedTaskQueueServer) FetchList(context.Context, *FetchListRequest) (*FetchListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchList not implemented")
}
func (UnimplementedTaskQueueServer) FetchInfo(context.Context, *FetchListRequest) (*FetchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchInfo not implemented")
}
func (UnimplementedTaskQueueServer) UploadTemplate(context.Context, *UploadTemplateRequest) (*UploadTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadTemplate not implemented")
}
func (UnimplementedTaskQueueServer) RunTemplate(context.Context, *RunTemplateRequest) (*TemplateRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTemplate not implemented")
}
func (UnimplementedTaskQueueServer) ListTemplates(context.Context, *TemplateFilter) (*TemplateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedTaskQueueServer) ListTemplateRuns(context.Context, *TemplateRunFilter) (*TemplateRunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRuns not implemented")
}
func (UnimplementedTaskQueueServer) UpdateTemplateRun(context.Context, *UpdateTemplateRunRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateRun not implemented")
}
func (UnimplementedTaskQueueServer) DeleteTemplateRun(context.Context, *DeleteTemplateRunRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateRun not implemented")
}
func (UnimplementedTaskQueueServer) GetWorkspaceRoot(context.Context, *WorkspaceRootRequest) (*WorkspaceRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceRoot not implemented")
}
func (UnimplementedTaskQueueServer) RegisterSpecifications(context.Context, *ResourceSpec) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSpecifications not implemented")
}
func (UnimplementedTaskQueueServer) ReportWorkerEvent(context.Context, *WorkerEvent) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWorkerEvent not implemented")
}
func (UnimplementedTaskQueueServer) ListWorkerEvents(context.Context, *WorkerEventFilter) (*WorkerEventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkerEvents not implemented")
}
func (UnimplementedTaskQueueServer) DeleteWorkerEvent(context.Context, *WorkerEventId) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkerEvent not implemented")
}
func (UnimplementedTaskQueueServer) PruneWorkerEvents(context.Context, *WorkerEventPruneFilter) (*WorkerEventPruneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneWorkerEvents not implemented")
}
func (UnimplementedTaskQueueServer) mustEmbedUnimplementedTaskQueueServer() {}
func (UnimplementedTaskQueueServer) testEmbeddedByValue()                   {}

// UnsafeTaskQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskQueueServer will
// result in compilation errors.
type UnsafeTaskQueueServer interface {
	mustEmbedUnimplementedTaskQueueServer()
}

func RegisterTaskQueueServer(s grpc.ServiceRegistrar, srv TaskQueueServer) {
	// If the following call pancis, it indicates UnimplementedTaskQueueServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskQueue_ServiceDesc, srv)
}

func _TaskQueue_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_SubmitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).SubmitTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).RegisterWorker(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_PingAndTakeNewTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingAndGetNewTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).PingAndTakeNewTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_PingAndTakeNewTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).PingAndTakeNewTasks(ctx, req.(*PingAndGetNewTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateTaskStatus(ctx, req.(*TaskStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_SendTaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskQueueServer).SendTaskLogs(&grpc.GenericServerStream[TaskLog, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_SendTaskLogsServer = grpc.ClientStreamingServer[TaskLog, Ack]

func _TaskQueue_StreamTaskLogsOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskQueueServer).StreamTaskLogsOutput(m, &grpc.GenericServerStream[TaskId, TaskLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_StreamTaskLogsOutputServer = grpc.ServerStreamingServer[TaskLog]

func _TaskQueue_StreamTaskLogsErr_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskQueueServer).StreamTaskLogsErr(m, &grpc.GenericServerStream[TaskId, TaskLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_StreamTaskLogsErrServer = grpc.ServerStreamingServer[TaskLog]

func _TaskQueue_GetLogsChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetLogsChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetLogsChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetLogsChunk(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_CreateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).CreateWorker(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateWorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateWorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateWorkerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateWorkerStatus(ctx, req.(*WorkerStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerDeletion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteWorker(ctx, req.(*WorkerDeletion))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateWorker(ctx, req.(*WorkerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_GetWorkerStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetWorkerStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetWorkerStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetWorkerStatuses(ctx, req.(*WorkerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_GetJobStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetJobStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetJobStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetJobStatuses(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateJob(ctx, req.(*JobUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListFlavors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlavorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListFlavors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListFlavors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListFlavors(ctx, req.(*ListFlavorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_GetRcloneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetRcloneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetRcloneConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetRcloneConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_GetDockerCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetDockerCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetDockerCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetDockerCredentials(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).Logout(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListRecruiters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecruiterFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListRecruiters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListRecruiters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListRecruiters(ctx, req.(*RecruiterFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_CreateRecruiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recruiter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).CreateRecruiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_CreateRecruiter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).CreateRecruiter(ctx, req.(*Recruiter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateRecruiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecruiterUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateRecruiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateRecruiter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateRecruiter(ctx, req.(*RecruiterUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteRecruiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecruiterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteRecruiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteRecruiter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteRecruiter(ctx, req.(*RecruiterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListWorkflows(ctx, req.(*WorkflowFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).CreateWorkflow(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteWorkflow(ctx, req.(*WorkflowId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListSteps(ctx, req.(*StepFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_CreateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).CreateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_CreateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).CreateStep(ctx, req.(*StepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteStep(ctx, req.(*StepId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_GetStepStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetStepStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetStepStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetStepStats(ctx, req.(*StepStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_GetWorkerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetWorkerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetWorkerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetWorkerStats(ctx, req.(*GetWorkerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_FetchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).FetchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_FetchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).FetchList(ctx, req.(*FetchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_FetchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).FetchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_FetchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).FetchInfo(ctx, req.(*FetchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UploadTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UploadTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UploadTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UploadTemplate(ctx, req.(*UploadTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_RunTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).RunTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_RunTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).RunTemplate(ctx, req.(*RunTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListTemplates(ctx, req.(*TemplateFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListTemplateRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRunFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListTemplateRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListTemplateRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListTemplateRuns(ctx, req.(*TemplateRunFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateTemplateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateTemplateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateTemplateRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateTemplateRun(ctx, req.(*UpdateTemplateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteTemplateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteTemplateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteTemplateRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteTemplateRun(ctx, req.(*DeleteTemplateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_GetWorkspaceRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).GetWorkspaceRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_GetWorkspaceRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).GetWorkspaceRoot(ctx, req.(*WorkspaceRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_RegisterSpecifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).RegisterSpecifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_RegisterSpecifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).RegisterSpecifications(ctx, req.(*ResourceSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ReportWorkerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ReportWorkerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ReportWorkerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ReportWorkerEvent(ctx, req.(*WorkerEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_ListWorkerEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerEventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).ListWorkerEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_ListWorkerEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).ListWorkerEvents(ctx, req.(*WorkerEventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_DeleteWorkerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerEventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).DeleteWorkerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_DeleteWorkerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).DeleteWorkerEvent(ctx, req.(*WorkerEventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_PruneWorkerEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerEventPruneFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).PruneWorkerEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_PruneWorkerEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).PruneWorkerEvents(ctx, req.(*WorkerEventPruneFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskQueue_ServiceDesc is the grpc.ServiceDesc for TaskQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskqueue.TaskQueue",
	HandlerType: (*TaskQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTask",
			Handler:    _TaskQueue_SubmitTask_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _TaskQueue_RegisterWorker_Handler,
		},
		{
			MethodName: "PingAndTakeNewTasks",
			Handler:    _TaskQueue_PingAndTakeNewTasks_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _TaskQueue_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "GetLogsChunk",
			Handler:    _TaskQueue_GetLogsChunk_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskQueue_ListTasks_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _TaskQueue_ListWorkers_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _TaskQueue_CreateWorker_Handler,
		},
		{
			MethodName: "UpdateWorkerStatus",
			Handler:    _TaskQueue_UpdateWorkerStatus_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _TaskQueue_DeleteWorker_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _TaskQueue_UpdateWorker_Handler,
		},
		{
			MethodName: "GetWorkerStatuses",
			Handler:    _TaskQueue_GetWorkerStatuses_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _TaskQueue_ListJobs_Handler,
		},
		{
			MethodName: "GetJobStatuses",
			Handler:    _TaskQueue_GetJobStatuses_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _TaskQueue_DeleteJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _TaskQueue_UpdateJob_Handler,
		},
		{
			MethodName: "ListFlavors",
			Handler:    _TaskQueue_ListFlavors_Handler,
		},
		{
			MethodName: "GetRcloneConfig",
			Handler:    _TaskQueue_GetRcloneConfig_Handler,
		},
		{
			MethodName: "GetDockerCredentials",
			Handler:    _TaskQueue_GetDockerCredentials_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TaskQueue_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TaskQueue_Logout_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _TaskQueue_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _TaskQueue_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _TaskQueue_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _TaskQueue_UpdateUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _TaskQueue_ChangePassword_Handler,
		},
		{
			MethodName: "ListRecruiters",
			Handler:    _TaskQueue_ListRecruiters_Handler,
		},
		{
			MethodName: "CreateRecruiter",
			Handler:    _TaskQueue_CreateRecruiter_Handler,
		},
		{
			MethodName: "UpdateRecruiter",
			Handler:    _TaskQueue_UpdateRecruiter_Handler,
		},
		{
			MethodName: "DeleteRecruiter",
			Handler:    _TaskQueue_DeleteRecruiter_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _TaskQueue_ListWorkflows_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _TaskQueue_CreateWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _TaskQueue_DeleteWorkflow_Handler,
		},
		{
			MethodName: "ListSteps",
			Handler:    _TaskQueue_ListSteps_Handler,
		},
		{
			MethodName: "CreateStep",
			Handler:    _TaskQueue_CreateStep_Handler,
		},
		{
			MethodName: "DeleteStep",
			Handler:    _TaskQueue_DeleteStep_Handler,
		},
		{
			MethodName: "GetStepStats",
			Handler:    _TaskQueue_GetStepStats_Handler,
		},
		{
			MethodName: "GetWorkerStats",
			Handler:    _TaskQueue_GetWorkerStats_Handler,
		},
		{
			MethodName: "FetchList",
			Handler:    _TaskQueue_FetchList_Handler,
		},
		{
			MethodName: "FetchInfo",
			Handler:    _TaskQueue_FetchInfo_Handler,
		},
		{
			MethodName: "UploadTemplate",
			Handler:    _TaskQueue_UploadTemplate_Handler,
		},
		{
			MethodName: "RunTemplate",
			Handler:    _TaskQueue_RunTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _TaskQueue_ListTemplates_Handler,
		},
		{
			MethodName: "ListTemplateRuns",
			Handler:    _TaskQueue_ListTemplateRuns_Handler,
		},
		{
			MethodName: "UpdateTemplateRun",
			Handler:    _TaskQueue_UpdateTemplateRun_Handler,
		},
		{
			MethodName: "DeleteTemplateRun",
			Handler:    _TaskQueue_DeleteTemplateRun_Handler,
		},
		{
			MethodName: "GetWorkspaceRoot",
			Handler:    _TaskQueue_GetWorkspaceRoot_Handler,
		},
		{
			MethodName: "RegisterSpecifications",
			Handler:    _TaskQueue_RegisterSpecifications_Handler,
		},
		{
			MethodName: "ReportWorkerEvent",
			Handler:    _TaskQueue_ReportWorkerEvent_Handler,
		},
		{
			MethodName: "ListWorkerEvents",
			Handler:    _TaskQueue_ListWorkerEvents_Handler,
		},
		{
			MethodName: "DeleteWorkerEvent",
			Handler:    _TaskQueue_DeleteWorkerEvent_Handler,
		},
		{
			MethodName: "PruneWorkerEvents",
			Handler:    _TaskQueue_PruneWorkerEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTaskLogs",
			Handler:       _TaskQueue_SendTaskLogs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTaskLogsOutput",
			Handler:       _TaskQueue_StreamTaskLogsOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTaskLogsErr",
			Handler:       _TaskQueue_StreamTaskLogsErr_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taskqueue.proto",
}
