// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.3
// source: taskqueue.proto

package taskqueuepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskQueue_SubmitTask_FullMethodName          = "/taskqueue.TaskQueue/SubmitTask"
	TaskQueue_RegisterWorker_FullMethodName      = "/taskqueue.TaskQueue/RegisterWorker"
	TaskQueue_PingAndTakeNewTasks_FullMethodName = "/taskqueue.TaskQueue/PingAndTakeNewTasks"
	TaskQueue_UpdateTaskStatus_FullMethodName    = "/taskqueue.TaskQueue/UpdateTaskStatus"
	TaskQueue_SendTaskLogs_FullMethodName        = "/taskqueue.TaskQueue/SendTaskLogs"
	TaskQueue_StreamTaskLogs_FullMethodName      = "/taskqueue.TaskQueue/StreamTaskLogs"
)

// TaskQueueClient is the client API for TaskQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskQueueClient interface {
	SubmitTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*Ack, error)
	PingAndTakeNewTasks(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*TaskList, error)
	UpdateTaskStatus(ctx context.Context, in *TaskStatusUpdate, opts ...grpc.CallOption) (*Ack, error)
	SendTaskLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TaskLog, Ack], error)
	StreamTaskLogs(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLog], error)
}

type taskQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskQueueClient(cc grpc.ClientConnInterface) TaskQueueClient {
	return &taskQueueClient{cc}
}

func (c *taskQueueClient) SubmitTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, TaskQueue_SubmitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) PingAndTakeNewTasks(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, TaskQueue_PingAndTakeNewTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) UpdateTaskStatus(ctx context.Context, in *TaskStatusUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, TaskQueue_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) SendTaskLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TaskLog, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskQueue_ServiceDesc.Streams[0], TaskQueue_SendTaskLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskLog, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_SendTaskLogsClient = grpc.ClientStreamingClient[TaskLog, Ack]

func (c *taskQueueClient) StreamTaskLogs(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskQueue_ServiceDesc.Streams[1], TaskQueue_StreamTaskLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskId, TaskLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_StreamTaskLogsClient = grpc.ServerStreamingClient[TaskLog]

// TaskQueueServer is the server API for TaskQueue service.
// All implementations must embed UnimplementedTaskQueueServer
// for forward compatibility.
type TaskQueueServer interface {
	SubmitTask(context.Context, *TaskRequest) (*TaskResponse, error)
	RegisterWorker(context.Context, *WorkerInfo) (*Ack, error)
	PingAndTakeNewTasks(context.Context, *WorkerInfo) (*TaskList, error)
	UpdateTaskStatus(context.Context, *TaskStatusUpdate) (*Ack, error)
	SendTaskLogs(grpc.ClientStreamingServer[TaskLog, Ack]) error
	StreamTaskLogs(*TaskId, grpc.ServerStreamingServer[TaskLog]) error
	mustEmbedUnimplementedTaskQueueServer()
}

// UnimplementedTaskQueueServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskQueueServer struct{}

func (UnimplementedTaskQueueServer) SubmitTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedTaskQueueServer) RegisterWorker(context.Context, *WorkerInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedTaskQueueServer) PingAndTakeNewTasks(context.Context, *WorkerInfo) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingAndTakeNewTasks not implemented")
}
func (UnimplementedTaskQueueServer) UpdateTaskStatus(context.Context, *TaskStatusUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedTaskQueueServer) SendTaskLogs(grpc.ClientStreamingServer[TaskLog, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method SendTaskLogs not implemented")
}
func (UnimplementedTaskQueueServer) StreamTaskLogs(*TaskId, grpc.ServerStreamingServer[TaskLog]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskLogs not implemented")
}
func (UnimplementedTaskQueueServer) mustEmbedUnimplementedTaskQueueServer() {}
func (UnimplementedTaskQueueServer) testEmbeddedByValue()                   {}

// UnsafeTaskQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskQueueServer will
// result in compilation errors.
type UnsafeTaskQueueServer interface {
	mustEmbedUnimplementedTaskQueueServer()
}

func RegisterTaskQueueServer(s grpc.ServiceRegistrar, srv TaskQueueServer) {
	// If the following call pancis, it indicates UnimplementedTaskQueueServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskQueue_ServiceDesc, srv)
}

func _TaskQueue_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_SubmitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).SubmitTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).RegisterWorker(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_PingAndTakeNewTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).PingAndTakeNewTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_PingAndTakeNewTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).PingAndTakeNewTasks(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).UpdateTaskStatus(ctx, req.(*TaskStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_SendTaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskQueueServer).SendTaskLogs(&grpc.GenericServerStream[TaskLog, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_SendTaskLogsServer = grpc.ClientStreamingServer[TaskLog, Ack]

func _TaskQueue_StreamTaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskQueueServer).StreamTaskLogs(m, &grpc.GenericServerStream[TaskId, TaskLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueue_StreamTaskLogsServer = grpc.ServerStreamingServer[TaskLog]

// TaskQueue_ServiceDesc is the grpc.ServiceDesc for TaskQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskqueue.TaskQueue",
	HandlerType: (*TaskQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTask",
			Handler:    _TaskQueue_SubmitTask_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _TaskQueue_RegisterWorker_Handler,
		},
		{
			MethodName: "PingAndTakeNewTasks",
			Handler:    _TaskQueue_PingAndTakeNewTasks_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _TaskQueue_UpdateTaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTaskLogs",
			Handler:       _TaskQueue_SendTaskLogs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTaskLogs",
			Handler:       _TaskQueue_StreamTaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taskqueue.proto",
}
