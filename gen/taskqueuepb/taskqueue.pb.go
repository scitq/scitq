// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: taskqueue.proto

package taskqueuepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_taskqueue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{0}
}

func (x *TaskResponse) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Concurrency   *uint32                `protobuf:"varint,2,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_taskqueue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerInfo) GetConcurrency() uint32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

type TaskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Command          string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Shell            *string                `protobuf:"bytes,2,opt,name=shell,proto3,oneof" json:"shell,omitempty"`
	Container        string                 `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
	ContainerOptions *string                `protobuf:"bytes,4,opt,name=container_options,json=containerOptions,proto3,oneof" json:"container_options,omitempty"`
	StepId           *uint32                `protobuf:"varint,5,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	Input            []string               `protobuf:"bytes,6,rep,name=input,proto3" json:"input,omitempty"`
	Resource         []string               `protobuf:"bytes,7,rep,name=resource,proto3" json:"resource,omitempty"`
	Output           *string                `protobuf:"bytes,8,opt,name=output,proto3,oneof" json:"output,omitempty"`
	Retry            *uint32                `protobuf:"varint,9,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
	IsFinal          *bool                  `protobuf:"varint,10,opt,name=is_final,json=isFinal,proto3,oneof" json:"is_final,omitempty"`
	UsesCache        *bool                  `protobuf:"varint,11,opt,name=uses_cache,json=usesCache,proto3,oneof" json:"uses_cache,omitempty"`
	DownloadTimeout  *float32               `protobuf:"fixed32,12,opt,name=download_timeout,json=downloadTimeout,proto3,oneof" json:"download_timeout,omitempty"`
	RunningTimeout   *float32               `protobuf:"fixed32,13,opt,name=running_timeout,json=runningTimeout,proto3,oneof" json:"running_timeout,omitempty"`
	UploadTimeout    *float32               `protobuf:"fixed32,14,opt,name=upload_timeout,json=uploadTimeout,proto3,oneof" json:"upload_timeout,omitempty"`
	Status           string                 `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	mi := &file_taskqueue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *TaskRequest) GetShell() string {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return ""
}

func (x *TaskRequest) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *TaskRequest) GetContainerOptions() string {
	if x != nil && x.ContainerOptions != nil {
		return *x.ContainerOptions
	}
	return ""
}

func (x *TaskRequest) GetStepId() uint32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

func (x *TaskRequest) GetInput() []string {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TaskRequest) GetResource() []string {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TaskRequest) GetOutput() string {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return ""
}

func (x *TaskRequest) GetRetry() uint32 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

func (x *TaskRequest) GetIsFinal() bool {
	if x != nil && x.IsFinal != nil {
		return *x.IsFinal
	}
	return false
}

func (x *TaskRequest) GetUsesCache() bool {
	if x != nil && x.UsesCache != nil {
		return *x.UsesCache
	}
	return false
}

func (x *TaskRequest) GetDownloadTimeout() float32 {
	if x != nil && x.DownloadTimeout != nil {
		return *x.DownloadTimeout
	}
	return 0
}

func (x *TaskRequest) GetRunningTimeout() float32 {
	if x != nil && x.RunningTimeout != nil {
		return *x.RunningTimeout
	}
	return 0
}

func (x *TaskRequest) GetUploadTimeout() float32 {
	if x != nil && x.UploadTimeout != nil {
		return *x.UploadTimeout
	}
	return 0
}

func (x *TaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Task struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TaskId           uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Command          string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Shell            *string                `protobuf:"bytes,3,opt,name=shell,proto3,oneof" json:"shell,omitempty"`
	Container        string                 `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	ContainerOptions *string                `protobuf:"bytes,5,opt,name=container_options,json=containerOptions,proto3,oneof" json:"container_options,omitempty"`
	StepId           *uint32                `protobuf:"varint,6,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	Input            []string               `protobuf:"bytes,7,rep,name=input,proto3" json:"input,omitempty"`
	Resource         []string               `protobuf:"bytes,8,rep,name=resource,proto3" json:"resource,omitempty"`
	Output           *string                `protobuf:"bytes,9,opt,name=output,proto3,oneof" json:"output,omitempty"`
	Retry            *uint32                `protobuf:"varint,10,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
	IsFinal          *bool                  `protobuf:"varint,11,opt,name=is_final,json=isFinal,proto3,oneof" json:"is_final,omitempty"`
	UsesCache        *bool                  `protobuf:"varint,12,opt,name=uses_cache,json=usesCache,proto3,oneof" json:"uses_cache,omitempty"`
	DownloadTimeout  *float32               `protobuf:"fixed32,13,opt,name=download_timeout,json=downloadTimeout,proto3,oneof" json:"download_timeout,omitempty"`
	RunningTimeout   *float32               `protobuf:"fixed32,14,opt,name=running_timeout,json=runningTimeout,proto3,oneof" json:"running_timeout,omitempty"`
	UploadTimeout    *float32               `protobuf:"fixed32,15,opt,name=upload_timeout,json=uploadTimeout,proto3,oneof" json:"upload_timeout,omitempty"`
	Status           string                 `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_taskqueue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Task) GetShell() string {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return ""
}

func (x *Task) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *Task) GetContainerOptions() string {
	if x != nil && x.ContainerOptions != nil {
		return *x.ContainerOptions
	}
	return ""
}

func (x *Task) GetStepId() uint32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

func (x *Task) GetInput() []string {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Task) GetResource() []string {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Task) GetOutput() string {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return ""
}

func (x *Task) GetRetry() uint32 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

func (x *Task) GetIsFinal() bool {
	if x != nil && x.IsFinal != nil {
		return *x.IsFinal
	}
	return false
}

func (x *Task) GetUsesCache() bool {
	if x != nil && x.UsesCache != nil {
		return *x.UsesCache
	}
	return false
}

func (x *Task) GetDownloadTimeout() float32 {
	if x != nil && x.DownloadTimeout != nil {
		return *x.DownloadTimeout
	}
	return 0
}

func (x *Task) GetRunningTimeout() float32 {
	if x != nil && x.RunningTimeout != nil {
		return *x.RunningTimeout
	}
	return 0
}

func (x *Task) GetUploadTimeout() float32 {
	if x != nil && x.UploadTimeout != nil {
		return *x.UploadTimeout
	}
	return 0
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TaskList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	mi := &file_taskqueue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{4}
}

func (x *TaskList) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Worker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,3,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      uint32                 `protobuf:"varint,4,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Ipv4          string                 `protobuf:"bytes,6,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6          string                 `protobuf:"bytes,7,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Flavor        string                 `protobuf:"bytes,8,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Provider      string                 `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
	Region        string                 `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_taskqueue_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{5}
}

func (x *Worker) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Worker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Worker) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Worker) GetPrefetch() uint32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *Worker) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Worker) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *Worker) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *Worker) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *Worker) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Worker) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type WorkersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workers       []*Worker              `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkersList) Reset() {
	*x = WorkersList{}
	mi := &file_taskqueue_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkersList) ProtoMessage() {}

func (x *WorkersList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkersList.ProtoReflect.Descriptor instead.
func (*WorkersList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{6}
}

func (x *WorkersList) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

type ListWorkersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersRequest) Reset() {
	*x = ListWorkersRequest{}
	mi := &file_taskqueue_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersRequest) ProtoMessage() {}

func (x *ListWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{7}
}

type TaskUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Weight        float64                `protobuf:"fixed64,1,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdate) Reset() {
	*x = TaskUpdate{}
	mi := &file_taskqueue_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdate) ProtoMessage() {}

func (x *TaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdate.ProtoReflect.Descriptor instead.
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{8}
}

func (x *TaskUpdate) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type TaskUpdateList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       map[uint32]*TaskUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // optional — can be empty
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdateList) Reset() {
	*x = TaskUpdateList{}
	mi := &file_taskqueue_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateList) ProtoMessage() {}

func (x *TaskUpdateList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateList.ProtoReflect.Descriptor instead.
func (*TaskUpdateList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{9}
}

func (x *TaskUpdateList) GetUpdates() map[uint32]*TaskUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TaskListAndOther struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Updates       *TaskUpdateList        `protobuf:"bytes,3,opt,name=updates,proto3" json:"updates,omitempty"`
	ActiveTasks   []uint32               `protobuf:"varint,4,rep,packed,name=active_tasks,json=activeTasks,proto3" json:"active_tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskListAndOther) Reset() {
	*x = TaskListAndOther{}
	mi := &file_taskqueue_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListAndOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListAndOther) ProtoMessage() {}

func (x *TaskListAndOther) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListAndOther.ProtoReflect.Descriptor instead.
func (*TaskListAndOther) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{10}
}

func (x *TaskListAndOther) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskListAndOther) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *TaskListAndOther) GetUpdates() *TaskUpdateList {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *TaskListAndOther) GetActiveTasks() []uint32 {
	if x != nil {
		return x.ActiveTasks
	}
	return nil
}

type TaskStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NewStatus     string                 `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusUpdate) Reset() {
	*x = TaskStatusUpdate{}
	mi := &file_taskqueue_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusUpdate) ProtoMessage() {}

func (x *TaskStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusUpdate.ProtoReflect.Descriptor instead.
func (*TaskStatusUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{11}
}

func (x *TaskStatusUpdate) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskStatusUpdate) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

type TaskLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	LogType       string                 `protobuf:"bytes,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"` // 'O' for stdout, 'E' for stderr
	LogText       string                 `protobuf:"bytes,3,opt,name=log_text,json=logText,proto3" json:"log_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskLog) Reset() {
	*x = TaskLog{}
	mi := &file_taskqueue_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLog) ProtoMessage() {}

func (x *TaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLog.ProtoReflect.Descriptor instead.
func (*TaskLog) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{12}
}

func (x *TaskLog) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLog) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

func (x *TaskLog) GetLogText() string {
	if x != nil {
		return x.LogText
	}
	return ""
}

type TaskId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskId) Reset() {
	*x = TaskId{}
	mi := &file_taskqueue_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskId) ProtoMessage() {}

func (x *TaskId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskId.ProtoReflect.Descriptor instead.
func (*TaskId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{13}
}

func (x *TaskId) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type WorkerId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerId) Reset() {
	*x = WorkerId{}
	mi := &file_taskqueue_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerId) ProtoMessage() {}

func (x *WorkerId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerId.ProtoReflect.Descriptor instead.
func (*WorkerId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{14}
}

func (x *WorkerId) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

type WorkerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerIds     []uint32               `protobuf:"varint,1,rep,packed,name=worker_ids,json=workerIds,proto3" json:"worker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatusRequest) Reset() {
	*x = WorkerStatusRequest{}
	mi := &file_taskqueue_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusRequest) ProtoMessage() {}

func (x *WorkerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatusRequest.ProtoReflect.Descriptor instead.
func (*WorkerStatusRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{15}
}

func (x *WorkerStatusRequest) GetWorkerIds() []uint32 {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

type WorkerStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatus) Reset() {
	*x = WorkerStatus{}
	mi := &file_taskqueue_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatus) ProtoMessage() {}

func (x *WorkerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatus.ProtoReflect.Descriptor instead.
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{16}
}

func (x *WorkerStatus) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type WorkerStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statuses      []*WorkerStatus        `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatusResponse) Reset() {
	*x = WorkerStatusResponse{}
	mi := &file_taskqueue_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusResponse) ProtoMessage() {}

func (x *WorkerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatusResponse.ProtoReflect.Descriptor instead.
func (*WorkerStatusResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{17}
}

func (x *WorkerStatusResponse) GetStatuses() []*WorkerStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type WorkerDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	WorkerName    string                 `protobuf:"bytes,2,opt,name=worker_name,json=workerName,proto3" json:"worker_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerDetails) Reset() {
	*x = WorkerDetails{}
	mi := &file_taskqueue_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDetails) ProtoMessage() {}

func (x *WorkerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDetails.ProtoReflect.Descriptor instead.
func (*WorkerDetails) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{18}
}

func (x *WorkerDetails) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerDetails) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

type WorkerIds struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkersDetails []*WorkerDetails       `protobuf:"bytes,1,rep,name=workers_details,json=workersDetails,proto3" json:"workers_details,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerIds) Reset() {
	*x = WorkerIds{}
	mi := &file_taskqueue_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIds) ProtoMessage() {}

func (x *WorkerIds) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIds.ProtoReflect.Descriptor instead.
func (*WorkerIds) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{19}
}

func (x *WorkerIds) GetWorkersDetails() []*WorkerDetails {
	if x != nil {
		return x.WorkersDetails
	}
	return nil
}

type JobId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         uint32                 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobId) Reset() {
	*x = JobId{}
	mi := &file_taskqueue_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobId) ProtoMessage() {}

func (x *JobId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobId.ProtoReflect.Descriptor instead.
func (*JobId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{20}
}

func (x *JobId) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type PingAndGetNewTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Stats         *WorkerStats           `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"` // Optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingAndGetNewTasksRequest) Reset() {
	*x = PingAndGetNewTasksRequest{}
	mi := &file_taskqueue_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingAndGetNewTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingAndGetNewTasksRequest) ProtoMessage() {}

func (x *PingAndGetNewTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingAndGetNewTasksRequest.ProtoReflect.Descriptor instead.
func (*PingAndGetNewTasksRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{21}
}

func (x *PingAndGetNewTasksRequest) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *PingAndGetNewTasksRequest) GetStats() *WorkerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_taskqueue_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{22}
}

func (x *Ack) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusFilter  *string                `protobuf:"bytes,1,opt,name=status_filter,json=statusFilter,proto3,oneof" json:"status_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_taskqueue_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{23}
}

func (x *ListTasksRequest) GetStatusFilter() string {
	if x != nil && x.StatusFilter != nil {
		return *x.StatusFilter
	}
	return ""
}

type WorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProviderId    uint32                 `protobuf:"varint,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	FlavorId      uint32                 `protobuf:"varint,2,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	RegionId      uint32                 `protobuf:"varint,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Number        uint32                 `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,5,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      uint32                 `protobuf:"varint,6,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	StepId        *uint32                `protobuf:"varint,7,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerRequest) Reset() {
	*x = WorkerRequest{}
	mi := &file_taskqueue_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRequest) ProtoMessage() {}

func (x *WorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRequest.ProtoReflect.Descriptor instead.
func (*WorkerRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{24}
}

func (x *WorkerRequest) GetProviderId() uint32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *WorkerRequest) GetFlavorId() uint32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *WorkerRequest) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *WorkerRequest) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *WorkerRequest) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *WorkerRequest) GetPrefetch() uint32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *WorkerRequest) GetStepId() uint32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

type WorkerUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ProviderId    *uint32                `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	FlavorId      *uint32                `protobuf:"varint,3,opt,name=flavor_id,json=flavorId,proto3,oneof" json:"flavor_id,omitempty"`
	RegionId      *uint32                `protobuf:"varint,4,opt,name=region_id,json=regionId,proto3,oneof" json:"region_id,omitempty"`
	Concurrency   *uint32                `protobuf:"varint,5,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	Prefetch      *uint32                `protobuf:"varint,6,opt,name=prefetch,proto3,oneof" json:"prefetch,omitempty"`
	StepId        *uint32                `protobuf:"varint,7,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerUpdateRequest) Reset() {
	*x = WorkerUpdateRequest{}
	mi := &file_taskqueue_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerUpdateRequest) ProtoMessage() {}

func (x *WorkerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerUpdateRequest.ProtoReflect.Descriptor instead.
func (*WorkerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{25}
}

func (x *WorkerUpdateRequest) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetProviderId() uint32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetFlavorId() uint32 {
	if x != nil && x.FlavorId != nil {
		return *x.FlavorId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetRegionId() uint32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetConcurrency() uint32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *WorkerUpdateRequest) GetPrefetch() uint32 {
	if x != nil && x.Prefetch != nil {
		return *x.Prefetch
	}
	return 0
}

func (x *WorkerUpdateRequest) GetStepId() uint32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

type ListFlavorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         uint32                 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter        string                 `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFlavorsRequest) Reset() {
	*x = ListFlavorsRequest{}
	mi := &file_taskqueue_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlavorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlavorsRequest) ProtoMessage() {}

func (x *ListFlavorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlavorsRequest.ProtoReflect.Descriptor instead.
func (*ListFlavorsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{26}
}

func (x *ListFlavorsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFlavorsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type Flavor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields from the "flavor" table
	FlavorId      uint32  `protobuf:"varint,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`                   // PRIMARY KEY
	FlavorName    string  `protobuf:"bytes,2,opt,name=flavor_name,json=flavorName,proto3" json:"flavor_name,omitempty"`              // Name of the flavor
	ProviderId    uint32  `protobuf:"varint,3,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`             // Foreign key to provider table
	Provider      string  `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`                                    // Name of the provider (provider_name.config_name)
	Cpu           int32   `protobuf:"varint,5,opt,name=cpu,proto3" json:"cpu,omitempty"`                                             // Number of CPU cores
	Mem           float32 `protobuf:"fixed32,6,opt,name=mem,proto3" json:"mem,omitempty"`                                            // Memory in GB (or as needed)
	Disk          float32 `protobuf:"fixed32,7,opt,name=disk,proto3" json:"disk,omitempty"`                                          // Disk size in GB (or as needed)
	Bandwidth     int32   `protobuf:"varint,8,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`                                 // Bandwidth (if applicable)
	Gpu           string  `protobuf:"bytes,9,opt,name=gpu,proto3" json:"gpu,omitempty"`                                              // GPU description
	Gpumem        int32   `protobuf:"varint,10,opt,name=gpumem,proto3" json:"gpumem,omitempty"`                                      // GPU memory (in GB, for example)
	HasGpu        bool    `protobuf:"varint,11,opt,name=has_gpu,json=hasGpu,proto3" json:"has_gpu,omitempty"`                        // Whether a GPU is present
	HasQuickDisks bool    `protobuf:"varint,12,opt,name=has_quick_disks,json=hasQuickDisks,proto3" json:"has_quick_disks,omitempty"` // Whether quick disks are supported
	// Fields from the "flavor_region" table
	RegionId      uint32  `protobuf:"varint,13,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"` // Foreign key to region table
	Region        string  `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`                      // (Optional) Region name
	Eviction      float32 `protobuf:"fixed32,15,opt,name=eviction,proto3" json:"eviction,omitempty"`                // Eviction rate value
	Cost          float32 `protobuf:"fixed32,16,opt,name=cost,proto3" json:"cost,omitempty"`                        // Cost value
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flavor) Reset() {
	*x = Flavor{}
	mi := &file_taskqueue_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavor) ProtoMessage() {}

func (x *Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavor.ProtoReflect.Descriptor instead.
func (*Flavor) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{27}
}

func (x *Flavor) GetFlavorId() uint32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *Flavor) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *Flavor) GetProviderId() uint32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *Flavor) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Flavor) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Flavor) GetMem() float32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Flavor) GetDisk() float32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *Flavor) GetBandwidth() int32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Flavor) GetGpu() string {
	if x != nil {
		return x.Gpu
	}
	return ""
}

func (x *Flavor) GetGpumem() int32 {
	if x != nil {
		return x.Gpumem
	}
	return 0
}

func (x *Flavor) GetHasGpu() bool {
	if x != nil {
		return x.HasGpu
	}
	return false
}

func (x *Flavor) GetHasQuickDisks() bool {
	if x != nil {
		return x.HasQuickDisks
	}
	return false
}

func (x *Flavor) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Flavor) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Flavor) GetEviction() float32 {
	if x != nil {
		return x.Eviction
	}
	return 0
}

func (x *Flavor) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type FlavorsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flavors       []*Flavor              `protobuf:"bytes,1,rep,name=flavors,proto3" json:"flavors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlavorsList) Reset() {
	*x = FlavorsList{}
	mi := &file_taskqueue_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlavorsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavorsList) ProtoMessage() {}

func (x *FlavorsList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavorsList.ProtoReflect.Descriptor instead.
func (*FlavorsList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{28}
}

func (x *FlavorsList) GetFlavors() []*Flavor {
	if x != nil {
		return x.Flavors
	}
	return nil
}

type ListJobsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJobsRequest) Reset() {
	*x = ListJobsRequest{}
	mi := &file_taskqueue_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsRequest) ProtoMessage() {}

func (x *ListJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsRequest.ProtoReflect.Descriptor instead.
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{29}
}

type Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         uint32                 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	FlavorId      uint32                 `protobuf:"varint,3,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	Retry         uint32                 `protobuf:"varint,4,opt,name=retry,proto3" json:"retry,omitempty"`
	WorkerId      uint32                 `protobuf:"varint,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Action        string                 `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt    string                 `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	Progression   uint32                 `protobuf:"varint,9,opt,name=progression,proto3" json:"progression,omitempty"`
	Log           string                 `protobuf:"bytes,10,opt,name=log,proto3" json:"log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_taskqueue_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{30}
}

func (x *Job) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *Job) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Job) GetFlavorId() uint32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *Job) GetRetry() uint32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *Job) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Job) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Job) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Job) GetModifiedAt() string {
	if x != nil {
		return x.ModifiedAt
	}
	return ""
}

func (x *Job) GetProgression() uint32 {
	if x != nil {
		return x.Progression
	}
	return 0
}

func (x *Job) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type JobsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jobs          []*Job                 `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobsList) Reset() {
	*x = JobsList{}
	mi := &file_taskqueue_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobsList) ProtoMessage() {}

func (x *JobsList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobsList.ProtoReflect.Descriptor instead.
func (*JobsList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{31}
}

func (x *JobsList) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type RcloneConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        string                 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RcloneConfig) Reset() {
	*x = RcloneConfig{}
	mi := &file_taskqueue_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RcloneConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcloneConfig) ProtoMessage() {}

func (x *RcloneConfig) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcloneConfig.ProtoReflect.Descriptor instead.
func (*RcloneConfig) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{32}
}

func (x *RcloneConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_taskqueue_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{33}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_taskqueue_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{34}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_taskqueue_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{35}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	IsAdmin       bool                   `protobuf:"varint,4,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_taskqueue_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{36}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type UserId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserId) Reset() {
	*x = UserId{}
	mi := &file_taskqueue_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{37}
}

func (x *UserId) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Email         *string                `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
	IsAdmin       *bool                  `protobuf:"varint,4,opt,name=is_admin,json=isAdmin,proto3,oneof" json:"is_admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_taskqueue_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{38}
}

func (x *User) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *User) GetIsAdmin() bool {
	if x != nil && x.IsAdmin != nil {
		return *x.IsAdmin
	}
	return false
}

type UsersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*User                `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsersList) Reset() {
	*x = UsersList{}
	mi := &file_taskqueue_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersList) ProtoMessage() {}

func (x *UsersList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersList.ProtoReflect.Descriptor instead.
func (*UsersList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{39}
}

func (x *UsersList) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	OldPassword   string                 `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword   string                 `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	mi := &file_taskqueue_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{40}
}

func (x *ChangePasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChangePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type RecruiterFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        *uint32                `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterFilter) Reset() {
	*x = RecruiterFilter{}
	mi := &file_taskqueue_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterFilter) ProtoMessage() {}

func (x *RecruiterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterFilter.ProtoReflect.Descriptor instead.
func (*RecruiterFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{41}
}

func (x *RecruiterFilter) GetStepId() uint32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

type RecruiterId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank          uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterId) Reset() {
	*x = RecruiterId{}
	mi := &file_taskqueue_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterId) ProtoMessage() {}

func (x *RecruiterId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterId.ProtoReflect.Descriptor instead.
func (*RecruiterId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{42}
}

func (x *RecruiterId) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *RecruiterId) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type Recruiter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank          uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Protofilter   string                 `protobuf:"bytes,3,opt,name=protofilter,proto3" json:"protofilter,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,4,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      uint32                 `protobuf:"varint,5,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	MaxWorkers    *uint32                `protobuf:"varint,6,opt,name=max_workers,json=maxWorkers,proto3,oneof" json:"max_workers,omitempty"`
	Rounds        uint32                 `protobuf:"varint,7,opt,name=rounds,proto3" json:"rounds,omitempty"`
	Timeout       uint32                 `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recruiter) Reset() {
	*x = Recruiter{}
	mi := &file_taskqueue_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recruiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recruiter) ProtoMessage() {}

func (x *Recruiter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recruiter.ProtoReflect.Descriptor instead.
func (*Recruiter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{43}
}

func (x *Recruiter) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *Recruiter) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Recruiter) GetProtofilter() string {
	if x != nil {
		return x.Protofilter
	}
	return ""
}

func (x *Recruiter) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Recruiter) GetPrefetch() uint32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *Recruiter) GetMaxWorkers() uint32 {
	if x != nil && x.MaxWorkers != nil {
		return *x.MaxWorkers
	}
	return 0
}

func (x *Recruiter) GetRounds() uint32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

func (x *Recruiter) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type RecruiterUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank          uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Protofilter   *string                `protobuf:"bytes,3,opt,name=protofilter,proto3,oneof" json:"protofilter,omitempty"`
	Concurrency   *uint32                `protobuf:"varint,4,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	Prefetch      *uint32                `protobuf:"varint,5,opt,name=prefetch,proto3,oneof" json:"prefetch,omitempty"`
	MaxWorkers    *uint32                `protobuf:"varint,6,opt,name=max_workers,json=maxWorkers,proto3,oneof" json:"max_workers,omitempty"`
	Rounds        *uint32                `protobuf:"varint,7,opt,name=rounds,proto3,oneof" json:"rounds,omitempty"`
	Timeout       *uint32                `protobuf:"varint,8,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterUpdate) Reset() {
	*x = RecruiterUpdate{}
	mi := &file_taskqueue_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterUpdate) ProtoMessage() {}

func (x *RecruiterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterUpdate.ProtoReflect.Descriptor instead.
func (*RecruiterUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{44}
}

func (x *RecruiterUpdate) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *RecruiterUpdate) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RecruiterUpdate) GetProtofilter() string {
	if x != nil && x.Protofilter != nil {
		return *x.Protofilter
	}
	return ""
}

func (x *RecruiterUpdate) GetConcurrency() uint32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *RecruiterUpdate) GetPrefetch() uint32 {
	if x != nil && x.Prefetch != nil {
		return *x.Prefetch
	}
	return 0
}

func (x *RecruiterUpdate) GetMaxWorkers() uint32 {
	if x != nil && x.MaxWorkers != nil {
		return *x.MaxWorkers
	}
	return 0
}

func (x *RecruiterUpdate) GetRounds() uint32 {
	if x != nil && x.Rounds != nil {
		return *x.Rounds
	}
	return 0
}

func (x *RecruiterUpdate) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type RecruiterList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recruiters    []*Recruiter           `protobuf:"bytes,1,rep,name=recruiters,proto3" json:"recruiters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterList) Reset() {
	*x = RecruiterList{}
	mi := &file_taskqueue_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterList) ProtoMessage() {}

func (x *RecruiterList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterList.ProtoReflect.Descriptor instead.
func (*RecruiterList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{45}
}

func (x *RecruiterList) GetRecruiters() []*Recruiter {
	if x != nil {
		return x.Recruiters
	}
	return nil
}

type WorkflowFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameLike      *string                `protobuf:"bytes,1,opt,name=name_like,json=nameLike,proto3,oneof" json:"name_like,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowFilter) Reset() {
	*x = WorkflowFilter{}
	mi := &file_taskqueue_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowFilter) ProtoMessage() {}

func (x *WorkflowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowFilter.ProtoReflect.Descriptor instead.
func (*WorkflowFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{46}
}

func (x *WorkflowFilter) GetNameLike() string {
	if x != nil && x.NameLike != nil {
		return *x.NameLike
	}
	return ""
}

type WorkflowId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    uint32                 `protobuf:"varint,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowId) Reset() {
	*x = WorkflowId{}
	mi := &file_taskqueue_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowId) ProtoMessage() {}

func (x *WorkflowId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowId.ProtoReflect.Descriptor instead.
func (*WorkflowId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{47}
}

func (x *WorkflowId) GetWorkflowId() uint32 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

type Workflow struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId     uint32                 `protobuf:"varint,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunStrategy    string                 `protobuf:"bytes,4,opt,name=run_strategy,json=runStrategy,proto3" json:"run_strategy,omitempty"`
	MaximumWorkers *uint32                `protobuf:"varint,5,opt,name=maximum_workers,json=maximumWorkers,proto3,oneof" json:"maximum_workers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_taskqueue_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{48}
}

func (x *Workflow) GetWorkflowId() uint32 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetRunStrategy() string {
	if x != nil {
		return x.RunStrategy
	}
	return ""
}

func (x *Workflow) GetMaximumWorkers() uint32 {
	if x != nil && x.MaximumWorkers != nil {
		return *x.MaximumWorkers
	}
	return 0
}

type WorkflowRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RunStrategy    *string                `protobuf:"bytes,2,opt,name=run_strategy,json=runStrategy,proto3,oneof" json:"run_strategy,omitempty"`
	MaximumWorkers *uint32                `protobuf:"varint,3,opt,name=maximum_workers,json=maximumWorkers,proto3,oneof" json:"maximum_workers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkflowRequest) Reset() {
	*x = WorkflowRequest{}
	mi := &file_taskqueue_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRequest) ProtoMessage() {}

func (x *WorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRequest.ProtoReflect.Descriptor instead.
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{49}
}

func (x *WorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowRequest) GetRunStrategy() string {
	if x != nil && x.RunStrategy != nil {
		return *x.RunStrategy
	}
	return ""
}

func (x *WorkflowRequest) GetMaximumWorkers() uint32 {
	if x != nil && x.MaximumWorkers != nil {
		return *x.MaximumWorkers
	}
	return 0
}

type WorkflowList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workflows     []*Workflow            `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowList) Reset() {
	*x = WorkflowList{}
	mi := &file_taskqueue_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowList) ProtoMessage() {}

func (x *WorkflowList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowList.ProtoReflect.Descriptor instead.
func (*WorkflowList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{50}
}

func (x *WorkflowList) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

type StepId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepId) Reset() {
	*x = StepId{}
	mi := &file_taskqueue_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepId) ProtoMessage() {}

func (x *StepId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepId.ProtoReflect.Descriptor instead.
func (*StepId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{51}
}

func (x *StepId) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

type Step struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	WorkflowName  string                 `protobuf:"bytes,2,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	WorkflowId    uint32                 `protobuf:"varint,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Step) Reset() {
	*x = Step{}
	mi := &file_taskqueue_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{52}
}

func (x *Step) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *Step) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *Step) GetWorkflowId() uint32 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

func (x *Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowName  *string                `protobuf:"bytes,1,opt,name=workflow_name,json=workflowName,proto3,oneof" json:"workflow_name,omitempty"`
	WorkflowId    *uint32                `protobuf:"varint,2,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepRequest) Reset() {
	*x = StepRequest{}
	mi := &file_taskqueue_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRequest) ProtoMessage() {}

func (x *StepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRequest.ProtoReflect.Descriptor instead.
func (*StepRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{53}
}

func (x *StepRequest) GetWorkflowName() string {
	if x != nil && x.WorkflowName != nil {
		return *x.WorkflowName
	}
	return ""
}

func (x *StepRequest) GetWorkflowId() uint32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *StepRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StepList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steps         []*Step                `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepList) Reset() {
	*x = StepList{}
	mi := &file_taskqueue_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepList) ProtoMessage() {}

func (x *StepList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepList.ProtoReflect.Descriptor instead.
func (*StepList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{54}
}

func (x *StepList) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type WorkerStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CpuUsagePercent float32                `protobuf:"fixed32,1,opt,name=cpu_usage_percent,json=cpuUsagePercent,proto3" json:"cpu_usage_percent,omitempty"` // 0-100, float
	MemUsagePercent float32                `protobuf:"fixed32,2,opt,name=mem_usage_percent,json=memUsagePercent,proto3" json:"mem_usage_percent,omitempty"` // 0-100, float
	Load_1Min       float32                `protobuf:"fixed32,3,opt,name=load_1min,json=load1min,proto3" json:"load_1min,omitempty"`                        // e.g., 0.58, float
	IowaitPercent   float32                `protobuf:"fixed32,4,opt,name=iowait_percent,json=iowaitPercent,proto3" json:"iowait_percent,omitempty"`         // 0-100 float
	Disks           []*DiskUsage           `protobuf:"bytes,5,rep,name=disks,proto3" json:"disks,omitempty"`                                                // Per-disk usage
	DiskIo          *DiskIOStats           `protobuf:"bytes,6,opt,name=disk_io,json=diskIo,proto3" json:"disk_io,omitempty"`                                // Global disk IO (aggregated)
	NetIo           *NetIOStats            `protobuf:"bytes,7,opt,name=net_io,json=netIo,proto3" json:"net_io,omitempty"`                                   // Global network IO (aggregated)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorkerStats) Reset() {
	*x = WorkerStats{}
	mi := &file_taskqueue_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStats) ProtoMessage() {}

func (x *WorkerStats) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStats.ProtoReflect.Descriptor instead.
func (*WorkerStats) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{55}
}

func (x *WorkerStats) GetCpuUsagePercent() float32 {
	if x != nil {
		return x.CpuUsagePercent
	}
	return 0
}

func (x *WorkerStats) GetMemUsagePercent() float32 {
	if x != nil {
		return x.MemUsagePercent
	}
	return 0
}

func (x *WorkerStats) GetLoad_1Min() float32 {
	if x != nil {
		return x.Load_1Min
	}
	return 0
}

func (x *WorkerStats) GetIowaitPercent() float32 {
	if x != nil {
		return x.IowaitPercent
	}
	return 0
}

func (x *WorkerStats) GetDisks() []*DiskUsage {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *WorkerStats) GetDiskIo() *DiskIOStats {
	if x != nil {
		return x.DiskIo
	}
	return nil
}

func (x *WorkerStats) GetNetIo() *NetIOStats {
	if x != nil {
		return x.NetIo
	}
	return nil
}

type DiskUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceName    string                 `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`         // E.g., "/dev/sda1"
	UsagePercent  float32                `protobuf:"fixed32,2,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"` // 0-100, float
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskUsage) Reset() {
	*x = DiskUsage{}
	mi := &file_taskqueue_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskUsage) ProtoMessage() {}

func (x *DiskUsage) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskUsage.ProtoReflect.Descriptor instead.
func (*DiskUsage) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{56}
}

func (x *DiskUsage) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DiskUsage) GetUsagePercent() float32 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

type DiskIOStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReadBytesTotal  int64                  `protobuf:"varint,1,opt,name=read_bytes_total,json=readBytesTotal,proto3" json:"read_bytes_total,omitempty"`    // Total bytes read
	WriteBytesTotal int64                  `protobuf:"varint,2,opt,name=write_bytes_total,json=writeBytesTotal,proto3" json:"write_bytes_total,omitempty"` // Total bytes written
	ReadBytesRate   float32                `protobuf:"fixed32,3,opt,name=read_bytes_rate,json=readBytesRate,proto3" json:"read_bytes_rate,omitempty"`      // Bytes per second
	WriteBytesRate  float32                `protobuf:"fixed32,4,opt,name=write_bytes_rate,json=writeBytesRate,proto3" json:"write_bytes_rate,omitempty"`   // Bytes per second
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DiskIOStats) Reset() {
	*x = DiskIOStats{}
	mi := &file_taskqueue_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskIOStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskIOStats) ProtoMessage() {}

func (x *DiskIOStats) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskIOStats.ProtoReflect.Descriptor instead.
func (*DiskIOStats) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{57}
}

func (x *DiskIOStats) GetReadBytesTotal() int64 {
	if x != nil {
		return x.ReadBytesTotal
	}
	return 0
}

func (x *DiskIOStats) GetWriteBytesTotal() int64 {
	if x != nil {
		return x.WriteBytesTotal
	}
	return 0
}

func (x *DiskIOStats) GetReadBytesRate() float32 {
	if x != nil {
		return x.ReadBytesRate
	}
	return 0
}

func (x *DiskIOStats) GetWriteBytesRate() float32 {
	if x != nil {
		return x.WriteBytesRate
	}
	return 0
}

type NetIOStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecvBytesTotal int64                  `protobuf:"varint,1,opt,name=recv_bytes_total,json=recvBytesTotal,proto3" json:"recv_bytes_total,omitempty"` // Total bytes received
	SentBytesTotal int64                  `protobuf:"varint,2,opt,name=sent_bytes_total,json=sentBytesTotal,proto3" json:"sent_bytes_total,omitempty"` // Total bytes sent
	RecvBytesRate  float32                `protobuf:"fixed32,3,opt,name=recv_bytes_rate,json=recvBytesRate,proto3" json:"recv_bytes_rate,omitempty"`   // Bytes per second
	SentBytesRate  float32                `protobuf:"fixed32,4,opt,name=sent_bytes_rate,json=sentBytesRate,proto3" json:"sent_bytes_rate,omitempty"`   // Bytes per second
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetIOStats) Reset() {
	*x = NetIOStats{}
	mi := &file_taskqueue_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetIOStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetIOStats) ProtoMessage() {}

func (x *NetIOStats) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetIOStats.ProtoReflect.Descriptor instead.
func (*NetIOStats) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{58}
}

func (x *NetIOStats) GetRecvBytesTotal() int64 {
	if x != nil {
		return x.RecvBytesTotal
	}
	return 0
}

func (x *NetIOStats) GetSentBytesTotal() int64 {
	if x != nil {
		return x.SentBytesTotal
	}
	return 0
}

func (x *NetIOStats) GetRecvBytesRate() float32 {
	if x != nil {
		return x.RecvBytesRate
	}
	return 0
}

func (x *NetIOStats) GetSentBytesRate() float32 {
	if x != nil {
		return x.SentBytesRate
	}
	return 0
}

type GetWorkerStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerIds     []uint32               `protobuf:"varint,1,rep,packed,name=worker_ids,json=workerIds,proto3" json:"worker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkerStatsRequest) Reset() {
	*x = GetWorkerStatsRequest{}
	mi := &file_taskqueue_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerStatsRequest) ProtoMessage() {}

func (x *GetWorkerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerStatsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkerStatsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{59}
}

func (x *GetWorkerStatsRequest) GetWorkerIds() []uint32 {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

type GetWorkerStatsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	WorkerStats   map[uint32]*WorkerStats `protobuf:"bytes,1,rep,name=worker_stats,json=workerStats,proto3" json:"worker_stats,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkerStatsResponse) Reset() {
	*x = GetWorkerStatsResponse{}
	mi := &file_taskqueue_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerStatsResponse) ProtoMessage() {}

func (x *GetWorkerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerStatsResponse.ProtoReflect.Descriptor instead.
func (*GetWorkerStatsResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{60}
}

func (x *GetWorkerStatsResponse) GetWorkerStats() map[uint32]*WorkerStats {
	if x != nil {
		return x.WorkerStats
	}
	return nil
}

var File_taskqueue_proto protoreflect.FileDescriptor

const file_taskqueue_proto_rawDesc = "" +
	"\n" +
	"\x0ftaskqueue.proto\x12\ttaskqueue\x1a\x1bgoogle/protobuf/empty.proto\"'\n" +
	"\fTaskResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\"W\n" +
	"\n" +
	"WorkerInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12%\n" +
	"\vconcurrency\x18\x02 \x01(\rH\x00R\vconcurrency\x88\x01\x01B\x0e\n" +
	"\f_concurrency\"\x99\x05\n" +
	"\vTaskRequest\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x19\n" +
	"\x05shell\x18\x02 \x01(\tH\x00R\x05shell\x88\x01\x01\x12\x1c\n" +
	"\tcontainer\x18\x03 \x01(\tR\tcontainer\x120\n" +
	"\x11container_options\x18\x04 \x01(\tH\x01R\x10containerOptions\x88\x01\x01\x12\x1c\n" +
	"\astep_id\x18\x05 \x01(\rH\x02R\x06stepId\x88\x01\x01\x12\x14\n" +
	"\x05input\x18\x06 \x03(\tR\x05input\x12\x1a\n" +
	"\bresource\x18\a \x03(\tR\bresource\x12\x1b\n" +
	"\x06output\x18\b \x01(\tH\x03R\x06output\x88\x01\x01\x12\x19\n" +
	"\x05retry\x18\t \x01(\rH\x04R\x05retry\x88\x01\x01\x12\x1e\n" +
	"\bis_final\x18\n" +
	" \x01(\bH\x05R\aisFinal\x88\x01\x01\x12\"\n" +
	"\n" +
	"uses_cache\x18\v \x01(\bH\x06R\tusesCache\x88\x01\x01\x12.\n" +
	"\x10download_timeout\x18\f \x01(\x02H\aR\x0fdownloadTimeout\x88\x01\x01\x12,\n" +
	"\x0frunning_timeout\x18\r \x01(\x02H\bR\x0erunningTimeout\x88\x01\x01\x12*\n" +
	"\x0eupload_timeout\x18\x0e \x01(\x02H\tR\ruploadTimeout\x88\x01\x01\x12\x16\n" +
	"\x06status\x18\x0f \x01(\tR\x06statusB\b\n" +
	"\x06_shellB\x14\n" +
	"\x12_container_optionsB\n" +
	"\n" +
	"\b_step_idB\t\n" +
	"\a_outputB\b\n" +
	"\x06_retryB\v\n" +
	"\t_is_finalB\r\n" +
	"\v_uses_cacheB\x13\n" +
	"\x11_download_timeoutB\x12\n" +
	"\x10_running_timeoutB\x11\n" +
	"\x0f_upload_timeout\"\xab\x05\n" +
	"\x04Task\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\x12\x19\n" +
	"\x05shell\x18\x03 \x01(\tH\x00R\x05shell\x88\x01\x01\x12\x1c\n" +
	"\tcontainer\x18\x04 \x01(\tR\tcontainer\x120\n" +
	"\x11container_options\x18\x05 \x01(\tH\x01R\x10containerOptions\x88\x01\x01\x12\x1c\n" +
	"\astep_id\x18\x06 \x01(\rH\x02R\x06stepId\x88\x01\x01\x12\x14\n" +
	"\x05input\x18\a \x03(\tR\x05input\x12\x1a\n" +
	"\bresource\x18\b \x03(\tR\bresource\x12\x1b\n" +
	"\x06output\x18\t \x01(\tH\x03R\x06output\x88\x01\x01\x12\x19\n" +
	"\x05retry\x18\n" +
	" \x01(\rH\x04R\x05retry\x88\x01\x01\x12\x1e\n" +
	"\bis_final\x18\v \x01(\bH\x05R\aisFinal\x88\x01\x01\x12\"\n" +
	"\n" +
	"uses_cache\x18\f \x01(\bH\x06R\tusesCache\x88\x01\x01\x12.\n" +
	"\x10download_timeout\x18\r \x01(\x02H\aR\x0fdownloadTimeout\x88\x01\x01\x12,\n" +
	"\x0frunning_timeout\x18\x0e \x01(\x02H\bR\x0erunningTimeout\x88\x01\x01\x12*\n" +
	"\x0eupload_timeout\x18\x0f \x01(\x02H\tR\ruploadTimeout\x88\x01\x01\x12\x16\n" +
	"\x06status\x18\x10 \x01(\tR\x06statusB\b\n" +
	"\x06_shellB\x14\n" +
	"\x12_container_optionsB\n" +
	"\n" +
	"\b_step_idB\t\n" +
	"\a_outputB\b\n" +
	"\x06_retryB\v\n" +
	"\t_is_finalB\r\n" +
	"\v_uses_cacheB\x13\n" +
	"\x11_download_timeoutB\x12\n" +
	"\x10_running_timeoutB\x11\n" +
	"\x0f_upload_timeout\"1\n" +
	"\bTaskList\x12%\n" +
	"\x05tasks\x18\x01 \x03(\v2\x0f.taskqueue.TaskR\x05tasks\"\x83\x02\n" +
	"\x06Worker\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vconcurrency\x18\x03 \x01(\rR\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\x04 \x01(\rR\bprefetch\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12\x12\n" +
	"\x04ipv4\x18\x06 \x01(\tR\x04ipv4\x12\x12\n" +
	"\x04ipv6\x18\a \x01(\tR\x04ipv6\x12\x16\n" +
	"\x06flavor\x18\b \x01(\tR\x06flavor\x12\x1a\n" +
	"\bprovider\x18\t \x01(\tR\bprovider\x12\x16\n" +
	"\x06region\x18\n" +
	" \x01(\tR\x06region\":\n" +
	"\vWorkersList\x12+\n" +
	"\aworkers\x18\x01 \x03(\v2\x11.taskqueue.WorkerR\aworkers\"\x14\n" +
	"\x12ListWorkersRequest\"$\n" +
	"\n" +
	"TaskUpdate\x12\x16\n" +
	"\x06weight\x18\x01 \x01(\x01R\x06weight\"\xa5\x01\n" +
	"\x0eTaskUpdateList\x12@\n" +
	"\aupdates\x18\x01 \x03(\v2&.taskqueue.TaskUpdateList.UpdatesEntryR\aupdates\x1aQ\n" +
	"\fUpdatesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.taskqueue.TaskUpdateR\x05value:\x028\x01\"\xb3\x01\n" +
	"\x10TaskListAndOther\x12%\n" +
	"\x05tasks\x18\x01 \x03(\v2\x0f.taskqueue.TaskR\x05tasks\x12 \n" +
	"\vconcurrency\x18\x02 \x01(\rR\vconcurrency\x123\n" +
	"\aupdates\x18\x03 \x01(\v2\x19.taskqueue.TaskUpdateListR\aupdates\x12!\n" +
	"\factive_tasks\x18\x04 \x03(\rR\vactiveTasks\"J\n" +
	"\x10TaskStatusUpdate\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12\x1d\n" +
	"\n" +
	"new_status\x18\x02 \x01(\tR\tnewStatus\"X\n" +
	"\aTaskLog\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12\x19\n" +
	"\blog_type\x18\x02 \x01(\tR\alogType\x12\x19\n" +
	"\blog_text\x18\x03 \x01(\tR\alogText\"!\n" +
	"\x06TaskId\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\"'\n" +
	"\bWorkerId\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\"4\n" +
	"\x13WorkerStatusRequest\x12\x1d\n" +
	"\n" +
	"worker_ids\x18\x01 \x03(\rR\tworkerIds\"C\n" +
	"\fWorkerStatus\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\"K\n" +
	"\x14WorkerStatusResponse\x123\n" +
	"\bstatuses\x18\x01 \x03(\v2\x17.taskqueue.WorkerStatusR\bstatuses\"M\n" +
	"\rWorkerDetails\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\x12\x1f\n" +
	"\vworker_name\x18\x02 \x01(\tR\n" +
	"workerName\"N\n" +
	"\tWorkerIds\x12A\n" +
	"\x0fworkers_details\x18\x01 \x03(\v2\x18.taskqueue.WorkerDetailsR\x0eworkersDetails\"\x1e\n" +
	"\x05JobId\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\rR\x05jobId\"f\n" +
	"\x19PingAndGetNewTasksRequest\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\x12,\n" +
	"\x05stats\x18\x02 \x01(\v2\x16.taskqueue.WorkerStatsR\x05stats\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"N\n" +
	"\x10ListTasksRequest\x12(\n" +
	"\rstatus_filter\x18\x01 \x01(\tH\x00R\fstatusFilter\x88\x01\x01B\x10\n" +
	"\x0e_status_filter\"\xea\x01\n" +
	"\rWorkerRequest\x12\x1f\n" +
	"\vprovider_id\x18\x01 \x01(\rR\n" +
	"providerId\x12\x1b\n" +
	"\tflavor_id\x18\x02 \x01(\rR\bflavorId\x12\x1b\n" +
	"\tregion_id\x18\x03 \x01(\rR\bregionId\x12\x16\n" +
	"\x06number\x18\x04 \x01(\rR\x06number\x12 \n" +
	"\vconcurrency\x18\x05 \x01(\rR\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\x06 \x01(\rR\bprefetch\x12\x1c\n" +
	"\astep_id\x18\a \x01(\rH\x00R\x06stepId\x88\x01\x01B\n" +
	"\n" +
	"\b_step_id\"\xd7\x02\n" +
	"\x13WorkerUpdateRequest\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\x12$\n" +
	"\vprovider_id\x18\x02 \x01(\rH\x00R\n" +
	"providerId\x88\x01\x01\x12 \n" +
	"\tflavor_id\x18\x03 \x01(\rH\x01R\bflavorId\x88\x01\x01\x12 \n" +
	"\tregion_id\x18\x04 \x01(\rH\x02R\bregionId\x88\x01\x01\x12%\n" +
	"\vconcurrency\x18\x05 \x01(\rH\x03R\vconcurrency\x88\x01\x01\x12\x1f\n" +
	"\bprefetch\x18\x06 \x01(\rH\x04R\bprefetch\x88\x01\x01\x12\x1c\n" +
	"\astep_id\x18\a \x01(\rH\x05R\x06stepId\x88\x01\x01B\x0e\n" +
	"\f_provider_idB\f\n" +
	"\n" +
	"_flavor_idB\f\n" +
	"\n" +
	"_region_idB\x0e\n" +
	"\f_concurrencyB\v\n" +
	"\t_prefetchB\n" +
	"\n" +
	"\b_step_id\"B\n" +
	"\x12ListFlavorsRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\rR\x05limit\x12\x16\n" +
	"\x06filter\x18\x02 \x01(\tR\x06filter\"\xa9\x03\n" +
	"\x06Flavor\x12\x1b\n" +
	"\tflavor_id\x18\x01 \x01(\rR\bflavorId\x12\x1f\n" +
	"\vflavor_name\x18\x02 \x01(\tR\n" +
	"flavorName\x12\x1f\n" +
	"\vprovider_id\x18\x03 \x01(\rR\n" +
	"providerId\x12\x1a\n" +
	"\bprovider\x18\x04 \x01(\tR\bprovider\x12\x10\n" +
	"\x03cpu\x18\x05 \x01(\x05R\x03cpu\x12\x10\n" +
	"\x03mem\x18\x06 \x01(\x02R\x03mem\x12\x12\n" +
	"\x04disk\x18\a \x01(\x02R\x04disk\x12\x1c\n" +
	"\tbandwidth\x18\b \x01(\x05R\tbandwidth\x12\x10\n" +
	"\x03gpu\x18\t \x01(\tR\x03gpu\x12\x16\n" +
	"\x06gpumem\x18\n" +
	" \x01(\x05R\x06gpumem\x12\x17\n" +
	"\ahas_gpu\x18\v \x01(\bR\x06hasGpu\x12&\n" +
	"\x0fhas_quick_disks\x18\f \x01(\bR\rhasQuickDisks\x12\x1b\n" +
	"\tregion_id\x18\r \x01(\rR\bregionId\x12\x16\n" +
	"\x06region\x18\x0e \x01(\tR\x06region\x12\x1a\n" +
	"\beviction\x18\x0f \x01(\x02R\beviction\x12\x12\n" +
	"\x04cost\x18\x10 \x01(\x02R\x04cost\":\n" +
	"\vFlavorsList\x12+\n" +
	"\aflavors\x18\x01 \x03(\v2\x11.taskqueue.FlavorR\aflavors\"\x11\n" +
	"\x0fListJobsRequest\"\x90\x02\n" +
	"\x03Job\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\rR\x05jobId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1b\n" +
	"\tflavor_id\x18\x03 \x01(\rR\bflavorId\x12\x14\n" +
	"\x05retry\x18\x04 \x01(\rR\x05retry\x12\x1b\n" +
	"\tworker_id\x18\x05 \x01(\rR\bworkerId\x12\x16\n" +
	"\x06action\x18\x06 \x01(\tR\x06action\x12\x1d\n" +
	"\n" +
	"created_at\x18\a \x01(\tR\tcreatedAt\x12\x1f\n" +
	"\vmodified_at\x18\b \x01(\tR\n" +
	"modifiedAt\x12 \n" +
	"\vprogression\x18\t \x01(\rR\vprogression\x12\x10\n" +
	"\x03log\x18\n" +
	" \x01(\tR\x03log\".\n" +
	"\bJobsList\x12\"\n" +
	"\x04jobs\x18\x01 \x03(\v2\x0e.taskqueue.JobR\x04jobs\"&\n" +
	"\fRcloneConfig\x12\x16\n" +
	"\x06config\x18\x01 \x01(\tR\x06config\"F\n" +
	"\fLoginRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"%\n" +
	"\rLoginResponse\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"\x1d\n" +
	"\x05Token\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"|\n" +
	"\x11CreateUserRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x19\n" +
	"\bis_admin\x18\x04 \x01(\bR\aisAdmin\"!\n" +
	"\x06UserId\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\rR\x06userId\"\x9f\x01\n" +
	"\x04User\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\rR\x06userId\x12\x1f\n" +
	"\busername\x18\x02 \x01(\tH\x00R\busername\x88\x01\x01\x12\x19\n" +
	"\x05email\x18\x03 \x01(\tH\x01R\x05email\x88\x01\x01\x12\x1e\n" +
	"\bis_admin\x18\x04 \x01(\bH\x02R\aisAdmin\x88\x01\x01B\v\n" +
	"\t_usernameB\b\n" +
	"\x06_emailB\v\n" +
	"\t_is_admin\"2\n" +
	"\tUsersList\x12%\n" +
	"\x05users\x18\x01 \x03(\v2\x0f.taskqueue.UserR\x05users\"y\n" +
	"\x15ChangePasswordRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12!\n" +
	"\fold_password\x18\x02 \x01(\tR\voldPassword\x12!\n" +
	"\fnew_password\x18\x03 \x01(\tR\vnewPassword\";\n" +
	"\x0fRecruiterFilter\x12\x1c\n" +
	"\astep_id\x18\x01 \x01(\rH\x00R\x06stepId\x88\x01\x01B\n" +
	"\n" +
	"\b_step_id\":\n" +
	"\vRecruiterId\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\rR\x04rank\"\x80\x02\n" +
	"\tRecruiter\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\rR\x04rank\x12 \n" +
	"\vprotofilter\x18\x03 \x01(\tR\vprotofilter\x12 \n" +
	"\vconcurrency\x18\x04 \x01(\rR\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\x05 \x01(\rR\bprefetch\x12$\n" +
	"\vmax_workers\x18\x06 \x01(\rH\x00R\n" +
	"maxWorkers\x88\x01\x01\x12\x16\n" +
	"\x06rounds\x18\a \x01(\rR\x06rounds\x12\x18\n" +
	"\atimeout\x18\b \x01(\rR\atimeoutB\x0e\n" +
	"\f_max_workers\"\xe3\x02\n" +
	"\x0fRecruiterUpdate\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\rR\x04rank\x12%\n" +
	"\vprotofilter\x18\x03 \x01(\tH\x00R\vprotofilter\x88\x01\x01\x12%\n" +
	"\vconcurrency\x18\x04 \x01(\rH\x01R\vconcurrency\x88\x01\x01\x12\x1f\n" +
	"\bprefetch\x18\x05 \x01(\rH\x02R\bprefetch\x88\x01\x01\x12$\n" +
	"\vmax_workers\x18\x06 \x01(\rH\x03R\n" +
	"maxWorkers\x88\x01\x01\x12\x1b\n" +
	"\x06rounds\x18\a \x01(\rH\x04R\x06rounds\x88\x01\x01\x12\x1d\n" +
	"\atimeout\x18\b \x01(\rH\x05R\atimeout\x88\x01\x01B\x0e\n" +
	"\f_protofilterB\x0e\n" +
	"\f_concurrencyB\v\n" +
	"\t_prefetchB\x0e\n" +
	"\f_max_workersB\t\n" +
	"\a_roundsB\n" +
	"\n" +
	"\b_timeout\"E\n" +
	"\rRecruiterList\x124\n" +
	"\n" +
	"recruiters\x18\x01 \x03(\v2\x14.taskqueue.RecruiterR\n" +
	"recruiters\"@\n" +
	"\x0eWorkflowFilter\x12 \n" +
	"\tname_like\x18\x01 \x01(\tH\x00R\bnameLike\x88\x01\x01B\f\n" +
	"\n" +
	"_name_like\"-\n" +
	"\n" +
	"WorkflowId\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\rR\n" +
	"workflowId\"\xa4\x01\n" +
	"\bWorkflow\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\rR\n" +
	"workflowId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\frun_strategy\x18\x04 \x01(\tR\vrunStrategy\x12,\n" +
	"\x0fmaximum_workers\x18\x05 \x01(\rH\x00R\x0emaximumWorkers\x88\x01\x01B\x12\n" +
	"\x10_maximum_workers\"\xa0\x01\n" +
	"\x0fWorkflowRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12&\n" +
	"\frun_strategy\x18\x02 \x01(\tH\x00R\vrunStrategy\x88\x01\x01\x12,\n" +
	"\x0fmaximum_workers\x18\x03 \x01(\rH\x01R\x0emaximumWorkers\x88\x01\x01B\x0f\n" +
	"\r_run_strategyB\x12\n" +
	"\x10_maximum_workers\"A\n" +
	"\fWorkflowList\x121\n" +
	"\tworkflows\x18\x01 \x03(\v2\x13.taskqueue.WorkflowR\tworkflows\"!\n" +
	"\x06StepId\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\"y\n" +
	"\x04Step\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\x12#\n" +
	"\rworkflow_name\x18\x02 \x01(\tR\fworkflowName\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\rR\n" +
	"workflowId\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\"\x93\x01\n" +
	"\vStepRequest\x12(\n" +
	"\rworkflow_name\x18\x01 \x01(\tH\x00R\fworkflowName\x88\x01\x01\x12$\n" +
	"\vworkflow_id\x18\x02 \x01(\rH\x01R\n" +
	"workflowId\x88\x01\x01\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04nameB\x10\n" +
	"\x0e_workflow_nameB\x0e\n" +
	"\f_workflow_id\"1\n" +
	"\bStepList\x12%\n" +
	"\x05steps\x18\x01 \x03(\v2\x0f.taskqueue.StepR\x05steps\"\xb4\x02\n" +
	"\vWorkerStats\x12*\n" +
	"\x11cpu_usage_percent\x18\x01 \x01(\x02R\x0fcpuUsagePercent\x12*\n" +
	"\x11mem_usage_percent\x18\x02 \x01(\x02R\x0fmemUsagePercent\x12\x1b\n" +
	"\tload_1min\x18\x03 \x01(\x02R\bload1min\x12%\n" +
	"\x0eiowait_percent\x18\x04 \x01(\x02R\riowaitPercent\x12*\n" +
	"\x05disks\x18\x05 \x03(\v2\x14.taskqueue.DiskUsageR\x05disks\x12/\n" +
	"\adisk_io\x18\x06 \x01(\v2\x16.taskqueue.DiskIOStatsR\x06diskIo\x12,\n" +
	"\x06net_io\x18\a \x01(\v2\x15.taskqueue.NetIOStatsR\x05netIo\"Q\n" +
	"\tDiskUsage\x12\x1f\n" +
	"\vdevice_name\x18\x01 \x01(\tR\n" +
	"deviceName\x12#\n" +
	"\rusage_percent\x18\x02 \x01(\x02R\fusagePercent\"\xb5\x01\n" +
	"\vDiskIOStats\x12(\n" +
	"\x10read_bytes_total\x18\x01 \x01(\x03R\x0ereadBytesTotal\x12*\n" +
	"\x11write_bytes_total\x18\x02 \x01(\x03R\x0fwriteBytesTotal\x12&\n" +
	"\x0fread_bytes_rate\x18\x03 \x01(\x02R\rreadBytesRate\x12(\n" +
	"\x10write_bytes_rate\x18\x04 \x01(\x02R\x0ewriteBytesRate\"\xb0\x01\n" +
	"\n" +
	"NetIOStats\x12(\n" +
	"\x10recv_bytes_total\x18\x01 \x01(\x03R\x0erecvBytesTotal\x12(\n" +
	"\x10sent_bytes_total\x18\x02 \x01(\x03R\x0esentBytesTotal\x12&\n" +
	"\x0frecv_bytes_rate\x18\x03 \x01(\x02R\rrecvBytesRate\x12&\n" +
	"\x0fsent_bytes_rate\x18\x04 \x01(\x02R\rsentBytesRate\"6\n" +
	"\x15GetWorkerStatsRequest\x12\x1d\n" +
	"\n" +
	"worker_ids\x18\x01 \x03(\rR\tworkerIds\"\xc7\x01\n" +
	"\x16GetWorkerStatsResponse\x12U\n" +
	"\fworker_stats\x18\x01 \x03(\v22.taskqueue.GetWorkerStatsResponse.WorkerStatsEntryR\vworkerStats\x1aV\n" +
	"\x10WorkerStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.taskqueue.WorkerStatsR\x05value:\x028\x012\x97\x11\n" +
	"\tTaskQueue\x12=\n" +
	"\n" +
	"SubmitTask\x12\x16.taskqueue.TaskRequest\x1a\x17.taskqueue.TaskResponse\x12<\n" +
	"\x0eRegisterWorker\x12\x15.taskqueue.WorkerInfo\x1a\x13.taskqueue.WorkerId\x12X\n" +
	"\x13PingAndTakeNewTasks\x12$.taskqueue.PingAndGetNewTasksRequest\x1a\x1b.taskqueue.TaskListAndOther\x12?\n" +
	"\x10UpdateTaskStatus\x12\x1b.taskqueue.TaskStatusUpdate\x1a\x0e.taskqueue.Ack\x124\n" +
	"\fSendTaskLogs\x12\x12.taskqueue.TaskLog\x1a\x0e.taskqueue.Ack(\x01\x129\n" +
	"\x0eStreamTaskLogs\x12\x11.taskqueue.TaskId\x1a\x12.taskqueue.TaskLog0\x01\x12=\n" +
	"\tListTasks\x12\x1b.taskqueue.ListTasksRequest\x1a\x13.taskqueue.TaskList\x12D\n" +
	"\vListWorkers\x12\x1d.taskqueue.ListWorkersRequest\x1a\x16.taskqueue.WorkersList\x12>\n" +
	"\fCreateWorker\x12\x18.taskqueue.WorkerRequest\x1a\x14.taskqueue.WorkerIds\x12=\n" +
	"\x12UpdateWorkerStatus\x12\x17.taskqueue.WorkerStatus\x1a\x0e.taskqueue.Ack\x123\n" +
	"\fDeleteWorker\x12\x13.taskqueue.WorkerId\x1a\x0e.taskqueue.Ack\x12>\n" +
	"\fUpdateWorker\x12\x1e.taskqueue.WorkerUpdateRequest\x1a\x0e.taskqueue.Ack\x12T\n" +
	"\x11GetWorkerStatuses\x12\x1e.taskqueue.WorkerStatusRequest\x1a\x1f.taskqueue.WorkerStatusResponse\x12;\n" +
	"\bListJobs\x12\x1a.taskqueue.ListJobsRequest\x1a\x13.taskqueue.JobsList\x12-\n" +
	"\tDeleteJob\x12\x10.taskqueue.JobId\x1a\x0e.taskqueue.Ack\x12D\n" +
	"\vListFlavors\x12\x1d.taskqueue.ListFlavorsRequest\x1a\x16.taskqueue.FlavorsList\x12B\n" +
	"\x0fGetRcloneConfig\x12\x16.google.protobuf.Empty\x1a\x17.taskqueue.RcloneConfig\x12:\n" +
	"\x05Login\x12\x17.taskqueue.LoginRequest\x1a\x18.taskqueue.LoginResponse\x12*\n" +
	"\x06Logout\x12\x10.taskqueue.Token\x1a\x0e.taskqueue.Ack\x12=\n" +
	"\n" +
	"CreateUser\x12\x1c.taskqueue.CreateUserRequest\x1a\x11.taskqueue.UserId\x129\n" +
	"\tListUsers\x12\x16.google.protobuf.Empty\x1a\x14.taskqueue.UsersList\x12/\n" +
	"\n" +
	"DeleteUser\x12\x11.taskqueue.UserId\x1a\x0e.taskqueue.Ack\x12-\n" +
	"\n" +
	"UpdateUser\x12\x0f.taskqueue.User\x1a\x0e.taskqueue.Ack\x12B\n" +
	"\x0eChangePassword\x12 .taskqueue.ChangePasswordRequest\x1a\x0e.taskqueue.Ack\x12F\n" +
	"\x0eListRecruiters\x12\x1a.taskqueue.RecruiterFilter\x1a\x18.taskqueue.RecruiterList\x127\n" +
	"\x0fCreateRecruiter\x12\x14.taskqueue.Recruiter\x1a\x0e.taskqueue.Ack\x12=\n" +
	"\x0fUpdateRecruiter\x12\x1a.taskqueue.RecruiterUpdate\x1a\x0e.taskqueue.Ack\x129\n" +
	"\x0fDeleteRecruiter\x12\x16.taskqueue.RecruiterId\x1a\x0e.taskqueue.Ack\x12C\n" +
	"\rListWorkflows\x12\x19.taskqueue.WorkflowFilter\x1a\x17.taskqueue.WorkflowList\x12C\n" +
	"\x0eCreateWorkflow\x12\x1a.taskqueue.WorkflowRequest\x1a\x15.taskqueue.WorkflowId\x127\n" +
	"\x0eDeleteWorkflow\x12\x15.taskqueue.WorkflowId\x1a\x0e.taskqueue.Ack\x127\n" +
	"\tListSteps\x12\x15.taskqueue.WorkflowId\x1a\x13.taskqueue.StepList\x127\n" +
	"\n" +
	"CreateStep\x12\x16.taskqueue.StepRequest\x1a\x11.taskqueue.StepId\x12/\n" +
	"\n" +
	"DeleteStep\x12\x11.taskqueue.StepId\x1a\x0e.taskqueue.Ack\x12U\n" +
	"\x0eGetWorkerStats\x12 .taskqueue.GetWorkerStatsRequest\x1a!.taskqueue.GetWorkerStatsResponseB\x11Z\x0fgen/taskqueuepbb\x06proto3"

var (
	file_taskqueue_proto_rawDescOnce sync.Once
	file_taskqueue_proto_rawDescData []byte
)

func file_taskqueue_proto_rawDescGZIP() []byte {
	file_taskqueue_proto_rawDescOnce.Do(func() {
		file_taskqueue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_taskqueue_proto_rawDesc), len(file_taskqueue_proto_rawDesc)))
	})
	return file_taskqueue_proto_rawDescData
}

var file_taskqueue_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_taskqueue_proto_goTypes = []any{
	(*TaskResponse)(nil),              // 0: taskqueue.TaskResponse
	(*WorkerInfo)(nil),                // 1: taskqueue.WorkerInfo
	(*TaskRequest)(nil),               // 2: taskqueue.TaskRequest
	(*Task)(nil),                      // 3: taskqueue.Task
	(*TaskList)(nil),                  // 4: taskqueue.TaskList
	(*Worker)(nil),                    // 5: taskqueue.Worker
	(*WorkersList)(nil),               // 6: taskqueue.WorkersList
	(*ListWorkersRequest)(nil),        // 7: taskqueue.ListWorkersRequest
	(*TaskUpdate)(nil),                // 8: taskqueue.TaskUpdate
	(*TaskUpdateList)(nil),            // 9: taskqueue.TaskUpdateList
	(*TaskListAndOther)(nil),          // 10: taskqueue.TaskListAndOther
	(*TaskStatusUpdate)(nil),          // 11: taskqueue.TaskStatusUpdate
	(*TaskLog)(nil),                   // 12: taskqueue.TaskLog
	(*TaskId)(nil),                    // 13: taskqueue.TaskId
	(*WorkerId)(nil),                  // 14: taskqueue.WorkerId
	(*WorkerStatusRequest)(nil),       // 15: taskqueue.WorkerStatusRequest
	(*WorkerStatus)(nil),              // 16: taskqueue.WorkerStatus
	(*WorkerStatusResponse)(nil),      // 17: taskqueue.WorkerStatusResponse
	(*WorkerDetails)(nil),             // 18: taskqueue.WorkerDetails
	(*WorkerIds)(nil),                 // 19: taskqueue.WorkerIds
	(*JobId)(nil),                     // 20: taskqueue.JobId
	(*PingAndGetNewTasksRequest)(nil), // 21: taskqueue.PingAndGetNewTasksRequest
	(*Ack)(nil),                       // 22: taskqueue.Ack
	(*ListTasksRequest)(nil),          // 23: taskqueue.ListTasksRequest
	(*WorkerRequest)(nil),             // 24: taskqueue.WorkerRequest
	(*WorkerUpdateRequest)(nil),       // 25: taskqueue.WorkerUpdateRequest
	(*ListFlavorsRequest)(nil),        // 26: taskqueue.ListFlavorsRequest
	(*Flavor)(nil),                    // 27: taskqueue.Flavor
	(*FlavorsList)(nil),               // 28: taskqueue.FlavorsList
	(*ListJobsRequest)(nil),           // 29: taskqueue.ListJobsRequest
	(*Job)(nil),                       // 30: taskqueue.Job
	(*JobsList)(nil),                  // 31: taskqueue.JobsList
	(*RcloneConfig)(nil),              // 32: taskqueue.RcloneConfig
	(*LoginRequest)(nil),              // 33: taskqueue.LoginRequest
	(*LoginResponse)(nil),             // 34: taskqueue.LoginResponse
	(*Token)(nil),                     // 35: taskqueue.Token
	(*CreateUserRequest)(nil),         // 36: taskqueue.CreateUserRequest
	(*UserId)(nil),                    // 37: taskqueue.UserId
	(*User)(nil),                      // 38: taskqueue.User
	(*UsersList)(nil),                 // 39: taskqueue.UsersList
	(*ChangePasswordRequest)(nil),     // 40: taskqueue.ChangePasswordRequest
	(*RecruiterFilter)(nil),           // 41: taskqueue.RecruiterFilter
	(*RecruiterId)(nil),               // 42: taskqueue.RecruiterId
	(*Recruiter)(nil),                 // 43: taskqueue.Recruiter
	(*RecruiterUpdate)(nil),           // 44: taskqueue.RecruiterUpdate
	(*RecruiterList)(nil),             // 45: taskqueue.RecruiterList
	(*WorkflowFilter)(nil),            // 46: taskqueue.WorkflowFilter
	(*WorkflowId)(nil),                // 47: taskqueue.WorkflowId
	(*Workflow)(nil),                  // 48: taskqueue.Workflow
	(*WorkflowRequest)(nil),           // 49: taskqueue.WorkflowRequest
	(*WorkflowList)(nil),              // 50: taskqueue.WorkflowList
	(*StepId)(nil),                    // 51: taskqueue.StepId
	(*Step)(nil),                      // 52: taskqueue.Step
	(*StepRequest)(nil),               // 53: taskqueue.StepRequest
	(*StepList)(nil),                  // 54: taskqueue.StepList
	(*WorkerStats)(nil),               // 55: taskqueue.WorkerStats
	(*DiskUsage)(nil),                 // 56: taskqueue.DiskUsage
	(*DiskIOStats)(nil),               // 57: taskqueue.DiskIOStats
	(*NetIOStats)(nil),                // 58: taskqueue.NetIOStats
	(*GetWorkerStatsRequest)(nil),     // 59: taskqueue.GetWorkerStatsRequest
	(*GetWorkerStatsResponse)(nil),    // 60: taskqueue.GetWorkerStatsResponse
	nil,                               // 61: taskqueue.TaskUpdateList.UpdatesEntry
	nil,                               // 62: taskqueue.GetWorkerStatsResponse.WorkerStatsEntry
	(*emptypb.Empty)(nil),             // 63: google.protobuf.Empty
}
var file_taskqueue_proto_depIdxs = []int32{
	3,  // 0: taskqueue.TaskList.tasks:type_name -> taskqueue.Task
	5,  // 1: taskqueue.WorkersList.workers:type_name -> taskqueue.Worker
	61, // 2: taskqueue.TaskUpdateList.updates:type_name -> taskqueue.TaskUpdateList.UpdatesEntry
	3,  // 3: taskqueue.TaskListAndOther.tasks:type_name -> taskqueue.Task
	9,  // 4: taskqueue.TaskListAndOther.updates:type_name -> taskqueue.TaskUpdateList
	16, // 5: taskqueue.WorkerStatusResponse.statuses:type_name -> taskqueue.WorkerStatus
	18, // 6: taskqueue.WorkerIds.workers_details:type_name -> taskqueue.WorkerDetails
	55, // 7: taskqueue.PingAndGetNewTasksRequest.stats:type_name -> taskqueue.WorkerStats
	27, // 8: taskqueue.FlavorsList.flavors:type_name -> taskqueue.Flavor
	30, // 9: taskqueue.JobsList.jobs:type_name -> taskqueue.Job
	38, // 10: taskqueue.UsersList.users:type_name -> taskqueue.User
	43, // 11: taskqueue.RecruiterList.recruiters:type_name -> taskqueue.Recruiter
	48, // 12: taskqueue.WorkflowList.workflows:type_name -> taskqueue.Workflow
	52, // 13: taskqueue.StepList.steps:type_name -> taskqueue.Step
	56, // 14: taskqueue.WorkerStats.disks:type_name -> taskqueue.DiskUsage
	57, // 15: taskqueue.WorkerStats.disk_io:type_name -> taskqueue.DiskIOStats
	58, // 16: taskqueue.WorkerStats.net_io:type_name -> taskqueue.NetIOStats
	62, // 17: taskqueue.GetWorkerStatsResponse.worker_stats:type_name -> taskqueue.GetWorkerStatsResponse.WorkerStatsEntry
	8,  // 18: taskqueue.TaskUpdateList.UpdatesEntry.value:type_name -> taskqueue.TaskUpdate
	55, // 19: taskqueue.GetWorkerStatsResponse.WorkerStatsEntry.value:type_name -> taskqueue.WorkerStats
	2,  // 20: taskqueue.TaskQueue.SubmitTask:input_type -> taskqueue.TaskRequest
	1,  // 21: taskqueue.TaskQueue.RegisterWorker:input_type -> taskqueue.WorkerInfo
	21, // 22: taskqueue.TaskQueue.PingAndTakeNewTasks:input_type -> taskqueue.PingAndGetNewTasksRequest
	11, // 23: taskqueue.TaskQueue.UpdateTaskStatus:input_type -> taskqueue.TaskStatusUpdate
	12, // 24: taskqueue.TaskQueue.SendTaskLogs:input_type -> taskqueue.TaskLog
	13, // 25: taskqueue.TaskQueue.StreamTaskLogs:input_type -> taskqueue.TaskId
	23, // 26: taskqueue.TaskQueue.ListTasks:input_type -> taskqueue.ListTasksRequest
	7,  // 27: taskqueue.TaskQueue.ListWorkers:input_type -> taskqueue.ListWorkersRequest
	24, // 28: taskqueue.TaskQueue.CreateWorker:input_type -> taskqueue.WorkerRequest
	16, // 29: taskqueue.TaskQueue.UpdateWorkerStatus:input_type -> taskqueue.WorkerStatus
	14, // 30: taskqueue.TaskQueue.DeleteWorker:input_type -> taskqueue.WorkerId
	25, // 31: taskqueue.TaskQueue.UpdateWorker:input_type -> taskqueue.WorkerUpdateRequest
	15, // 32: taskqueue.TaskQueue.GetWorkerStatuses:input_type -> taskqueue.WorkerStatusRequest
	29, // 33: taskqueue.TaskQueue.ListJobs:input_type -> taskqueue.ListJobsRequest
	20, // 34: taskqueue.TaskQueue.DeleteJob:input_type -> taskqueue.JobId
	26, // 35: taskqueue.TaskQueue.ListFlavors:input_type -> taskqueue.ListFlavorsRequest
	63, // 36: taskqueue.TaskQueue.GetRcloneConfig:input_type -> google.protobuf.Empty
	33, // 37: taskqueue.TaskQueue.Login:input_type -> taskqueue.LoginRequest
	35, // 38: taskqueue.TaskQueue.Logout:input_type -> taskqueue.Token
	36, // 39: taskqueue.TaskQueue.CreateUser:input_type -> taskqueue.CreateUserRequest
	63, // 40: taskqueue.TaskQueue.ListUsers:input_type -> google.protobuf.Empty
	37, // 41: taskqueue.TaskQueue.DeleteUser:input_type -> taskqueue.UserId
	38, // 42: taskqueue.TaskQueue.UpdateUser:input_type -> taskqueue.User
	40, // 43: taskqueue.TaskQueue.ChangePassword:input_type -> taskqueue.ChangePasswordRequest
	41, // 44: taskqueue.TaskQueue.ListRecruiters:input_type -> taskqueue.RecruiterFilter
	43, // 45: taskqueue.TaskQueue.CreateRecruiter:input_type -> taskqueue.Recruiter
	44, // 46: taskqueue.TaskQueue.UpdateRecruiter:input_type -> taskqueue.RecruiterUpdate
	42, // 47: taskqueue.TaskQueue.DeleteRecruiter:input_type -> taskqueue.RecruiterId
	46, // 48: taskqueue.TaskQueue.ListWorkflows:input_type -> taskqueue.WorkflowFilter
	49, // 49: taskqueue.TaskQueue.CreateWorkflow:input_type -> taskqueue.WorkflowRequest
	47, // 50: taskqueue.TaskQueue.DeleteWorkflow:input_type -> taskqueue.WorkflowId
	47, // 51: taskqueue.TaskQueue.ListSteps:input_type -> taskqueue.WorkflowId
	53, // 52: taskqueue.TaskQueue.CreateStep:input_type -> taskqueue.StepRequest
	51, // 53: taskqueue.TaskQueue.DeleteStep:input_type -> taskqueue.StepId
	59, // 54: taskqueue.TaskQueue.GetWorkerStats:input_type -> taskqueue.GetWorkerStatsRequest
	0,  // 55: taskqueue.TaskQueue.SubmitTask:output_type -> taskqueue.TaskResponse
	14, // 56: taskqueue.TaskQueue.RegisterWorker:output_type -> taskqueue.WorkerId
	10, // 57: taskqueue.TaskQueue.PingAndTakeNewTasks:output_type -> taskqueue.TaskListAndOther
	22, // 58: taskqueue.TaskQueue.UpdateTaskStatus:output_type -> taskqueue.Ack
	22, // 59: taskqueue.TaskQueue.SendTaskLogs:output_type -> taskqueue.Ack
	12, // 60: taskqueue.TaskQueue.StreamTaskLogs:output_type -> taskqueue.TaskLog
	4,  // 61: taskqueue.TaskQueue.ListTasks:output_type -> taskqueue.TaskList
	6,  // 62: taskqueue.TaskQueue.ListWorkers:output_type -> taskqueue.WorkersList
	19, // 63: taskqueue.TaskQueue.CreateWorker:output_type -> taskqueue.WorkerIds
	22, // 64: taskqueue.TaskQueue.UpdateWorkerStatus:output_type -> taskqueue.Ack
	22, // 65: taskqueue.TaskQueue.DeleteWorker:output_type -> taskqueue.Ack
	22, // 66: taskqueue.TaskQueue.UpdateWorker:output_type -> taskqueue.Ack
	17, // 67: taskqueue.TaskQueue.GetWorkerStatuses:output_type -> taskqueue.WorkerStatusResponse
	31, // 68: taskqueue.TaskQueue.ListJobs:output_type -> taskqueue.JobsList
	22, // 69: taskqueue.TaskQueue.DeleteJob:output_type -> taskqueue.Ack
	28, // 70: taskqueue.TaskQueue.ListFlavors:output_type -> taskqueue.FlavorsList
	32, // 71: taskqueue.TaskQueue.GetRcloneConfig:output_type -> taskqueue.RcloneConfig
	34, // 72: taskqueue.TaskQueue.Login:output_type -> taskqueue.LoginResponse
	22, // 73: taskqueue.TaskQueue.Logout:output_type -> taskqueue.Ack
	37, // 74: taskqueue.TaskQueue.CreateUser:output_type -> taskqueue.UserId
	39, // 75: taskqueue.TaskQueue.ListUsers:output_type -> taskqueue.UsersList
	22, // 76: taskqueue.TaskQueue.DeleteUser:output_type -> taskqueue.Ack
	22, // 77: taskqueue.TaskQueue.UpdateUser:output_type -> taskqueue.Ack
	22, // 78: taskqueue.TaskQueue.ChangePassword:output_type -> taskqueue.Ack
	45, // 79: taskqueue.TaskQueue.ListRecruiters:output_type -> taskqueue.RecruiterList
	22, // 80: taskqueue.TaskQueue.CreateRecruiter:output_type -> taskqueue.Ack
	22, // 81: taskqueue.TaskQueue.UpdateRecruiter:output_type -> taskqueue.Ack
	22, // 82: taskqueue.TaskQueue.DeleteRecruiter:output_type -> taskqueue.Ack
	50, // 83: taskqueue.TaskQueue.ListWorkflows:output_type -> taskqueue.WorkflowList
	47, // 84: taskqueue.TaskQueue.CreateWorkflow:output_type -> taskqueue.WorkflowId
	22, // 85: taskqueue.TaskQueue.DeleteWorkflow:output_type -> taskqueue.Ack
	54, // 86: taskqueue.TaskQueue.ListSteps:output_type -> taskqueue.StepList
	51, // 87: taskqueue.TaskQueue.CreateStep:output_type -> taskqueue.StepId
	22, // 88: taskqueue.TaskQueue.DeleteStep:output_type -> taskqueue.Ack
	60, // 89: taskqueue.TaskQueue.GetWorkerStats:output_type -> taskqueue.GetWorkerStatsResponse
	55, // [55:90] is the sub-list for method output_type
	20, // [20:55] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_taskqueue_proto_init() }
func file_taskqueue_proto_init() {
	if File_taskqueue_proto != nil {
		return
	}
	file_taskqueue_proto_msgTypes[1].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[2].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[3].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[23].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[24].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[25].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[38].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[41].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[43].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[44].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[46].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[48].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[49].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[53].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_taskqueue_proto_rawDesc), len(file_taskqueue_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taskqueue_proto_goTypes,
		DependencyIndexes: file_taskqueue_proto_depIdxs,
		MessageInfos:      file_taskqueue_proto_msgTypes,
	}.Build()
	File_taskqueue_proto = out.File
	file_taskqueue_proto_goTypes = nil
	file_taskqueue_proto_depIdxs = nil
}
