// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.24.3
// source: taskqueue.proto

package taskqueuepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_taskqueue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{0}
}

func (x *TaskResponse) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Concurrency   *uint32                `protobuf:"varint,2,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_taskqueue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerInfo) GetConcurrency() uint32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

type Task struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TaskId           *uint32                `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3,oneof" json:"task_id,omitempty"`
	Command          string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Shell            *string                `protobuf:"bytes,3,opt,name=shell,proto3,oneof" json:"shell,omitempty"`
	Container        string                 `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	ContainerOptions *string                `protobuf:"bytes,5,opt,name=container_options,json=containerOptions,proto3,oneof" json:"container_options,omitempty"`
	StepId           *uint32                `protobuf:"varint,6,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	Input            []string               `protobuf:"bytes,7,rep,name=input,proto3" json:"input,omitempty"`
	Resource         []string               `protobuf:"bytes,8,rep,name=resource,proto3" json:"resource,omitempty"`
	Output           *string                `protobuf:"bytes,9,opt,name=output,proto3,oneof" json:"output,omitempty"`
	Retry            *uint32                `protobuf:"varint,10,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
	IsFinal          *bool                  `protobuf:"varint,11,opt,name=is_final,json=isFinal,proto3,oneof" json:"is_final,omitempty"`
	UsesCache        *bool                  `protobuf:"varint,12,opt,name=uses_cache,json=usesCache,proto3,oneof" json:"uses_cache,omitempty"`
	DownloadTimeout  *float32               `protobuf:"fixed32,13,opt,name=download_timeout,json=downloadTimeout,proto3,oneof" json:"download_timeout,omitempty"`
	RunningTimeout   *float32               `protobuf:"fixed32,14,opt,name=running_timeout,json=runningTimeout,proto3,oneof" json:"running_timeout,omitempty"`
	UploadTimeout    *float32               `protobuf:"fixed32,15,opt,name=upload_timeout,json=uploadTimeout,proto3,oneof" json:"upload_timeout,omitempty"`
	Status           string                 `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_taskqueue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{2}
}

func (x *Task) GetTaskId() uint32 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *Task) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Task) GetShell() string {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return ""
}

func (x *Task) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *Task) GetContainerOptions() string {
	if x != nil && x.ContainerOptions != nil {
		return *x.ContainerOptions
	}
	return ""
}

func (x *Task) GetStepId() uint32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

func (x *Task) GetInput() []string {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Task) GetResource() []string {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Task) GetOutput() string {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return ""
}

func (x *Task) GetRetry() uint32 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

func (x *Task) GetIsFinal() bool {
	if x != nil && x.IsFinal != nil {
		return *x.IsFinal
	}
	return false
}

func (x *Task) GetUsesCache() bool {
	if x != nil && x.UsesCache != nil {
		return *x.UsesCache
	}
	return false
}

func (x *Task) GetDownloadTimeout() float32 {
	if x != nil && x.DownloadTimeout != nil {
		return *x.DownloadTimeout
	}
	return 0
}

func (x *Task) GetRunningTimeout() float32 {
	if x != nil && x.RunningTimeout != nil {
		return *x.RunningTimeout
	}
	return 0
}

func (x *Task) GetUploadTimeout() float32 {
	if x != nil && x.UploadTimeout != nil {
		return *x.UploadTimeout
	}
	return 0
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TaskList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	mi := &file_taskqueue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{3}
}

func (x *TaskList) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Worker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,3,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      uint32                 `protobuf:"varint,4,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Ipv4          string                 `protobuf:"bytes,6,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6          string                 `protobuf:"bytes,7,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Flavor        string                 `protobuf:"bytes,8,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Provider      string                 `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
	Region        string                 `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_taskqueue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{4}
}

func (x *Worker) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Worker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Worker) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Worker) GetPrefetch() uint32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *Worker) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Worker) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *Worker) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *Worker) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *Worker) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Worker) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type WorkersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workers       []*Worker              `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkersList) Reset() {
	*x = WorkersList{}
	mi := &file_taskqueue_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkersList) ProtoMessage() {}

func (x *WorkersList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkersList.ProtoReflect.Descriptor instead.
func (*WorkersList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{5}
}

func (x *WorkersList) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

type ListWorkersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersRequest) Reset() {
	*x = ListWorkersRequest{}
	mi := &file_taskqueue_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersRequest) ProtoMessage() {}

func (x *ListWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{6}
}

type TaskUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Weight        float64                `protobuf:"fixed64,1,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdate) Reset() {
	*x = TaskUpdate{}
	mi := &file_taskqueue_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdate) ProtoMessage() {}

func (x *TaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdate.ProtoReflect.Descriptor instead.
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{7}
}

func (x *TaskUpdate) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type TaskUpdateList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       map[uint32]*TaskUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // optional — can be empty
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdateList) Reset() {
	*x = TaskUpdateList{}
	mi := &file_taskqueue_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateList) ProtoMessage() {}

func (x *TaskUpdateList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateList.ProtoReflect.Descriptor instead.
func (*TaskUpdateList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{8}
}

func (x *TaskUpdateList) GetUpdates() map[uint32]*TaskUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TaskListAndOther struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Updates       *TaskUpdateList        `protobuf:"bytes,3,opt,name=updates,proto3" json:"updates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskListAndOther) Reset() {
	*x = TaskListAndOther{}
	mi := &file_taskqueue_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListAndOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListAndOther) ProtoMessage() {}

func (x *TaskListAndOther) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListAndOther.ProtoReflect.Descriptor instead.
func (*TaskListAndOther) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{9}
}

func (x *TaskListAndOther) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskListAndOther) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *TaskListAndOther) GetUpdates() *TaskUpdateList {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TaskStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NewStatus     string                 `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusUpdate) Reset() {
	*x = TaskStatusUpdate{}
	mi := &file_taskqueue_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusUpdate) ProtoMessage() {}

func (x *TaskStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusUpdate.ProtoReflect.Descriptor instead.
func (*TaskStatusUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{10}
}

func (x *TaskStatusUpdate) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskStatusUpdate) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

type TaskLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	LogType       string                 `protobuf:"bytes,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"` // 'O' for stdout, 'E' for stderr
	LogText       string                 `protobuf:"bytes,3,opt,name=log_text,json=logText,proto3" json:"log_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskLog) Reset() {
	*x = TaskLog{}
	mi := &file_taskqueue_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLog) ProtoMessage() {}

func (x *TaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLog.ProtoReflect.Descriptor instead.
func (*TaskLog) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{11}
}

func (x *TaskLog) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLog) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

func (x *TaskLog) GetLogText() string {
	if x != nil {
		return x.LogText
	}
	return ""
}

type TaskId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskId) Reset() {
	*x = TaskId{}
	mi := &file_taskqueue_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskId) ProtoMessage() {}

func (x *TaskId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskId.ProtoReflect.Descriptor instead.
func (*TaskId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{12}
}

func (x *TaskId) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type WorkerId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      uint32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerId) Reset() {
	*x = WorkerId{}
	mi := &file_taskqueue_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerId) ProtoMessage() {}

func (x *WorkerId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerId.ProtoReflect.Descriptor instead.
func (*WorkerId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{13}
}

func (x *WorkerId) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

type WorkerIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerIds     []uint32               `protobuf:"varint,1,rep,packed,name=worker_ids,json=workerIds,proto3" json:"worker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerIds) Reset() {
	*x = WorkerIds{}
	mi := &file_taskqueue_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIds) ProtoMessage() {}

func (x *WorkerIds) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIds.ProtoReflect.Descriptor instead.
func (*WorkerIds) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{14}
}

func (x *WorkerIds) GetWorkerIds() []uint32 {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_taskqueue_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{15}
}

func (x *Ack) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusFilter  *string                `protobuf:"bytes,1,opt,name=status_filter,json=statusFilter,proto3,oneof" json:"status_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_taskqueue_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{16}
}

func (x *ListTasksRequest) GetStatusFilter() string {
	if x != nil && x.StatusFilter != nil {
		return *x.StatusFilter
	}
	return ""
}

type WorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProviderId    uint32                 `protobuf:"varint,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	FlavorId      uint32                 `protobuf:"varint,2,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	RegionId      uint32                 `protobuf:"varint,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Number        uint32                 `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,5,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      uint32                 `protobuf:"varint,6,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	StepId        uint32                 `protobuf:"varint,7,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerRequest) Reset() {
	*x = WorkerRequest{}
	mi := &file_taskqueue_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRequest) ProtoMessage() {}

func (x *WorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRequest.ProtoReflect.Descriptor instead.
func (*WorkerRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{17}
}

func (x *WorkerRequest) GetProviderId() uint32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *WorkerRequest) GetFlavorId() uint32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *WorkerRequest) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *WorkerRequest) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *WorkerRequest) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *WorkerRequest) GetPrefetch() uint32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *WorkerRequest) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

type ListFlavorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         uint32                 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter        string                 `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFlavorsRequest) Reset() {
	*x = ListFlavorsRequest{}
	mi := &file_taskqueue_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlavorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlavorsRequest) ProtoMessage() {}

func (x *ListFlavorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlavorsRequest.ProtoReflect.Descriptor instead.
func (*ListFlavorsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{18}
}

func (x *ListFlavorsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFlavorsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type Flavor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields from the "flavor" table
	FlavorId      uint32  `protobuf:"varint,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`                   // PRIMARY KEY
	FlavorName    string  `protobuf:"bytes,2,opt,name=flavor_name,json=flavorName,proto3" json:"flavor_name,omitempty"`              // Name of the flavor
	ProviderId    uint32  `protobuf:"varint,3,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`             // Foreign key to provider table
	Provider      string  `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`                                    // Name of the provider (provider_name.config_name)
	Cpu           int32   `protobuf:"varint,5,opt,name=cpu,proto3" json:"cpu,omitempty"`                                             // Number of CPU cores
	Mem           float32 `protobuf:"fixed32,6,opt,name=mem,proto3" json:"mem,omitempty"`                                            // Memory in GB (or as needed)
	Disk          float32 `protobuf:"fixed32,7,opt,name=disk,proto3" json:"disk,omitempty"`                                          // Disk size in GB (or as needed)
	Bandwidth     int32   `protobuf:"varint,8,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`                                 // Bandwidth (if applicable)
	Gpu           string  `protobuf:"bytes,9,opt,name=gpu,proto3" json:"gpu,omitempty"`                                              // GPU description
	Gpumem        int32   `protobuf:"varint,10,opt,name=gpumem,proto3" json:"gpumem,omitempty"`                                      // GPU memory (in GB, for example)
	HasGpu        bool    `protobuf:"varint,11,opt,name=has_gpu,json=hasGpu,proto3" json:"has_gpu,omitempty"`                        // Whether a GPU is present
	HasQuickDisks bool    `protobuf:"varint,12,opt,name=has_quick_disks,json=hasQuickDisks,proto3" json:"has_quick_disks,omitempty"` // Whether quick disks are supported
	// Fields from the "flavor_region" table
	RegionId      uint32  `protobuf:"varint,13,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"` // Foreign key to region table
	Region        string  `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`                      // (Optional) Region name
	Eviction      float32 `protobuf:"fixed32,15,opt,name=eviction,proto3" json:"eviction,omitempty"`                // Eviction rate value
	Cost          float32 `protobuf:"fixed32,16,opt,name=cost,proto3" json:"cost,omitempty"`                        // Cost value
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flavor) Reset() {
	*x = Flavor{}
	mi := &file_taskqueue_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavor) ProtoMessage() {}

func (x *Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavor.ProtoReflect.Descriptor instead.
func (*Flavor) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{19}
}

func (x *Flavor) GetFlavorId() uint32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *Flavor) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *Flavor) GetProviderId() uint32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *Flavor) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Flavor) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Flavor) GetMem() float32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Flavor) GetDisk() float32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *Flavor) GetBandwidth() int32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Flavor) GetGpu() string {
	if x != nil {
		return x.Gpu
	}
	return ""
}

func (x *Flavor) GetGpumem() int32 {
	if x != nil {
		return x.Gpumem
	}
	return 0
}

func (x *Flavor) GetHasGpu() bool {
	if x != nil {
		return x.HasGpu
	}
	return false
}

func (x *Flavor) GetHasQuickDisks() bool {
	if x != nil {
		return x.HasQuickDisks
	}
	return false
}

func (x *Flavor) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Flavor) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Flavor) GetEviction() float32 {
	if x != nil {
		return x.Eviction
	}
	return 0
}

func (x *Flavor) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type FlavorsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flavors       []*Flavor              `protobuf:"bytes,1,rep,name=flavors,proto3" json:"flavors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlavorsList) Reset() {
	*x = FlavorsList{}
	mi := &file_taskqueue_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlavorsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavorsList) ProtoMessage() {}

func (x *FlavorsList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavorsList.ProtoReflect.Descriptor instead.
func (*FlavorsList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{20}
}

func (x *FlavorsList) GetFlavors() []*Flavor {
	if x != nil {
		return x.Flavors
	}
	return nil
}

type RcloneConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        string                 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RcloneConfig) Reset() {
	*x = RcloneConfig{}
	mi := &file_taskqueue_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RcloneConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcloneConfig) ProtoMessage() {}

func (x *RcloneConfig) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcloneConfig.ProtoReflect.Descriptor instead.
func (*RcloneConfig) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{21}
}

func (x *RcloneConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_taskqueue_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{22}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_taskqueue_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{23}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	IsAdmin       bool                   `protobuf:"varint,4,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_taskqueue_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{24}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type UserId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserId) Reset() {
	*x = UserId{}
	mi := &file_taskqueue_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{25}
}

func (x *UserId) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Email         *string                `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
	IsAdmin       *bool                  `protobuf:"varint,4,opt,name=is_admin,json=isAdmin,proto3,oneof" json:"is_admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_taskqueue_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{26}
}

func (x *User) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *User) GetIsAdmin() bool {
	if x != nil && x.IsAdmin != nil {
		return *x.IsAdmin
	}
	return false
}

type UsersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*User                `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsersList) Reset() {
	*x = UsersList{}
	mi := &file_taskqueue_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersList) ProtoMessage() {}

func (x *UsersList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersList.ProtoReflect.Descriptor instead.
func (*UsersList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{27}
}

func (x *UsersList) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	OldPassword   string                 `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword   string                 `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	mi := &file_taskqueue_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{28}
}

func (x *ChangePasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChangePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type RecruiterFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        *uint32                `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterFilter) Reset() {
	*x = RecruiterFilter{}
	mi := &file_taskqueue_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterFilter) ProtoMessage() {}

func (x *RecruiterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterFilter.ProtoReflect.Descriptor instead.
func (*RecruiterFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{29}
}

func (x *RecruiterFilter) GetStepId() uint32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

type RecruiterId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank          uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterId) Reset() {
	*x = RecruiterId{}
	mi := &file_taskqueue_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterId) ProtoMessage() {}

func (x *RecruiterId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterId.ProtoReflect.Descriptor instead.
func (*RecruiterId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{30}
}

func (x *RecruiterId) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *RecruiterId) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type Recruiter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank          uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Flavor        string                 `protobuf:"bytes,3,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Provider      string                 `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Region        string                 `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,6,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      uint32                 `protobuf:"varint,7,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	MaxWorkers    uint32                 `protobuf:"varint,8,opt,name=max_workers,json=maxWorkers,proto3" json:"max_workers,omitempty"`
	Round         uint32                 `protobuf:"varint,9,opt,name=round,proto3" json:"round,omitempty"`
	Timeout       uint32                 `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recruiter) Reset() {
	*x = Recruiter{}
	mi := &file_taskqueue_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recruiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recruiter) ProtoMessage() {}

func (x *Recruiter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recruiter.ProtoReflect.Descriptor instead.
func (*Recruiter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{31}
}

func (x *Recruiter) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *Recruiter) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Recruiter) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *Recruiter) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Recruiter) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Recruiter) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Recruiter) GetPrefetch() uint32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *Recruiter) GetMaxWorkers() uint32 {
	if x != nil {
		return x.MaxWorkers
	}
	return 0
}

func (x *Recruiter) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Recruiter) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type RecruiterUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        uint32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank          uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Flavor        *string                `protobuf:"bytes,3,opt,name=flavor,proto3,oneof" json:"flavor,omitempty"`
	Provider      *string                `protobuf:"bytes,4,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	Region        *string                `protobuf:"bytes,5,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Concurrency   *uint32                `protobuf:"varint,6,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	Prefetch      *uint32                `protobuf:"varint,7,opt,name=prefetch,proto3,oneof" json:"prefetch,omitempty"`
	MaxWorkers    *uint32                `protobuf:"varint,8,opt,name=max_workers,json=maxWorkers,proto3,oneof" json:"max_workers,omitempty"`
	Round         *uint32                `protobuf:"varint,9,opt,name=round,proto3,oneof" json:"round,omitempty"`
	Timeout       *uint32                `protobuf:"varint,10,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterUpdate) Reset() {
	*x = RecruiterUpdate{}
	mi := &file_taskqueue_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterUpdate) ProtoMessage() {}

func (x *RecruiterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterUpdate.ProtoReflect.Descriptor instead.
func (*RecruiterUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{32}
}

func (x *RecruiterUpdate) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *RecruiterUpdate) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RecruiterUpdate) GetFlavor() string {
	if x != nil && x.Flavor != nil {
		return *x.Flavor
	}
	return ""
}

func (x *RecruiterUpdate) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *RecruiterUpdate) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *RecruiterUpdate) GetConcurrency() uint32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *RecruiterUpdate) GetPrefetch() uint32 {
	if x != nil && x.Prefetch != nil {
		return *x.Prefetch
	}
	return 0
}

func (x *RecruiterUpdate) GetMaxWorkers() uint32 {
	if x != nil && x.MaxWorkers != nil {
		return *x.MaxWorkers
	}
	return 0
}

func (x *RecruiterUpdate) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *RecruiterUpdate) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type RecruiterList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recruiters    []*Recruiter           `protobuf:"bytes,1,rep,name=recruiters,proto3" json:"recruiters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterList) Reset() {
	*x = RecruiterList{}
	mi := &file_taskqueue_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterList) ProtoMessage() {}

func (x *RecruiterList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterList.ProtoReflect.Descriptor instead.
func (*RecruiterList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{33}
}

func (x *RecruiterList) GetRecruiters() []*Recruiter {
	if x != nil {
		return x.Recruiters
	}
	return nil
}

var File_taskqueue_proto protoreflect.FileDescriptor

const file_taskqueue_proto_rawDesc = "" +
	"\n" +
	"\x0ftaskqueue.proto\x12\ttaskqueue\x1a\x1bgoogle/protobuf/empty.proto\"'\n" +
	"\fTaskResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\"W\n" +
	"\n" +
	"WorkerInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12%\n" +
	"\vconcurrency\x18\x02 \x01(\rH\x00R\vconcurrency\x88\x01\x01B\x0e\n" +
	"\f_concurrency\"\xbc\x05\n" +
	"\x04Task\x12\x1c\n" +
	"\atask_id\x18\x01 \x01(\rH\x00R\x06taskId\x88\x01\x01\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\x12\x19\n" +
	"\x05shell\x18\x03 \x01(\tH\x01R\x05shell\x88\x01\x01\x12\x1c\n" +
	"\tcontainer\x18\x04 \x01(\tR\tcontainer\x120\n" +
	"\x11container_options\x18\x05 \x01(\tH\x02R\x10containerOptions\x88\x01\x01\x12\x1c\n" +
	"\astep_id\x18\x06 \x01(\rH\x03R\x06stepId\x88\x01\x01\x12\x14\n" +
	"\x05input\x18\a \x03(\tR\x05input\x12\x1a\n" +
	"\bresource\x18\b \x03(\tR\bresource\x12\x1b\n" +
	"\x06output\x18\t \x01(\tH\x04R\x06output\x88\x01\x01\x12\x19\n" +
	"\x05retry\x18\n" +
	" \x01(\rH\x05R\x05retry\x88\x01\x01\x12\x1e\n" +
	"\bis_final\x18\v \x01(\bH\x06R\aisFinal\x88\x01\x01\x12\"\n" +
	"\n" +
	"uses_cache\x18\f \x01(\bH\aR\tusesCache\x88\x01\x01\x12.\n" +
	"\x10download_timeout\x18\r \x01(\x02H\bR\x0fdownloadTimeout\x88\x01\x01\x12,\n" +
	"\x0frunning_timeout\x18\x0e \x01(\x02H\tR\x0erunningTimeout\x88\x01\x01\x12*\n" +
	"\x0eupload_timeout\x18\x0f \x01(\x02H\n" +
	"R\ruploadTimeout\x88\x01\x01\x12\x16\n" +
	"\x06status\x18\x10 \x01(\tR\x06statusB\n" +
	"\n" +
	"\b_task_idB\b\n" +
	"\x06_shellB\x14\n" +
	"\x12_container_optionsB\n" +
	"\n" +
	"\b_step_idB\t\n" +
	"\a_outputB\b\n" +
	"\x06_retryB\v\n" +
	"\t_is_finalB\r\n" +
	"\v_uses_cacheB\x13\n" +
	"\x11_download_timeoutB\x12\n" +
	"\x10_running_timeoutB\x11\n" +
	"\x0f_upload_timeout\"1\n" +
	"\bTaskList\x12%\n" +
	"\x05tasks\x18\x01 \x03(\v2\x0f.taskqueue.TaskR\x05tasks\"\x83\x02\n" +
	"\x06Worker\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vconcurrency\x18\x03 \x01(\rR\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\x04 \x01(\rR\bprefetch\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12\x12\n" +
	"\x04ipv4\x18\x06 \x01(\tR\x04ipv4\x12\x12\n" +
	"\x04ipv6\x18\a \x01(\tR\x04ipv6\x12\x16\n" +
	"\x06flavor\x18\b \x01(\tR\x06flavor\x12\x1a\n" +
	"\bprovider\x18\t \x01(\tR\bprovider\x12\x16\n" +
	"\x06region\x18\n" +
	" \x01(\tR\x06region\":\n" +
	"\vWorkersList\x12+\n" +
	"\aworkers\x18\x01 \x03(\v2\x11.taskqueue.WorkerR\aworkers\"\x14\n" +
	"\x12ListWorkersRequest\"$\n" +
	"\n" +
	"TaskUpdate\x12\x16\n" +
	"\x06weight\x18\x01 \x01(\x01R\x06weight\"\xa5\x01\n" +
	"\x0eTaskUpdateList\x12@\n" +
	"\aupdates\x18\x01 \x03(\v2&.taskqueue.TaskUpdateList.UpdatesEntryR\aupdates\x1aQ\n" +
	"\fUpdatesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.taskqueue.TaskUpdateR\x05value:\x028\x01\"\x90\x01\n" +
	"\x10TaskListAndOther\x12%\n" +
	"\x05tasks\x18\x01 \x03(\v2\x0f.taskqueue.TaskR\x05tasks\x12 \n" +
	"\vconcurrency\x18\x02 \x01(\rR\vconcurrency\x123\n" +
	"\aupdates\x18\x03 \x01(\v2\x19.taskqueue.TaskUpdateListR\aupdates\"J\n" +
	"\x10TaskStatusUpdate\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12\x1d\n" +
	"\n" +
	"new_status\x18\x02 \x01(\tR\tnewStatus\"X\n" +
	"\aTaskLog\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12\x19\n" +
	"\blog_type\x18\x02 \x01(\tR\alogType\x12\x19\n" +
	"\blog_text\x18\x03 \x01(\tR\alogText\"!\n" +
	"\x06TaskId\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\"'\n" +
	"\bWorkerId\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\rR\bworkerId\"*\n" +
	"\tWorkerIds\x12\x1d\n" +
	"\n" +
	"worker_ids\x18\x01 \x03(\rR\tworkerIds\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"N\n" +
	"\x10ListTasksRequest\x12(\n" +
	"\rstatus_filter\x18\x01 \x01(\tH\x00R\fstatusFilter\x88\x01\x01B\x10\n" +
	"\x0e_status_filter\"\xd9\x01\n" +
	"\rWorkerRequest\x12\x1f\n" +
	"\vprovider_id\x18\x01 \x01(\rR\n" +
	"providerId\x12\x1b\n" +
	"\tflavor_id\x18\x02 \x01(\rR\bflavorId\x12\x1b\n" +
	"\tregion_id\x18\x03 \x01(\rR\bregionId\x12\x16\n" +
	"\x06number\x18\x04 \x01(\rR\x06number\x12 \n" +
	"\vconcurrency\x18\x05 \x01(\rR\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\x06 \x01(\rR\bprefetch\x12\x17\n" +
	"\astep_id\x18\a \x01(\rR\x06stepId\"B\n" +
	"\x12ListFlavorsRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\rR\x05limit\x12\x16\n" +
	"\x06filter\x18\x02 \x01(\tR\x06filter\"\xa9\x03\n" +
	"\x06Flavor\x12\x1b\n" +
	"\tflavor_id\x18\x01 \x01(\rR\bflavorId\x12\x1f\n" +
	"\vflavor_name\x18\x02 \x01(\tR\n" +
	"flavorName\x12\x1f\n" +
	"\vprovider_id\x18\x03 \x01(\rR\n" +
	"providerId\x12\x1a\n" +
	"\bprovider\x18\x04 \x01(\tR\bprovider\x12\x10\n" +
	"\x03cpu\x18\x05 \x01(\x05R\x03cpu\x12\x10\n" +
	"\x03mem\x18\x06 \x01(\x02R\x03mem\x12\x12\n" +
	"\x04disk\x18\a \x01(\x02R\x04disk\x12\x1c\n" +
	"\tbandwidth\x18\b \x01(\x05R\tbandwidth\x12\x10\n" +
	"\x03gpu\x18\t \x01(\tR\x03gpu\x12\x16\n" +
	"\x06gpumem\x18\n" +
	" \x01(\x05R\x06gpumem\x12\x17\n" +
	"\ahas_gpu\x18\v \x01(\bR\x06hasGpu\x12&\n" +
	"\x0fhas_quick_disks\x18\f \x01(\bR\rhasQuickDisks\x12\x1b\n" +
	"\tregion_id\x18\r \x01(\rR\bregionId\x12\x16\n" +
	"\x06region\x18\x0e \x01(\tR\x06region\x12\x1a\n" +
	"\beviction\x18\x0f \x01(\x02R\beviction\x12\x12\n" +
	"\x04cost\x18\x10 \x01(\x02R\x04cost\":\n" +
	"\vFlavorsList\x12+\n" +
	"\aflavors\x18\x01 \x03(\v2\x11.taskqueue.FlavorR\aflavors\"&\n" +
	"\fRcloneConfig\x12\x16\n" +
	"\x06config\x18\x01 \x01(\tR\x06config\"F\n" +
	"\fLoginRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"%\n" +
	"\rLoginResponse\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"|\n" +
	"\x11CreateUserRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x19\n" +
	"\bis_admin\x18\x04 \x01(\bR\aisAdmin\"!\n" +
	"\x06UserId\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\rR\x06userId\"\x9f\x01\n" +
	"\x04User\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\rR\x06userId\x12\x1f\n" +
	"\busername\x18\x02 \x01(\tH\x00R\busername\x88\x01\x01\x12\x19\n" +
	"\x05email\x18\x03 \x01(\tH\x01R\x05email\x88\x01\x01\x12\x1e\n" +
	"\bis_admin\x18\x04 \x01(\bH\x02R\aisAdmin\x88\x01\x01B\v\n" +
	"\t_usernameB\b\n" +
	"\x06_emailB\v\n" +
	"\t_is_admin\"2\n" +
	"\tUsersList\x12%\n" +
	"\x05users\x18\x01 \x03(\v2\x0f.taskqueue.UserR\x05users\"y\n" +
	"\x15ChangePasswordRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12!\n" +
	"\fold_password\x18\x02 \x01(\tR\voldPassword\x12!\n" +
	"\fnew_password\x18\x03 \x01(\tR\vnewPassword\";\n" +
	"\x0fRecruiterFilter\x12\x1c\n" +
	"\astep_id\x18\x01 \x01(\rH\x00R\x06stepId\x88\x01\x01B\n" +
	"\n" +
	"\b_step_id\":\n" +
	"\vRecruiterId\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\rR\x04rank\"\x93\x02\n" +
	"\tRecruiter\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\rR\x04rank\x12\x16\n" +
	"\x06flavor\x18\x03 \x01(\tR\x06flavor\x12\x1a\n" +
	"\bprovider\x18\x04 \x01(\tR\bprovider\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12 \n" +
	"\vconcurrency\x18\x06 \x01(\rR\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\a \x01(\rR\bprefetch\x12\x1f\n" +
	"\vmax_workers\x18\b \x01(\rR\n" +
	"maxWorkers\x12\x14\n" +
	"\x05round\x18\t \x01(\rR\x05round\x12\x18\n" +
	"\atimeout\x18\n" +
	" \x01(\rR\atimeout\"\xa7\x03\n" +
	"\x0fRecruiterUpdate\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\rR\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\rR\x04rank\x12\x1b\n" +
	"\x06flavor\x18\x03 \x01(\tH\x00R\x06flavor\x88\x01\x01\x12\x1f\n" +
	"\bprovider\x18\x04 \x01(\tH\x01R\bprovider\x88\x01\x01\x12\x1b\n" +
	"\x06region\x18\x05 \x01(\tH\x02R\x06region\x88\x01\x01\x12%\n" +
	"\vconcurrency\x18\x06 \x01(\rH\x03R\vconcurrency\x88\x01\x01\x12\x1f\n" +
	"\bprefetch\x18\a \x01(\rH\x04R\bprefetch\x88\x01\x01\x12$\n" +
	"\vmax_workers\x18\b \x01(\rH\x05R\n" +
	"maxWorkers\x88\x01\x01\x12\x19\n" +
	"\x05round\x18\t \x01(\rH\x06R\x05round\x88\x01\x01\x12\x1d\n" +
	"\atimeout\x18\n" +
	" \x01(\rH\aR\atimeout\x88\x01\x01B\t\n" +
	"\a_flavorB\v\n" +
	"\t_providerB\t\n" +
	"\a_regionB\x0e\n" +
	"\f_concurrencyB\v\n" +
	"\t_prefetchB\x0e\n" +
	"\f_max_workersB\b\n" +
	"\x06_roundB\n" +
	"\n" +
	"\b_timeout\"E\n" +
	"\rRecruiterList\x124\n" +
	"\n" +
	"recruiters\x18\x01 \x03(\v2\x14.taskqueue.RecruiterR\n" +
	"recruiters2\xd2\n" +
	"\n" +
	"\tTaskQueue\x126\n" +
	"\n" +
	"SubmitTask\x12\x0f.taskqueue.Task\x1a\x17.taskqueue.TaskResponse\x12<\n" +
	"\x0eRegisterWorker\x12\x15.taskqueue.WorkerInfo\x1a\x13.taskqueue.WorkerId\x12G\n" +
	"\x13PingAndTakeNewTasks\x12\x13.taskqueue.WorkerId\x1a\x1b.taskqueue.TaskListAndOther\x12?\n" +
	"\x10UpdateTaskStatus\x12\x1b.taskqueue.TaskStatusUpdate\x1a\x0e.taskqueue.Ack\x124\n" +
	"\fSendTaskLogs\x12\x12.taskqueue.TaskLog\x1a\x0e.taskqueue.Ack(\x01\x129\n" +
	"\x0eStreamTaskLogs\x12\x11.taskqueue.TaskId\x1a\x12.taskqueue.TaskLog0\x01\x12=\n" +
	"\tListTasks\x12\x1b.taskqueue.ListTasksRequest\x1a\x13.taskqueue.TaskList\x12D\n" +
	"\vListWorkers\x12\x1d.taskqueue.ListWorkersRequest\x1a\x16.taskqueue.WorkersList\x12>\n" +
	"\fCreateWorker\x12\x18.taskqueue.WorkerRequest\x1a\x14.taskqueue.WorkerIds\x123\n" +
	"\fDeleteWorker\x12\x13.taskqueue.WorkerId\x1a\x0e.taskqueue.Ack\x12D\n" +
	"\vListFlavors\x12\x1d.taskqueue.ListFlavorsRequest\x1a\x16.taskqueue.FlavorsList\x12B\n" +
	"\x0fGetRcloneConfig\x12\x16.google.protobuf.Empty\x1a\x17.taskqueue.RcloneConfig\x12:\n" +
	"\x05Login\x12\x17.taskqueue.LoginRequest\x1a\x18.taskqueue.LoginResponse\x12:\n" +
	"\n" +
	"CreateUser\x12\x1c.taskqueue.CreateUserRequest\x1a\x0e.taskqueue.Ack\x129\n" +
	"\tListUsers\x12\x16.google.protobuf.Empty\x1a\x14.taskqueue.UsersList\x12/\n" +
	"\n" +
	"DeleteUser\x12\x11.taskqueue.UserId\x1a\x0e.taskqueue.Ack\x12-\n" +
	"\n" +
	"UpdateUser\x12\x0f.taskqueue.User\x1a\x0e.taskqueue.Ack\x12B\n" +
	"\x0eChangePassword\x12 .taskqueue.ChangePasswordRequest\x1a\x0e.taskqueue.Ack\x12F\n" +
	"\x0eListRecruiters\x12\x1a.taskqueue.RecruiterFilter\x1a\x18.taskqueue.RecruiterList\x127\n" +
	"\x0fCreateRecruiter\x12\x14.taskqueue.Recruiter\x1a\x0e.taskqueue.Ack\x12=\n" +
	"\x0fUpdateRecruiter\x12\x1a.taskqueue.RecruiterUpdate\x1a\x0e.taskqueue.Ack\x129\n" +
	"\x0fDeleteRecruiter\x12\x16.taskqueue.RecruiterId\x1a\x0e.taskqueue.AckB\x11Z\x0fgen/taskqueuepbb\x06proto3"

var (
	file_taskqueue_proto_rawDescOnce sync.Once
	file_taskqueue_proto_rawDescData []byte
)

func file_taskqueue_proto_rawDescGZIP() []byte {
	file_taskqueue_proto_rawDescOnce.Do(func() {
		file_taskqueue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_taskqueue_proto_rawDesc), len(file_taskqueue_proto_rawDesc)))
	})
	return file_taskqueue_proto_rawDescData
}

var file_taskqueue_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_taskqueue_proto_goTypes = []any{
	(*TaskResponse)(nil),          // 0: taskqueue.TaskResponse
	(*WorkerInfo)(nil),            // 1: taskqueue.WorkerInfo
	(*Task)(nil),                  // 2: taskqueue.Task
	(*TaskList)(nil),              // 3: taskqueue.TaskList
	(*Worker)(nil),                // 4: taskqueue.Worker
	(*WorkersList)(nil),           // 5: taskqueue.WorkersList
	(*ListWorkersRequest)(nil),    // 6: taskqueue.ListWorkersRequest
	(*TaskUpdate)(nil),            // 7: taskqueue.TaskUpdate
	(*TaskUpdateList)(nil),        // 8: taskqueue.TaskUpdateList
	(*TaskListAndOther)(nil),      // 9: taskqueue.TaskListAndOther
	(*TaskStatusUpdate)(nil),      // 10: taskqueue.TaskStatusUpdate
	(*TaskLog)(nil),               // 11: taskqueue.TaskLog
	(*TaskId)(nil),                // 12: taskqueue.TaskId
	(*WorkerId)(nil),              // 13: taskqueue.WorkerId
	(*WorkerIds)(nil),             // 14: taskqueue.WorkerIds
	(*Ack)(nil),                   // 15: taskqueue.Ack
	(*ListTasksRequest)(nil),      // 16: taskqueue.ListTasksRequest
	(*WorkerRequest)(nil),         // 17: taskqueue.WorkerRequest
	(*ListFlavorsRequest)(nil),    // 18: taskqueue.ListFlavorsRequest
	(*Flavor)(nil),                // 19: taskqueue.Flavor
	(*FlavorsList)(nil),           // 20: taskqueue.FlavorsList
	(*RcloneConfig)(nil),          // 21: taskqueue.RcloneConfig
	(*LoginRequest)(nil),          // 22: taskqueue.LoginRequest
	(*LoginResponse)(nil),         // 23: taskqueue.LoginResponse
	(*CreateUserRequest)(nil),     // 24: taskqueue.CreateUserRequest
	(*UserId)(nil),                // 25: taskqueue.UserId
	(*User)(nil),                  // 26: taskqueue.User
	(*UsersList)(nil),             // 27: taskqueue.UsersList
	(*ChangePasswordRequest)(nil), // 28: taskqueue.ChangePasswordRequest
	(*RecruiterFilter)(nil),       // 29: taskqueue.RecruiterFilter
	(*RecruiterId)(nil),           // 30: taskqueue.RecruiterId
	(*Recruiter)(nil),             // 31: taskqueue.Recruiter
	(*RecruiterUpdate)(nil),       // 32: taskqueue.RecruiterUpdate
	(*RecruiterList)(nil),         // 33: taskqueue.RecruiterList
	nil,                           // 34: taskqueue.TaskUpdateList.UpdatesEntry
	(*emptypb.Empty)(nil),         // 35: google.protobuf.Empty
}
var file_taskqueue_proto_depIdxs = []int32{
	2,  // 0: taskqueue.TaskList.tasks:type_name -> taskqueue.Task
	4,  // 1: taskqueue.WorkersList.workers:type_name -> taskqueue.Worker
	34, // 2: taskqueue.TaskUpdateList.updates:type_name -> taskqueue.TaskUpdateList.UpdatesEntry
	2,  // 3: taskqueue.TaskListAndOther.tasks:type_name -> taskqueue.Task
	8,  // 4: taskqueue.TaskListAndOther.updates:type_name -> taskqueue.TaskUpdateList
	19, // 5: taskqueue.FlavorsList.flavors:type_name -> taskqueue.Flavor
	26, // 6: taskqueue.UsersList.users:type_name -> taskqueue.User
	31, // 7: taskqueue.RecruiterList.recruiters:type_name -> taskqueue.Recruiter
	7,  // 8: taskqueue.TaskUpdateList.UpdatesEntry.value:type_name -> taskqueue.TaskUpdate
	2,  // 9: taskqueue.TaskQueue.SubmitTask:input_type -> taskqueue.Task
	1,  // 10: taskqueue.TaskQueue.RegisterWorker:input_type -> taskqueue.WorkerInfo
	13, // 11: taskqueue.TaskQueue.PingAndTakeNewTasks:input_type -> taskqueue.WorkerId
	10, // 12: taskqueue.TaskQueue.UpdateTaskStatus:input_type -> taskqueue.TaskStatusUpdate
	11, // 13: taskqueue.TaskQueue.SendTaskLogs:input_type -> taskqueue.TaskLog
	12, // 14: taskqueue.TaskQueue.StreamTaskLogs:input_type -> taskqueue.TaskId
	16, // 15: taskqueue.TaskQueue.ListTasks:input_type -> taskqueue.ListTasksRequest
	6,  // 16: taskqueue.TaskQueue.ListWorkers:input_type -> taskqueue.ListWorkersRequest
	17, // 17: taskqueue.TaskQueue.CreateWorker:input_type -> taskqueue.WorkerRequest
	13, // 18: taskqueue.TaskQueue.DeleteWorker:input_type -> taskqueue.WorkerId
	18, // 19: taskqueue.TaskQueue.ListFlavors:input_type -> taskqueue.ListFlavorsRequest
	35, // 20: taskqueue.TaskQueue.GetRcloneConfig:input_type -> google.protobuf.Empty
	22, // 21: taskqueue.TaskQueue.Login:input_type -> taskqueue.LoginRequest
	24, // 22: taskqueue.TaskQueue.CreateUser:input_type -> taskqueue.CreateUserRequest
	35, // 23: taskqueue.TaskQueue.ListUsers:input_type -> google.protobuf.Empty
	25, // 24: taskqueue.TaskQueue.DeleteUser:input_type -> taskqueue.UserId
	26, // 25: taskqueue.TaskQueue.UpdateUser:input_type -> taskqueue.User
	28, // 26: taskqueue.TaskQueue.ChangePassword:input_type -> taskqueue.ChangePasswordRequest
	29, // 27: taskqueue.TaskQueue.ListRecruiters:input_type -> taskqueue.RecruiterFilter
	31, // 28: taskqueue.TaskQueue.CreateRecruiter:input_type -> taskqueue.Recruiter
	32, // 29: taskqueue.TaskQueue.UpdateRecruiter:input_type -> taskqueue.RecruiterUpdate
	30, // 30: taskqueue.TaskQueue.DeleteRecruiter:input_type -> taskqueue.RecruiterId
	0,  // 31: taskqueue.TaskQueue.SubmitTask:output_type -> taskqueue.TaskResponse
	13, // 32: taskqueue.TaskQueue.RegisterWorker:output_type -> taskqueue.WorkerId
	9,  // 33: taskqueue.TaskQueue.PingAndTakeNewTasks:output_type -> taskqueue.TaskListAndOther
	15, // 34: taskqueue.TaskQueue.UpdateTaskStatus:output_type -> taskqueue.Ack
	15, // 35: taskqueue.TaskQueue.SendTaskLogs:output_type -> taskqueue.Ack
	11, // 36: taskqueue.TaskQueue.StreamTaskLogs:output_type -> taskqueue.TaskLog
	3,  // 37: taskqueue.TaskQueue.ListTasks:output_type -> taskqueue.TaskList
	5,  // 38: taskqueue.TaskQueue.ListWorkers:output_type -> taskqueue.WorkersList
	14, // 39: taskqueue.TaskQueue.CreateWorker:output_type -> taskqueue.WorkerIds
	15, // 40: taskqueue.TaskQueue.DeleteWorker:output_type -> taskqueue.Ack
	20, // 41: taskqueue.TaskQueue.ListFlavors:output_type -> taskqueue.FlavorsList
	21, // 42: taskqueue.TaskQueue.GetRcloneConfig:output_type -> taskqueue.RcloneConfig
	23, // 43: taskqueue.TaskQueue.Login:output_type -> taskqueue.LoginResponse
	15, // 44: taskqueue.TaskQueue.CreateUser:output_type -> taskqueue.Ack
	27, // 45: taskqueue.TaskQueue.ListUsers:output_type -> taskqueue.UsersList
	15, // 46: taskqueue.TaskQueue.DeleteUser:output_type -> taskqueue.Ack
	15, // 47: taskqueue.TaskQueue.UpdateUser:output_type -> taskqueue.Ack
	15, // 48: taskqueue.TaskQueue.ChangePassword:output_type -> taskqueue.Ack
	33, // 49: taskqueue.TaskQueue.ListRecruiters:output_type -> taskqueue.RecruiterList
	15, // 50: taskqueue.TaskQueue.CreateRecruiter:output_type -> taskqueue.Ack
	15, // 51: taskqueue.TaskQueue.UpdateRecruiter:output_type -> taskqueue.Ack
	15, // 52: taskqueue.TaskQueue.DeleteRecruiter:output_type -> taskqueue.Ack
	31, // [31:53] is the sub-list for method output_type
	9,  // [9:31] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_taskqueue_proto_init() }
func file_taskqueue_proto_init() {
	if File_taskqueue_proto != nil {
		return
	}
	file_taskqueue_proto_msgTypes[1].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[2].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[16].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[26].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[29].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[32].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_taskqueue_proto_rawDesc), len(file_taskqueue_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taskqueue_proto_goTypes,
		DependencyIndexes: file_taskqueue_proto_depIdxs,
		MessageInfos:      file_taskqueue_proto_msgTypes,
	}.Build()
	File_taskqueue_proto = out.File
	file_taskqueue_proto_goTypes = nil
	file_taskqueue_proto_depIdxs = nil
}
