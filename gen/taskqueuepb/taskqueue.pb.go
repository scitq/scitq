// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.1
// source: taskqueue.proto

package taskqueuepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_taskqueue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{0}
}

func (x *TaskResponse) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Concurrency   *int32                 `protobuf:"varint,2,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	IsPermanent   *bool                  `protobuf:"varint,3,opt,name=is_permanent,json=isPermanent,proto3,oneof" json:"is_permanent,omitempty"`
	Provider      *string                `protobuf:"bytes,4,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	Region        *string                `protobuf:"bytes,5,opt,name=region,proto3,oneof" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_taskqueue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerInfo) GetConcurrency() int32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *WorkerInfo) GetIsPermanent() bool {
	if x != nil && x.IsPermanent != nil {
		return *x.IsPermanent
	}
	return false
}

func (x *WorkerInfo) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *WorkerInfo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type TaskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Command          string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Shell            *string                `protobuf:"bytes,2,opt,name=shell,proto3,oneof" json:"shell,omitempty"`
	Container        string                 `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
	ContainerOptions *string                `protobuf:"bytes,4,opt,name=container_options,json=containerOptions,proto3,oneof" json:"container_options,omitempty"`
	StepId           *int32                 `protobuf:"varint,5,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	Input            []string               `protobuf:"bytes,6,rep,name=input,proto3" json:"input,omitempty"`
	Resource         []string               `protobuf:"bytes,7,rep,name=resource,proto3" json:"resource,omitempty"`
	Output           *string                `protobuf:"bytes,8,opt,name=output,proto3,oneof" json:"output,omitempty"`
	Retry            *int32                 `protobuf:"varint,9,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
	IsFinal          *bool                  `protobuf:"varint,10,opt,name=is_final,json=isFinal,proto3,oneof" json:"is_final,omitempty"`
	UsesCache        *bool                  `protobuf:"varint,11,opt,name=uses_cache,json=usesCache,proto3,oneof" json:"uses_cache,omitempty"`
	DownloadTimeout  *float32               `protobuf:"fixed32,12,opt,name=download_timeout,json=downloadTimeout,proto3,oneof" json:"download_timeout,omitempty"`
	RunningTimeout   *float32               `protobuf:"fixed32,13,opt,name=running_timeout,json=runningTimeout,proto3,oneof" json:"running_timeout,omitempty"`
	UploadTimeout    *float32               `protobuf:"fixed32,14,opt,name=upload_timeout,json=uploadTimeout,proto3,oneof" json:"upload_timeout,omitempty"`
	Status           string                 `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	Dependency       []int32                `protobuf:"varint,16,rep,packed,name=dependency,proto3" json:"dependency,omitempty"` // IDs of tasks that this task depends on
	TaskName         *string                `protobuf:"bytes,17,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	mi := &file_taskqueue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *TaskRequest) GetShell() string {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return ""
}

func (x *TaskRequest) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *TaskRequest) GetContainerOptions() string {
	if x != nil && x.ContainerOptions != nil {
		return *x.ContainerOptions
	}
	return ""
}

func (x *TaskRequest) GetStepId() int32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

func (x *TaskRequest) GetInput() []string {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TaskRequest) GetResource() []string {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TaskRequest) GetOutput() string {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return ""
}

func (x *TaskRequest) GetRetry() int32 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

func (x *TaskRequest) GetIsFinal() bool {
	if x != nil && x.IsFinal != nil {
		return *x.IsFinal
	}
	return false
}

func (x *TaskRequest) GetUsesCache() bool {
	if x != nil && x.UsesCache != nil {
		return *x.UsesCache
	}
	return false
}

func (x *TaskRequest) GetDownloadTimeout() float32 {
	if x != nil && x.DownloadTimeout != nil {
		return *x.DownloadTimeout
	}
	return 0
}

func (x *TaskRequest) GetRunningTimeout() float32 {
	if x != nil && x.RunningTimeout != nil {
		return *x.RunningTimeout
	}
	return 0
}

func (x *TaskRequest) GetUploadTimeout() float32 {
	if x != nil && x.UploadTimeout != nil {
		return *x.UploadTimeout
	}
	return 0
}

func (x *TaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskRequest) GetDependency() []int32 {
	if x != nil {
		return x.Dependency
	}
	return nil
}

func (x *TaskRequest) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

type Task struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TaskId           int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Command          string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Shell            *string                `protobuf:"bytes,3,opt,name=shell,proto3,oneof" json:"shell,omitempty"`
	Container        string                 `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	ContainerOptions *string                `protobuf:"bytes,5,opt,name=container_options,json=containerOptions,proto3,oneof" json:"container_options,omitempty"`
	StepId           *int32                 `protobuf:"varint,6,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	Input            []string               `protobuf:"bytes,7,rep,name=input,proto3" json:"input,omitempty"`
	Resource         []string               `protobuf:"bytes,8,rep,name=resource,proto3" json:"resource,omitempty"`
	Output           *string                `protobuf:"bytes,9,opt,name=output,proto3,oneof" json:"output,omitempty"`
	Retry            *int32                 `protobuf:"varint,10,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
	IsFinal          *bool                  `protobuf:"varint,11,opt,name=is_final,json=isFinal,proto3,oneof" json:"is_final,omitempty"`
	UsesCache        *bool                  `protobuf:"varint,12,opt,name=uses_cache,json=usesCache,proto3,oneof" json:"uses_cache,omitempty"`
	DownloadTimeout  *float32               `protobuf:"fixed32,13,opt,name=download_timeout,json=downloadTimeout,proto3,oneof" json:"download_timeout,omitempty"`
	RunningTimeout   *float32               `protobuf:"fixed32,14,opt,name=running_timeout,json=runningTimeout,proto3,oneof" json:"running_timeout,omitempty"`
	UploadTimeout    *float32               `protobuf:"fixed32,15,opt,name=upload_timeout,json=uploadTimeout,proto3,oneof" json:"upload_timeout,omitempty"`
	Status           string                 `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	WorkerId         *int32                 `protobuf:"varint,17,opt,name=worker_id,json=workerId,proto3,oneof" json:"worker_id,omitempty"`
	WorkflowId       *int32                 `protobuf:"varint,18,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	TaskName         *string                `protobuf:"bytes,19,opt,name=task_name,json=taskName,proto3,oneof" json:"task_name,omitempty"`
	RetryCount       int32                  `protobuf:"varint,20,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Hidden           bool                   `protobuf:"varint,21,opt,name=hidden,proto3" json:"hidden,omitempty"`
	PreviousTaskId   *int32                 `protobuf:"varint,22,opt,name=previous_task_id,json=previousTaskId,proto3,oneof" json:"previous_task_id,omitempty"`
	Weight           *float64               `protobuf:"fixed64,23,opt,name=weight,proto3,oneof" json:"weight,omitempty"` // Fraction of the assigned worker's concurrency consumed by this task (default 1.0)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_taskqueue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Task) GetShell() string {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return ""
}

func (x *Task) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *Task) GetContainerOptions() string {
	if x != nil && x.ContainerOptions != nil {
		return *x.ContainerOptions
	}
	return ""
}

func (x *Task) GetStepId() int32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

func (x *Task) GetInput() []string {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Task) GetResource() []string {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Task) GetOutput() string {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return ""
}

func (x *Task) GetRetry() int32 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

func (x *Task) GetIsFinal() bool {
	if x != nil && x.IsFinal != nil {
		return *x.IsFinal
	}
	return false
}

func (x *Task) GetUsesCache() bool {
	if x != nil && x.UsesCache != nil {
		return *x.UsesCache
	}
	return false
}

func (x *Task) GetDownloadTimeout() float32 {
	if x != nil && x.DownloadTimeout != nil {
		return *x.DownloadTimeout
	}
	return 0
}

func (x *Task) GetRunningTimeout() float32 {
	if x != nil && x.RunningTimeout != nil {
		return *x.RunningTimeout
	}
	return 0
}

func (x *Task) GetUploadTimeout() float32 {
	if x != nil && x.UploadTimeout != nil {
		return *x.UploadTimeout
	}
	return 0
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetWorkerId() int32 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *Task) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *Task) GetTaskName() string {
	if x != nil && x.TaskName != nil {
		return *x.TaskName
	}
	return ""
}

func (x *Task) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *Task) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Task) GetPreviousTaskId() int32 {
	if x != nil && x.PreviousTaskId != nil {
		return *x.PreviousTaskId
	}
	return 0
}

func (x *Task) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type TaskList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	mi := &file_taskqueue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{4}
}

func (x *TaskList) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Worker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      int32                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Concurrency   int32                  `protobuf:"varint,3,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      int32                  `protobuf:"varint,4,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Ipv4          string                 `protobuf:"bytes,6,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6          string                 `protobuf:"bytes,7,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Flavor        string                 `protobuf:"bytes,8,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Provider      string                 `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
	Region        string                 `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`
	StepId        *int32                 `protobuf:"varint,11,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	StepName      *string                `protobuf:"bytes,12,opt,name=step_name,json=stepName,proto3,oneof" json:"step_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_taskqueue_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{5}
}

func (x *Worker) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Worker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Worker) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Worker) GetPrefetch() int32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *Worker) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Worker) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *Worker) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *Worker) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *Worker) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Worker) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Worker) GetStepId() int32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

func (x *Worker) GetStepName() string {
	if x != nil && x.StepName != nil {
		return *x.StepName
	}
	return ""
}

type WorkersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workers       []*Worker              `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkersList) Reset() {
	*x = WorkersList{}
	mi := &file_taskqueue_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkersList) ProtoMessage() {}

func (x *WorkersList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkersList.ProtoReflect.Descriptor instead.
func (*WorkersList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{6}
}

func (x *WorkersList) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

type ListWorkersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    *int32                 `protobuf:"varint,1,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersRequest) Reset() {
	*x = ListWorkersRequest{}
	mi := &file_taskqueue_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersRequest) ProtoMessage() {}

func (x *ListWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{7}
}

func (x *ListWorkersRequest) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

type TaskUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Weight        float64                `protobuf:"fixed64,1,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdate) Reset() {
	*x = TaskUpdate{}
	mi := &file_taskqueue_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdate) ProtoMessage() {}

func (x *TaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdate.ProtoReflect.Descriptor instead.
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{8}
}

func (x *TaskUpdate) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type TaskUpdateList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       map[int32]*TaskUpdate  `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // optional — can be empty
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdateList) Reset() {
	*x = TaskUpdateList{}
	mi := &file_taskqueue_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateList) ProtoMessage() {}

func (x *TaskUpdateList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateList.ProtoReflect.Descriptor instead.
func (*TaskUpdateList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{9}
}

func (x *TaskUpdateList) GetUpdates() map[int32]*TaskUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TaskListAndOther struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Concurrency   int32                  `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Updates       *TaskUpdateList        `protobuf:"bytes,3,opt,name=updates,proto3" json:"updates,omitempty"`
	ActiveTasks   []int32                `protobuf:"varint,4,rep,packed,name=active_tasks,json=activeTasks,proto3" json:"active_tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskListAndOther) Reset() {
	*x = TaskListAndOther{}
	mi := &file_taskqueue_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListAndOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListAndOther) ProtoMessage() {}

func (x *TaskListAndOther) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListAndOther.ProtoReflect.Descriptor instead.
func (*TaskListAndOther) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{10}
}

func (x *TaskListAndOther) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskListAndOther) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *TaskListAndOther) GetUpdates() *TaskUpdateList {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *TaskListAndOther) GetActiveTasks() []int32 {
	if x != nil {
		return x.ActiveTasks
	}
	return nil
}

type TaskStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NewStatus     string                 `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	Duration      *int32                 `protobuf:"varint,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`                    // in seconds
	FreeRetry     *bool                  `protobuf:"varint,4,opt,name=free_retry,json=freeRetry,proto3,oneof" json:"free_retry,omitempty"` // if new_status is F and this is true, then retry is increased by 1 before setting status to F
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusUpdate) Reset() {
	*x = TaskStatusUpdate{}
	mi := &file_taskqueue_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusUpdate) ProtoMessage() {}

func (x *TaskStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusUpdate.ProtoReflect.Descriptor instead.
func (*TaskStatusUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{11}
}

func (x *TaskStatusUpdate) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskStatusUpdate) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *TaskStatusUpdate) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *TaskStatusUpdate) GetFreeRetry() bool {
	if x != nil && x.FreeRetry != nil {
		return *x.FreeRetry
	}
	return false
}

type TaskLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	LogType       string                 `protobuf:"bytes,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"` // 'O' for stdout, 'E' for stderr
	LogText       string                 `protobuf:"bytes,3,opt,name=log_text,json=logText,proto3" json:"log_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskLog) Reset() {
	*x = TaskLog{}
	mi := &file_taskqueue_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLog) ProtoMessage() {}

func (x *TaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLog.ProtoReflect.Descriptor instead.
func (*TaskLog) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{12}
}

func (x *TaskLog) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLog) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

func (x *TaskLog) GetLogText() string {
	if x != nil {
		return x.LogText
	}
	return ""
}

type GetLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskIds       []int32                `protobuf:"varint,1,rep,packed,name=taskIds,proto3" json:"taskIds,omitempty"`
	ChunkSize     int32                  `protobuf:"varint,2,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	SkipFromEnd   *int32                 `protobuf:"varint,3,opt,name=skipFromEnd,proto3,oneof" json:"skipFromEnd,omitempty"`
	LogType       *string                `protobuf:"bytes,4,opt,name=log_type,json=logType,proto3,oneof" json:"log_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogsRequest) Reset() {
	*x = GetLogsRequest{}
	mi := &file_taskqueue_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsRequest) ProtoMessage() {}

func (x *GetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsRequest.ProtoReflect.Descriptor instead.
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{13}
}

func (x *GetLogsRequest) GetTaskIds() []int32 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *GetLogsRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *GetLogsRequest) GetSkipFromEnd() int32 {
	if x != nil && x.SkipFromEnd != nil {
		return *x.SkipFromEnd
	}
	return 0
}

func (x *GetLogsRequest) GetLogType() string {
	if x != nil && x.LogType != nil {
		return *x.LogType
	}
	return ""
}

type LogChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Stdout        []string               `protobuf:"bytes,2,rep,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        []string               `protobuf:"bytes,3,rep,name=stderr,proto3" json:"stderr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogChunk) Reset() {
	*x = LogChunk{}
	mi := &file_taskqueue_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogChunk) ProtoMessage() {}

func (x *LogChunk) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogChunk.ProtoReflect.Descriptor instead.
func (*LogChunk) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{14}
}

func (x *LogChunk) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *LogChunk) GetStdout() []string {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *LogChunk) GetStderr() []string {
	if x != nil {
		return x.Stderr
	}
	return nil
}

type LogChunkList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logs          []*LogChunk            `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogChunkList) Reset() {
	*x = LogChunkList{}
	mi := &file_taskqueue_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogChunkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogChunkList) ProtoMessage() {}

func (x *LogChunkList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogChunkList.ProtoReflect.Descriptor instead.
func (*LogChunkList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{15}
}

func (x *LogChunkList) GetLogs() []*LogChunk {
	if x != nil {
		return x.Logs
	}
	return nil
}

type TaskIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskIds       []int32                `protobuf:"varint,1,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskIds) Reset() {
	*x = TaskIds{}
	mi := &file_taskqueue_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIds) ProtoMessage() {}

func (x *TaskIds) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIds.ProtoReflect.Descriptor instead.
func (*TaskIds) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{16}
}

func (x *TaskIds) GetTaskIds() []int32 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type TaskId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskId) Reset() {
	*x = TaskId{}
	mi := &file_taskqueue_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskId) ProtoMessage() {}

func (x *TaskId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskId.ProtoReflect.Descriptor instead.
func (*TaskId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{17}
}

func (x *TaskId) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type WorkerId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      int32                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerId) Reset() {
	*x = WorkerId{}
	mi := &file_taskqueue_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerId) ProtoMessage() {}

func (x *WorkerId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerId.ProtoReflect.Descriptor instead.
func (*WorkerId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{18}
}

func (x *WorkerId) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

type WorkerDeletion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      int32                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Undeployed    *bool                  `protobuf:"varint,2,opt,name=undeployed,proto3,oneof" json:"undeployed,omitempty"` // if true, the worker is already undeployed so deletion can proceed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerDeletion) Reset() {
	*x = WorkerDeletion{}
	mi := &file_taskqueue_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeletion) ProtoMessage() {}

func (x *WorkerDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeletion.ProtoReflect.Descriptor instead.
func (*WorkerDeletion) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{19}
}

func (x *WorkerDeletion) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerDeletion) GetUndeployed() bool {
	if x != nil && x.Undeployed != nil {
		return *x.Undeployed
	}
	return false
}

type WorkerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerIds     []int32                `protobuf:"varint,1,rep,packed,name=worker_ids,json=workerIds,proto3" json:"worker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatusRequest) Reset() {
	*x = WorkerStatusRequest{}
	mi := &file_taskqueue_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusRequest) ProtoMessage() {}

func (x *WorkerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatusRequest.ProtoReflect.Descriptor instead.
func (*WorkerStatusRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{20}
}

func (x *WorkerStatusRequest) GetWorkerIds() []int32 {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

type WorkerStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      int32                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatus) Reset() {
	*x = WorkerStatus{}
	mi := &file_taskqueue_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatus) ProtoMessage() {}

func (x *WorkerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatus.ProtoReflect.Descriptor instead.
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{21}
}

func (x *WorkerStatus) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type WorkerStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statuses      []*WorkerStatus        `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatusResponse) Reset() {
	*x = WorkerStatusResponse{}
	mi := &file_taskqueue_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusResponse) ProtoMessage() {}

func (x *WorkerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatusResponse.ProtoReflect.Descriptor instead.
func (*WorkerStatusResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{22}
}

func (x *WorkerStatusResponse) GetStatuses() []*WorkerStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type WorkerDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      int32                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	WorkerName    string                 `protobuf:"bytes,2,opt,name=worker_name,json=workerName,proto3" json:"worker_name,omitempty"`
	JobId         int32                  `protobuf:"varint,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerDetails) Reset() {
	*x = WorkerDetails{}
	mi := &file_taskqueue_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDetails) ProtoMessage() {}

func (x *WorkerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDetails.ProtoReflect.Descriptor instead.
func (*WorkerDetails) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{23}
}

func (x *WorkerDetails) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerDetails) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *WorkerDetails) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type WorkerIds struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkersDetails []*WorkerDetails       `protobuf:"bytes,1,rep,name=workers_details,json=workersDetails,proto3" json:"workers_details,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerIds) Reset() {
	*x = WorkerIds{}
	mi := &file_taskqueue_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIds) ProtoMessage() {}

func (x *WorkerIds) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIds.ProtoReflect.Descriptor instead.
func (*WorkerIds) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{24}
}

func (x *WorkerIds) GetWorkersDetails() []*WorkerDetails {
	if x != nil {
		return x.WorkersDetails
	}
	return nil
}

type PingAndGetNewTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      int32                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Stats         *WorkerStats           `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"` // Optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingAndGetNewTasksRequest) Reset() {
	*x = PingAndGetNewTasksRequest{}
	mi := &file_taskqueue_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingAndGetNewTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingAndGetNewTasksRequest) ProtoMessage() {}

func (x *PingAndGetNewTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingAndGetNewTasksRequest.ProtoReflect.Descriptor instead.
func (*PingAndGetNewTasksRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{25}
}

func (x *PingAndGetNewTasksRequest) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *PingAndGetNewTasksRequest) GetStats() *WorkerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_taskqueue_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{26}
}

func (x *Ack) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListTasksRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	StatusFilter     *string                `protobuf:"bytes,1,opt,name=status_filter,json=statusFilter,proto3,oneof" json:"status_filter,omitempty"`
	WorkerIdFilter   *int32                 `protobuf:"varint,2,opt,name=worker_id_filter,json=workerIdFilter,proto3,oneof" json:"worker_id_filter,omitempty"`
	WorkflowIdFilter *int32                 `protobuf:"varint,3,opt,name=workflow_id_filter,json=workflowIdFilter,proto3,oneof" json:"workflow_id_filter,omitempty"`
	StepIdFilter     *int32                 `protobuf:"varint,4,opt,name=step_id_filter,json=stepIdFilter,proto3,oneof" json:"step_id_filter,omitempty"`
	CommandFilter    *string                `protobuf:"bytes,5,opt,name=command_filter,json=commandFilter,proto3,oneof" json:"command_filter,omitempty"`
	Limit            *int32                 `protobuf:"varint,6,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset           *int32                 `protobuf:"varint,7,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	ShowHidden       *bool                  `protobuf:"varint,8,opt,name=show_hidden,json=showHidden,proto3,oneof" json:"show_hidden,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_taskqueue_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{27}
}

func (x *ListTasksRequest) GetStatusFilter() string {
	if x != nil && x.StatusFilter != nil {
		return *x.StatusFilter
	}
	return ""
}

func (x *ListTasksRequest) GetWorkerIdFilter() int32 {
	if x != nil && x.WorkerIdFilter != nil {
		return *x.WorkerIdFilter
	}
	return 0
}

func (x *ListTasksRequest) GetWorkflowIdFilter() int32 {
	if x != nil && x.WorkflowIdFilter != nil {
		return *x.WorkflowIdFilter
	}
	return 0
}

func (x *ListTasksRequest) GetStepIdFilter() int32 {
	if x != nil && x.StepIdFilter != nil {
		return *x.StepIdFilter
	}
	return 0
}

func (x *ListTasksRequest) GetCommandFilter() string {
	if x != nil && x.CommandFilter != nil {
		return *x.CommandFilter
	}
	return ""
}

func (x *ListTasksRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListTasksRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListTasksRequest) GetShowHidden() bool {
	if x != nil && x.ShowHidden != nil {
		return *x.ShowHidden
	}
	return false
}

type WorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProviderId    int32                  `protobuf:"varint,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	FlavorId      int32                  `protobuf:"varint,2,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	RegionId      int32                  `protobuf:"varint,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Number        int32                  `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	Concurrency   int32                  `protobuf:"varint,5,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Prefetch      int32                  `protobuf:"varint,6,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	StepId        *int32                 `protobuf:"varint,7,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerRequest) Reset() {
	*x = WorkerRequest{}
	mi := &file_taskqueue_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRequest) ProtoMessage() {}

func (x *WorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRequest.ProtoReflect.Descriptor instead.
func (*WorkerRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{28}
}

func (x *WorkerRequest) GetProviderId() int32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *WorkerRequest) GetFlavorId() int32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *WorkerRequest) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *WorkerRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *WorkerRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *WorkerRequest) GetPrefetch() int32 {
	if x != nil {
		return x.Prefetch
	}
	return 0
}

func (x *WorkerRequest) GetStepId() int32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

type WorkerUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      int32                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ProviderId    *int32                 `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	FlavorId      *int32                 `protobuf:"varint,3,opt,name=flavor_id,json=flavorId,proto3,oneof" json:"flavor_id,omitempty"`
	RegionId      *int32                 `protobuf:"varint,4,opt,name=region_id,json=regionId,proto3,oneof" json:"region_id,omitempty"`
	Concurrency   *int32                 `protobuf:"varint,5,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	Prefetch      *int32                 `protobuf:"varint,6,opt,name=prefetch,proto3,oneof" json:"prefetch,omitempty"`
	StepId        *int32                 `protobuf:"varint,7,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerUpdateRequest) Reset() {
	*x = WorkerUpdateRequest{}
	mi := &file_taskqueue_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerUpdateRequest) ProtoMessage() {}

func (x *WorkerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerUpdateRequest.ProtoReflect.Descriptor instead.
func (*WorkerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{29}
}

func (x *WorkerUpdateRequest) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetFlavorId() int32 {
	if x != nil && x.FlavorId != nil {
		return *x.FlavorId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetRegionId() int32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *WorkerUpdateRequest) GetConcurrency() int32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *WorkerUpdateRequest) GetPrefetch() int32 {
	if x != nil && x.Prefetch != nil {
		return *x.Prefetch
	}
	return 0
}

func (x *WorkerUpdateRequest) GetStepId() int32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

type ListFlavorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter        string                 `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFlavorsRequest) Reset() {
	*x = ListFlavorsRequest{}
	mi := &file_taskqueue_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlavorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlavorsRequest) ProtoMessage() {}

func (x *ListFlavorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlavorsRequest.ProtoReflect.Descriptor instead.
func (*ListFlavorsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{30}
}

func (x *ListFlavorsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFlavorsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type Flavor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields from the "flavor" table
	FlavorId      int32   `protobuf:"varint,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`                   // PRIMARY KEY
	FlavorName    string  `protobuf:"bytes,2,opt,name=flavor_name,json=flavorName,proto3" json:"flavor_name,omitempty"`              // Name of the flavor
	ProviderId    int32   `protobuf:"varint,3,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`             // Foreign key to provider table
	Provider      string  `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`                                    // Name of the provider (provider_name.config_name)
	Cpu           int32   `protobuf:"varint,5,opt,name=cpu,proto3" json:"cpu,omitempty"`                                             // Number of CPU cores
	Mem           float32 `protobuf:"fixed32,6,opt,name=mem,proto3" json:"mem,omitempty"`                                            // Memory in GB (or as needed)
	Disk          float32 `protobuf:"fixed32,7,opt,name=disk,proto3" json:"disk,omitempty"`                                          // Disk size in GB (or as needed)
	Bandwidth     int32   `protobuf:"varint,8,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`                                 // Bandwidth (if applicable)
	Gpu           string  `protobuf:"bytes,9,opt,name=gpu,proto3" json:"gpu,omitempty"`                                              // GPU description
	Gpumem        int32   `protobuf:"varint,10,opt,name=gpumem,proto3" json:"gpumem,omitempty"`                                      // GPU memory (in GB, for example)
	HasGpu        bool    `protobuf:"varint,11,opt,name=has_gpu,json=hasGpu,proto3" json:"has_gpu,omitempty"`                        // Whether a GPU is present
	HasQuickDisks bool    `protobuf:"varint,12,opt,name=has_quick_disks,json=hasQuickDisks,proto3" json:"has_quick_disks,omitempty"` // Whether quick disks are supported
	// Fields from the "flavor_region" table
	RegionId      int32   `protobuf:"varint,13,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"` // Foreign key to region table
	Region        string  `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`                      // (Optional) Region name
	Eviction      float32 `protobuf:"fixed32,15,opt,name=eviction,proto3" json:"eviction,omitempty"`                // Eviction rate value
	Cost          float32 `protobuf:"fixed32,16,opt,name=cost,proto3" json:"cost,omitempty"`                        // Cost value
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flavor) Reset() {
	*x = Flavor{}
	mi := &file_taskqueue_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavor) ProtoMessage() {}

func (x *Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavor.ProtoReflect.Descriptor instead.
func (*Flavor) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{31}
}

func (x *Flavor) GetFlavorId() int32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *Flavor) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *Flavor) GetProviderId() int32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *Flavor) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Flavor) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Flavor) GetMem() float32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Flavor) GetDisk() float32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *Flavor) GetBandwidth() int32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Flavor) GetGpu() string {
	if x != nil {
		return x.Gpu
	}
	return ""
}

func (x *Flavor) GetGpumem() int32 {
	if x != nil {
		return x.Gpumem
	}
	return 0
}

func (x *Flavor) GetHasGpu() bool {
	if x != nil {
		return x.HasGpu
	}
	return false
}

func (x *Flavor) GetHasQuickDisks() bool {
	if x != nil {
		return x.HasQuickDisks
	}
	return false
}

func (x *Flavor) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Flavor) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Flavor) GetEviction() float32 {
	if x != nil {
		return x.Eviction
	}
	return 0
}

func (x *Flavor) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type FlavorsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flavors       []*Flavor              `protobuf:"bytes,1,rep,name=flavors,proto3" json:"flavors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlavorsList) Reset() {
	*x = FlavorsList{}
	mi := &file_taskqueue_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlavorsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavorsList) ProtoMessage() {}

func (x *FlavorsList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavorsList.ProtoReflect.Descriptor instead.
func (*FlavorsList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{32}
}

func (x *FlavorsList) GetFlavors() []*Flavor {
	if x != nil {
		return x.Flavors
	}
	return nil
}

type ListJobsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         *int32                 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset        *int32                 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJobsRequest) Reset() {
	*x = ListJobsRequest{}
	mi := &file_taskqueue_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsRequest) ProtoMessage() {}

func (x *ListJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsRequest.ProtoReflect.Descriptor instead.
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{33}
}

func (x *ListJobsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListJobsRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int32                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	FlavorId      int32                  `protobuf:"varint,3,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	Retry         int32                  `protobuf:"varint,4,opt,name=retry,proto3" json:"retry,omitempty"`
	WorkerId      int32                  `protobuf:"varint,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Action        string                 `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt    string                 `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	Progression   int32                  `protobuf:"varint,9,opt,name=progression,proto3" json:"progression,omitempty"`
	Log           string                 `protobuf:"bytes,10,opt,name=log,proto3" json:"log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_taskqueue_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{34}
}

func (x *Job) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *Job) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Job) GetFlavorId() int32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

func (x *Job) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *Job) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Job) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Job) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Job) GetModifiedAt() string {
	if x != nil {
		return x.ModifiedAt
	}
	return ""
}

func (x *Job) GetProgression() int32 {
	if x != nil {
		return x.Progression
	}
	return 0
}

func (x *Job) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type JobId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int32                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobId) Reset() {
	*x = JobId{}
	mi := &file_taskqueue_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobId) ProtoMessage() {}

func (x *JobId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobId.ProtoReflect.Descriptor instead.
func (*JobId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{35}
}

func (x *JobId) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type JobsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jobs          []*Job                 `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobsList) Reset() {
	*x = JobsList{}
	mi := &file_taskqueue_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobsList) ProtoMessage() {}

func (x *JobsList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobsList.ProtoReflect.Descriptor instead.
func (*JobsList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{36}
}

func (x *JobsList) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobIds        []int32                `protobuf:"varint,1,rep,packed,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobStatusRequest) Reset() {
	*x = JobStatusRequest{}
	mi := &file_taskqueue_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusRequest) ProtoMessage() {}

func (x *JobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusRequest.ProtoReflect.Descriptor instead.
func (*JobStatusRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{37}
}

func (x *JobStatusRequest) GetJobIds() []int32 {
	if x != nil {
		return x.JobIds
	}
	return nil
}

type JobStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int32                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Progression   int32                  `protobuf:"varint,3,opt,name=progression,proto3" json:"progression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	mi := &file_taskqueue_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{38}
}

func (x *JobStatus) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *JobStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobStatus) GetProgression() int32 {
	if x != nil {
		return x.Progression
	}
	return 0
}

type JobStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statuses      []*JobStatus           `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobStatusResponse) Reset() {
	*x = JobStatusResponse{}
	mi := &file_taskqueue_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusResponse) ProtoMessage() {}

func (x *JobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusResponse.ProtoReflect.Descriptor instead.
func (*JobStatusResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{39}
}

func (x *JobStatusResponse) GetStatuses() []*JobStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type JobUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int32                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`                  // which job to update
	Status        *string                `protobuf:"bytes,2,opt,name=status,proto3,oneof" json:"status,omitempty"`                        // 'P'|'R'|'S'|'F'|'X' (only if you want to set it)
	AppendLog     *string                `protobuf:"bytes,3,opt,name=append_log,json=appendLog,proto3,oneof" json:"append_log,omitempty"` // text appended to job.log (server prepends timestamp)
	Progression   *int32                 `protobuf:"varint,4,opt,name=progression,proto3,oneof" json:"progression,omitempty"`             // 0..100 (server clamps)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobUpdate) Reset() {
	*x = JobUpdate{}
	mi := &file_taskqueue_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobUpdate) ProtoMessage() {}

func (x *JobUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobUpdate.ProtoReflect.Descriptor instead.
func (*JobUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{40}
}

func (x *JobUpdate) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *JobUpdate) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *JobUpdate) GetAppendLog() string {
	if x != nil && x.AppendLog != nil {
		return *x.AppendLog
	}
	return ""
}

func (x *JobUpdate) GetProgression() int32 {
	if x != nil && x.Progression != nil {
		return *x.Progression
	}
	return 0
}

type RcloneConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        string                 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RcloneConfig) Reset() {
	*x = RcloneConfig{}
	mi := &file_taskqueue_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RcloneConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcloneConfig) ProtoMessage() {}

func (x *RcloneConfig) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcloneConfig.ProtoReflect.Descriptor instead.
func (*RcloneConfig) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{41}
}

func (x *RcloneConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type DockerCredential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Registry      string                 `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"` // e.g., "3jfz1gy8.gra7.container-registry.ovh.net"
	Auth          string                 `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`         // auth string as found in .docker/config.json
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerCredential) Reset() {
	*x = DockerCredential{}
	mi := &file_taskqueue_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredential) ProtoMessage() {}

func (x *DockerCredential) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredential.ProtoReflect.Descriptor instead.
func (*DockerCredential) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{42}
}

func (x *DockerCredential) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *DockerCredential) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type DockerCredentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credentials   []*DockerCredential    `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerCredentials) Reset() {
	*x = DockerCredentials{}
	mi := &file_taskqueue_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredentials) ProtoMessage() {}

func (x *DockerCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredentials.ProtoReflect.Descriptor instead.
func (*DockerCredentials) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{43}
}

func (x *DockerCredentials) GetCredentials() []*DockerCredential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_taskqueue_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{44}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_taskqueue_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{45}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_taskqueue_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{46}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	IsAdmin       bool                   `protobuf:"varint,4,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_taskqueue_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{47}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type UserId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserId) Reset() {
	*x = UserId{}
	mi := &file_taskqueue_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{48}
}

func (x *UserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Email         *string                `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
	IsAdmin       *bool                  `protobuf:"varint,4,opt,name=is_admin,json=isAdmin,proto3,oneof" json:"is_admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_taskqueue_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{49}
}

func (x *User) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *User) GetIsAdmin() bool {
	if x != nil && x.IsAdmin != nil {
		return *x.IsAdmin
	}
	return false
}

type UsersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*User                `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsersList) Reset() {
	*x = UsersList{}
	mi := &file_taskqueue_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersList) ProtoMessage() {}

func (x *UsersList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersList.ProtoReflect.Descriptor instead.
func (*UsersList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{50}
}

func (x *UsersList) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	OldPassword   string                 `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword   string                 `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	mi := &file_taskqueue_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{51}
}

func (x *ChangePasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChangePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type RecruiterFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        *int32                 `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterFilter) Reset() {
	*x = RecruiterFilter{}
	mi := &file_taskqueue_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterFilter) ProtoMessage() {}

func (x *RecruiterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterFilter.ProtoReflect.Descriptor instead.
func (*RecruiterFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{52}
}

func (x *RecruiterFilter) GetStepId() int32 {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return 0
}

type RecruiterId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        int32                  `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank          int32                  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterId) Reset() {
	*x = RecruiterId{}
	mi := &file_taskqueue_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterId) ProtoMessage() {}

func (x *RecruiterId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterId.ProtoReflect.Descriptor instead.
func (*RecruiterId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{53}
}

func (x *RecruiterId) GetStepId() int32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *RecruiterId) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type Recruiter struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StepId          int32                  `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank            int32                  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Protofilter     string                 `protobuf:"bytes,3,opt,name=protofilter,proto3" json:"protofilter,omitempty"`
	Concurrency     *int32                 `protobuf:"varint,4,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	Prefetch        *int32                 `protobuf:"varint,5,opt,name=prefetch,proto3,oneof" json:"prefetch,omitempty"`
	MaxWorkers      *int32                 `protobuf:"varint,6,opt,name=max_workers,json=maxWorkers,proto3,oneof" json:"max_workers,omitempty"`
	Rounds          int32                  `protobuf:"varint,7,opt,name=rounds,proto3" json:"rounds,omitempty"`
	Timeout         int32                  `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	CpuPerTask      *int32                 `protobuf:"varint,9,opt,name=cpu_per_task,json=cpuPerTask,proto3,oneof" json:"cpu_per_task,omitempty"`
	MemoryPerTask   *float32               `protobuf:"fixed32,10,opt,name=memory_per_task,json=memoryPerTask,proto3,oneof" json:"memory_per_task,omitempty"`
	DiskPerTask     *float32               `protobuf:"fixed32,11,opt,name=disk_per_task,json=diskPerTask,proto3,oneof" json:"disk_per_task,omitempty"`
	PrefetchPercent *int32                 `protobuf:"varint,12,opt,name=prefetch_percent,json=prefetchPercent,proto3,oneof" json:"prefetch_percent,omitempty"`
	ConcurrencyMin  *int32                 `protobuf:"varint,13,opt,name=concurrency_min,json=concurrencyMin,proto3,oneof" json:"concurrency_min,omitempty"`
	ConcurrencyMax  *int32                 `protobuf:"varint,14,opt,name=concurrency_max,json=concurrencyMax,proto3,oneof" json:"concurrency_max,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Recruiter) Reset() {
	*x = Recruiter{}
	mi := &file_taskqueue_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recruiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recruiter) ProtoMessage() {}

func (x *Recruiter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recruiter.ProtoReflect.Descriptor instead.
func (*Recruiter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{54}
}

func (x *Recruiter) GetStepId() int32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *Recruiter) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Recruiter) GetProtofilter() string {
	if x != nil {
		return x.Protofilter
	}
	return ""
}

func (x *Recruiter) GetConcurrency() int32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *Recruiter) GetPrefetch() int32 {
	if x != nil && x.Prefetch != nil {
		return *x.Prefetch
	}
	return 0
}

func (x *Recruiter) GetMaxWorkers() int32 {
	if x != nil && x.MaxWorkers != nil {
		return *x.MaxWorkers
	}
	return 0
}

func (x *Recruiter) GetRounds() int32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

func (x *Recruiter) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Recruiter) GetCpuPerTask() int32 {
	if x != nil && x.CpuPerTask != nil {
		return *x.CpuPerTask
	}
	return 0
}

func (x *Recruiter) GetMemoryPerTask() float32 {
	if x != nil && x.MemoryPerTask != nil {
		return *x.MemoryPerTask
	}
	return 0
}

func (x *Recruiter) GetDiskPerTask() float32 {
	if x != nil && x.DiskPerTask != nil {
		return *x.DiskPerTask
	}
	return 0
}

func (x *Recruiter) GetPrefetchPercent() int32 {
	if x != nil && x.PrefetchPercent != nil {
		return *x.PrefetchPercent
	}
	return 0
}

func (x *Recruiter) GetConcurrencyMin() int32 {
	if x != nil && x.ConcurrencyMin != nil {
		return *x.ConcurrencyMin
	}
	return 0
}

func (x *Recruiter) GetConcurrencyMax() int32 {
	if x != nil && x.ConcurrencyMax != nil {
		return *x.ConcurrencyMax
	}
	return 0
}

type RecruiterUpdate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StepId          int32                  `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Rank            int32                  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Protofilter     *string                `protobuf:"bytes,3,opt,name=protofilter,proto3,oneof" json:"protofilter,omitempty"`
	Concurrency     *int32                 `protobuf:"varint,4,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	Prefetch        *int32                 `protobuf:"varint,5,opt,name=prefetch,proto3,oneof" json:"prefetch,omitempty"`
	MaxWorkers      *int32                 `protobuf:"varint,6,opt,name=max_workers,json=maxWorkers,proto3,oneof" json:"max_workers,omitempty"`
	Rounds          *int32                 `protobuf:"varint,7,opt,name=rounds,proto3,oneof" json:"rounds,omitempty"`
	Timeout         *int32                 `protobuf:"varint,8,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	CpuPerTask      *int32                 `protobuf:"varint,9,opt,name=cpu_per_task,json=cpuPerTask,proto3,oneof" json:"cpu_per_task,omitempty"`
	MemoryPerTask   *float32               `protobuf:"fixed32,10,opt,name=memory_per_task,json=memoryPerTask,proto3,oneof" json:"memory_per_task,omitempty"`
	DiskPerTask     *float32               `protobuf:"fixed32,11,opt,name=disk_per_task,json=diskPerTask,proto3,oneof" json:"disk_per_task,omitempty"`
	PrefetchPercent *int32                 `protobuf:"varint,12,opt,name=prefetch_percent,json=prefetchPercent,proto3,oneof" json:"prefetch_percent,omitempty"`
	ConcurrencyMin  *int32                 `protobuf:"varint,13,opt,name=concurrency_min,json=concurrencyMin,proto3,oneof" json:"concurrency_min,omitempty"`
	ConcurrencyMax  *int32                 `protobuf:"varint,14,opt,name=concurrency_max,json=concurrencyMax,proto3,oneof" json:"concurrency_max,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RecruiterUpdate) Reset() {
	*x = RecruiterUpdate{}
	mi := &file_taskqueue_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterUpdate) ProtoMessage() {}

func (x *RecruiterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterUpdate.ProtoReflect.Descriptor instead.
func (*RecruiterUpdate) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{55}
}

func (x *RecruiterUpdate) GetStepId() int32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *RecruiterUpdate) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RecruiterUpdate) GetProtofilter() string {
	if x != nil && x.Protofilter != nil {
		return *x.Protofilter
	}
	return ""
}

func (x *RecruiterUpdate) GetConcurrency() int32 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *RecruiterUpdate) GetPrefetch() int32 {
	if x != nil && x.Prefetch != nil {
		return *x.Prefetch
	}
	return 0
}

func (x *RecruiterUpdate) GetMaxWorkers() int32 {
	if x != nil && x.MaxWorkers != nil {
		return *x.MaxWorkers
	}
	return 0
}

func (x *RecruiterUpdate) GetRounds() int32 {
	if x != nil && x.Rounds != nil {
		return *x.Rounds
	}
	return 0
}

func (x *RecruiterUpdate) GetTimeout() int32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *RecruiterUpdate) GetCpuPerTask() int32 {
	if x != nil && x.CpuPerTask != nil {
		return *x.CpuPerTask
	}
	return 0
}

func (x *RecruiterUpdate) GetMemoryPerTask() float32 {
	if x != nil && x.MemoryPerTask != nil {
		return *x.MemoryPerTask
	}
	return 0
}

func (x *RecruiterUpdate) GetDiskPerTask() float32 {
	if x != nil && x.DiskPerTask != nil {
		return *x.DiskPerTask
	}
	return 0
}

func (x *RecruiterUpdate) GetPrefetchPercent() int32 {
	if x != nil && x.PrefetchPercent != nil {
		return *x.PrefetchPercent
	}
	return 0
}

func (x *RecruiterUpdate) GetConcurrencyMin() int32 {
	if x != nil && x.ConcurrencyMin != nil {
		return *x.ConcurrencyMin
	}
	return 0
}

func (x *RecruiterUpdate) GetConcurrencyMax() int32 {
	if x != nil && x.ConcurrencyMax != nil {
		return *x.ConcurrencyMax
	}
	return 0
}

type RecruiterList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recruiters    []*Recruiter           `protobuf:"bytes,1,rep,name=recruiters,proto3" json:"recruiters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecruiterList) Reset() {
	*x = RecruiterList{}
	mi := &file_taskqueue_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecruiterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruiterList) ProtoMessage() {}

func (x *RecruiterList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruiterList.ProtoReflect.Descriptor instead.
func (*RecruiterList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{56}
}

func (x *RecruiterList) GetRecruiters() []*Recruiter {
	if x != nil {
		return x.Recruiters
	}
	return nil
}

type WorkflowFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameLike      *string                `protobuf:"bytes,1,opt,name=name_like,json=nameLike,proto3,oneof" json:"name_like,omitempty"`
	Limit         *int32                 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset        *int32                 `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowFilter) Reset() {
	*x = WorkflowFilter{}
	mi := &file_taskqueue_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowFilter) ProtoMessage() {}

func (x *WorkflowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowFilter.ProtoReflect.Descriptor instead.
func (*WorkflowFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{57}
}

func (x *WorkflowFilter) GetNameLike() string {
	if x != nil && x.NameLike != nil {
		return *x.NameLike
	}
	return ""
}

func (x *WorkflowFilter) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *WorkflowFilter) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type WorkflowId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    int32                  `protobuf:"varint,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowId) Reset() {
	*x = WorkflowId{}
	mi := &file_taskqueue_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowId) ProtoMessage() {}

func (x *WorkflowId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowId.ProtoReflect.Descriptor instead.
func (*WorkflowId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{58}
}

func (x *WorkflowId) GetWorkflowId() int32 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

type Workflow struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId     int32                  `protobuf:"varint,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunStrategy    string                 `protobuf:"bytes,4,opt,name=run_strategy,json=runStrategy,proto3" json:"run_strategy,omitempty"`
	MaximumWorkers *int32                 `protobuf:"varint,5,opt,name=maximum_workers,json=maximumWorkers,proto3,oneof" json:"maximum_workers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_taskqueue_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{59}
}

func (x *Workflow) GetWorkflowId() int32 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetRunStrategy() string {
	if x != nil {
		return x.RunStrategy
	}
	return ""
}

func (x *Workflow) GetMaximumWorkers() int32 {
	if x != nil && x.MaximumWorkers != nil {
		return *x.MaximumWorkers
	}
	return 0
}

type WorkflowRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RunStrategy    *string                `protobuf:"bytes,2,opt,name=run_strategy,json=runStrategy,proto3,oneof" json:"run_strategy,omitempty"`
	MaximumWorkers *int32                 `protobuf:"varint,3,opt,name=maximum_workers,json=maximumWorkers,proto3,oneof" json:"maximum_workers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkflowRequest) Reset() {
	*x = WorkflowRequest{}
	mi := &file_taskqueue_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRequest) ProtoMessage() {}

func (x *WorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRequest.ProtoReflect.Descriptor instead.
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{60}
}

func (x *WorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowRequest) GetRunStrategy() string {
	if x != nil && x.RunStrategy != nil {
		return *x.RunStrategy
	}
	return ""
}

func (x *WorkflowRequest) GetMaximumWorkers() int32 {
	if x != nil && x.MaximumWorkers != nil {
		return *x.MaximumWorkers
	}
	return 0
}

type WorkflowList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workflows     []*Workflow            `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowList) Reset() {
	*x = WorkflowList{}
	mi := &file_taskqueue_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowList) ProtoMessage() {}

func (x *WorkflowList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowList.ProtoReflect.Descriptor instead.
func (*WorkflowList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{61}
}

func (x *WorkflowList) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

type StepFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    int32                  `protobuf:"varint,1,opt,name=WorkflowId,proto3" json:"WorkflowId,omitempty"`
	Limit         *int32                 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset        *int32                 `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepFilter) Reset() {
	*x = StepFilter{}
	mi := &file_taskqueue_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepFilter) ProtoMessage() {}

func (x *StepFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepFilter.ProtoReflect.Descriptor instead.
func (*StepFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{62}
}

func (x *StepFilter) GetWorkflowId() int32 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

func (x *StepFilter) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *StepFilter) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type StepId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        int32                  `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepId) Reset() {
	*x = StepId{}
	mi := &file_taskqueue_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepId) ProtoMessage() {}

func (x *StepId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepId.ProtoReflect.Descriptor instead.
func (*StepId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{63}
}

func (x *StepId) GetStepId() int32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

type Step struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        int32                  `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	WorkflowName  string                 `protobuf:"bytes,2,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	WorkflowId    int32                  `protobuf:"varint,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Step) Reset() {
	*x = Step{}
	mi := &file_taskqueue_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{64}
}

func (x *Step) GetStepId() int32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *Step) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *Step) GetWorkflowId() int32 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

func (x *Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowName  *string                `protobuf:"bytes,1,opt,name=workflow_name,json=workflowName,proto3,oneof" json:"workflow_name,omitempty"`
	WorkflowId    *int32                 `protobuf:"varint,2,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepRequest) Reset() {
	*x = StepRequest{}
	mi := &file_taskqueue_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRequest) ProtoMessage() {}

func (x *StepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRequest.ProtoReflect.Descriptor instead.
func (*StepRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{65}
}

func (x *StepRequest) GetWorkflowName() string {
	if x != nil && x.WorkflowName != nil {
		return *x.WorkflowName
	}
	return ""
}

func (x *StepRequest) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *StepRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StepList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steps         []*Step                `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepList) Reset() {
	*x = StepList{}
	mi := &file_taskqueue_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepList) ProtoMessage() {}

func (x *StepList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepList.ProtoReflect.Descriptor instead.
func (*StepList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{66}
}

func (x *StepList) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type StepStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    *int32                 `protobuf:"varint,1,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	StepIds       []int32                `protobuf:"varint,2,rep,packed,name=step_ids,json=stepIds,proto3" json:"step_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepStatsRequest) Reset() {
	*x = StepStatsRequest{}
	mi := &file_taskqueue_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepStatsRequest) ProtoMessage() {}

func (x *StepStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepStatsRequest.ProtoReflect.Descriptor instead.
func (*StepStatsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{67}
}

func (x *StepStatsRequest) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *StepStatsRequest) GetStepIds() []int32 {
	if x != nil {
		return x.StepIds
	}
	return nil
}

type Accum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // number of observations
	Sum           float32                `protobuf:"fixed32,2,opt,name=sum,proto3" json:"sum,omitempty"`    // total seconds
	Min           float32                `protobuf:"fixed32,3,opt,name=min,proto3" json:"min,omitempty"`    // minimum seconds
	Max           float32                `protobuf:"fixed32,4,opt,name=max,proto3" json:"max,omitempty"`    // maximum seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Accum) Reset() {
	*x = Accum{}
	mi := &file_taskqueue_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Accum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accum) ProtoMessage() {}

func (x *Accum) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accum.ProtoReflect.Descriptor instead.
func (*Accum) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{68}
}

func (x *Accum) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Accum) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *Accum) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Accum) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type StepStats struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	StepId            int32                  `protobuf:"varint,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	StepName          string                 `protobuf:"bytes,2,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	TotalTasks        int32                  `protobuf:"varint,3,opt,name=total_tasks,json=totalTasks,proto3" json:"total_tasks,omitempty"`
	WaitingTasks      int32                  `protobuf:"varint,4,opt,name=waiting_tasks,json=waitingTasks,proto3" json:"waiting_tasks,omitempty"`
	PendingTasks      int32                  `protobuf:"varint,5,opt,name=pending_tasks,json=pendingTasks,proto3" json:"pending_tasks,omitempty"`
	AcceptedTasks     int32                  `protobuf:"varint,6,opt,name=accepted_tasks,json=acceptedTasks,proto3" json:"accepted_tasks,omitempty"`
	RunningTasks      int32                  `protobuf:"varint,7,opt,name=running_tasks,json=runningTasks,proto3" json:"running_tasks,omitempty"`
	UploadingTasks    int32                  `protobuf:"varint,8,opt,name=uploading_tasks,json=uploadingTasks,proto3" json:"uploading_tasks,omitempty"`
	SuccessfulTasks   int32                  `protobuf:"varint,9,opt,name=successful_tasks,json=successfulTasks,proto3" json:"successful_tasks,omitempty"`
	FailedTasks       int32                  `protobuf:"varint,10,opt,name=failed_tasks,json=failedTasks,proto3" json:"failed_tasks,omitempty"`
	ReallyFailedTasks int32                  `protobuf:"varint,11,opt,name=really_failed_tasks,json=reallyFailedTasks,proto3" json:"really_failed_tasks,omitempty"` // tasks that have exhausted all retries and are failed
	SuccessRun        *Accum                 `protobuf:"bytes,12,opt,name=success_run,json=successRun,proto3" json:"success_run,omitempty"`                         // succeeded tasks' run durations
	FailedRun         *Accum                 `protobuf:"bytes,13,opt,name=failed_run,json=failedRun,proto3" json:"failed_run,omitempty"`                            // failed tasks' run durations
	RunningRun        *Accum                 `protobuf:"bytes,14,opt,name=running_run,json=runningRun,proto3" json:"running_run,omitempty"`                         // running tasks' elapsed durations (at eval time)
	Download          *Accum                 `protobuf:"bytes,15,opt,name=download,proto3" json:"download,omitempty"`                                               // download durations
	Upload            *Accum                 `protobuf:"bytes,16,opt,name=upload,proto3" json:"upload,omitempty"`                                                   // upload durations
	StartTime         *int32                 `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`                     // epoch timestamp of the first task start time
	EndTime           *int32                 `protobuf:"varint,18,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`                           // epoch timestamp of the last task end time
	StatsEvalTime     int32                  `protobuf:"varint,19,opt,name=stats_eval_time,json=statsEvalTime,proto3" json:"stats_eval_time,omitempty"`             // epoch seconds when these stats were computed
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StepStats) Reset() {
	*x = StepStats{}
	mi := &file_taskqueue_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepStats) ProtoMessage() {}

func (x *StepStats) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepStats.ProtoReflect.Descriptor instead.
func (*StepStats) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{69}
}

func (x *StepStats) GetStepId() int32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *StepStats) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *StepStats) GetTotalTasks() int32 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

func (x *StepStats) GetWaitingTasks() int32 {
	if x != nil {
		return x.WaitingTasks
	}
	return 0
}

func (x *StepStats) GetPendingTasks() int32 {
	if x != nil {
		return x.PendingTasks
	}
	return 0
}

func (x *StepStats) GetAcceptedTasks() int32 {
	if x != nil {
		return x.AcceptedTasks
	}
	return 0
}

func (x *StepStats) GetRunningTasks() int32 {
	if x != nil {
		return x.RunningTasks
	}
	return 0
}

func (x *StepStats) GetUploadingTasks() int32 {
	if x != nil {
		return x.UploadingTasks
	}
	return 0
}

func (x *StepStats) GetSuccessfulTasks() int32 {
	if x != nil {
		return x.SuccessfulTasks
	}
	return 0
}

func (x *StepStats) GetFailedTasks() int32 {
	if x != nil {
		return x.FailedTasks
	}
	return 0
}

func (x *StepStats) GetReallyFailedTasks() int32 {
	if x != nil {
		return x.ReallyFailedTasks
	}
	return 0
}

func (x *StepStats) GetSuccessRun() *Accum {
	if x != nil {
		return x.SuccessRun
	}
	return nil
}

func (x *StepStats) GetFailedRun() *Accum {
	if x != nil {
		return x.FailedRun
	}
	return nil
}

func (x *StepStats) GetRunningRun() *Accum {
	if x != nil {
		return x.RunningRun
	}
	return nil
}

func (x *StepStats) GetDownload() *Accum {
	if x != nil {
		return x.Download
	}
	return nil
}

func (x *StepStats) GetUpload() *Accum {
	if x != nil {
		return x.Upload
	}
	return nil
}

func (x *StepStats) GetStartTime() int32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *StepStats) GetEndTime() int32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *StepStats) GetStatsEvalTime() int32 {
	if x != nil {
		return x.StatsEvalTime
	}
	return 0
}

type StepStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stats         []*StepStats           `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepStatsResponse) Reset() {
	*x = StepStatsResponse{}
	mi := &file_taskqueue_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepStatsResponse) ProtoMessage() {}

func (x *StepStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepStatsResponse.ProtoReflect.Descriptor instead.
func (*StepStatsResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{70}
}

func (x *StepStatsResponse) GetStats() []*StepStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type WorkerStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CpuUsagePercent float32                `protobuf:"fixed32,1,opt,name=cpu_usage_percent,json=cpuUsagePercent,proto3" json:"cpu_usage_percent,omitempty"` // 0-100, float
	MemUsagePercent float32                `protobuf:"fixed32,2,opt,name=mem_usage_percent,json=memUsagePercent,proto3" json:"mem_usage_percent,omitempty"` // 0-100, float
	Load_1Min       float32                `protobuf:"fixed32,3,opt,name=load_1min,json=load1min,proto3" json:"load_1min,omitempty"`                        // e.g., 0.58, float
	IowaitPercent   float32                `protobuf:"fixed32,4,opt,name=iowait_percent,json=iowaitPercent,proto3" json:"iowait_percent,omitempty"`         // 0-100 float
	Disks           []*DiskUsage           `protobuf:"bytes,5,rep,name=disks,proto3" json:"disks,omitempty"`                                                // Per-disk usage
	DiskIo          *DiskIOStats           `protobuf:"bytes,6,opt,name=disk_io,json=diskIo,proto3" json:"disk_io,omitempty"`                                // Global disk IO (aggregated)
	NetIo           *NetIOStats            `protobuf:"bytes,7,opt,name=net_io,json=netIo,proto3" json:"net_io,omitempty"`                                   // Global network IO (aggregated)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorkerStats) Reset() {
	*x = WorkerStats{}
	mi := &file_taskqueue_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStats) ProtoMessage() {}

func (x *WorkerStats) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStats.ProtoReflect.Descriptor instead.
func (*WorkerStats) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{71}
}

func (x *WorkerStats) GetCpuUsagePercent() float32 {
	if x != nil {
		return x.CpuUsagePercent
	}
	return 0
}

func (x *WorkerStats) GetMemUsagePercent() float32 {
	if x != nil {
		return x.MemUsagePercent
	}
	return 0
}

func (x *WorkerStats) GetLoad_1Min() float32 {
	if x != nil {
		return x.Load_1Min
	}
	return 0
}

func (x *WorkerStats) GetIowaitPercent() float32 {
	if x != nil {
		return x.IowaitPercent
	}
	return 0
}

func (x *WorkerStats) GetDisks() []*DiskUsage {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *WorkerStats) GetDiskIo() *DiskIOStats {
	if x != nil {
		return x.DiskIo
	}
	return nil
}

func (x *WorkerStats) GetNetIo() *NetIOStats {
	if x != nil {
		return x.NetIo
	}
	return nil
}

type DiskUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceName    string                 `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`         // E.g., "/dev/sda1"
	UsagePercent  float32                `protobuf:"fixed32,2,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"` // 0-100, float
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskUsage) Reset() {
	*x = DiskUsage{}
	mi := &file_taskqueue_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskUsage) ProtoMessage() {}

func (x *DiskUsage) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskUsage.ProtoReflect.Descriptor instead.
func (*DiskUsage) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{72}
}

func (x *DiskUsage) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DiskUsage) GetUsagePercent() float32 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

type DiskIOStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReadBytesTotal  int64                  `protobuf:"varint,1,opt,name=read_bytes_total,json=readBytesTotal,proto3" json:"read_bytes_total,omitempty"`    // Total bytes read
	WriteBytesTotal int64                  `protobuf:"varint,2,opt,name=write_bytes_total,json=writeBytesTotal,proto3" json:"write_bytes_total,omitempty"` // Total bytes written
	ReadBytesRate   float32                `protobuf:"fixed32,3,opt,name=read_bytes_rate,json=readBytesRate,proto3" json:"read_bytes_rate,omitempty"`      // Bytes per second
	WriteBytesRate  float32                `protobuf:"fixed32,4,opt,name=write_bytes_rate,json=writeBytesRate,proto3" json:"write_bytes_rate,omitempty"`   // Bytes per second
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DiskIOStats) Reset() {
	*x = DiskIOStats{}
	mi := &file_taskqueue_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskIOStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskIOStats) ProtoMessage() {}

func (x *DiskIOStats) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskIOStats.ProtoReflect.Descriptor instead.
func (*DiskIOStats) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{73}
}

func (x *DiskIOStats) GetReadBytesTotal() int64 {
	if x != nil {
		return x.ReadBytesTotal
	}
	return 0
}

func (x *DiskIOStats) GetWriteBytesTotal() int64 {
	if x != nil {
		return x.WriteBytesTotal
	}
	return 0
}

func (x *DiskIOStats) GetReadBytesRate() float32 {
	if x != nil {
		return x.ReadBytesRate
	}
	return 0
}

func (x *DiskIOStats) GetWriteBytesRate() float32 {
	if x != nil {
		return x.WriteBytesRate
	}
	return 0
}

type NetIOStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecvBytesTotal int64                  `protobuf:"varint,1,opt,name=recv_bytes_total,json=recvBytesTotal,proto3" json:"recv_bytes_total,omitempty"` // Total bytes received
	SentBytesTotal int64                  `protobuf:"varint,2,opt,name=sent_bytes_total,json=sentBytesTotal,proto3" json:"sent_bytes_total,omitempty"` // Total bytes sent
	RecvBytesRate  float32                `protobuf:"fixed32,3,opt,name=recv_bytes_rate,json=recvBytesRate,proto3" json:"recv_bytes_rate,omitempty"`   // Bytes per second
	SentBytesRate  float32                `protobuf:"fixed32,4,opt,name=sent_bytes_rate,json=sentBytesRate,proto3" json:"sent_bytes_rate,omitempty"`   // Bytes per second
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetIOStats) Reset() {
	*x = NetIOStats{}
	mi := &file_taskqueue_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetIOStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetIOStats) ProtoMessage() {}

func (x *NetIOStats) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetIOStats.ProtoReflect.Descriptor instead.
func (*NetIOStats) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{74}
}

func (x *NetIOStats) GetRecvBytesTotal() int64 {
	if x != nil {
		return x.RecvBytesTotal
	}
	return 0
}

func (x *NetIOStats) GetSentBytesTotal() int64 {
	if x != nil {
		return x.SentBytesTotal
	}
	return 0
}

func (x *NetIOStats) GetRecvBytesRate() float32 {
	if x != nil {
		return x.RecvBytesRate
	}
	return 0
}

func (x *NetIOStats) GetSentBytesRate() float32 {
	if x != nil {
		return x.SentBytesRate
	}
	return 0
}

type GetWorkerStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerIds     []int32                `protobuf:"varint,1,rep,packed,name=worker_ids,json=workerIds,proto3" json:"worker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkerStatsRequest) Reset() {
	*x = GetWorkerStatsRequest{}
	mi := &file_taskqueue_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerStatsRequest) ProtoMessage() {}

func (x *GetWorkerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerStatsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkerStatsRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{75}
}

func (x *GetWorkerStatsRequest) GetWorkerIds() []int32 {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

type GetWorkerStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerStats   map[int32]*WorkerStats `protobuf:"bytes,1,rep,name=worker_stats,json=workerStats,proto3" json:"worker_stats,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkerStatsResponse) Reset() {
	*x = GetWorkerStatsResponse{}
	mi := &file_taskqueue_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerStatsResponse) ProtoMessage() {}

func (x *GetWorkerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerStatsResponse.ProtoReflect.Descriptor instead.
func (*GetWorkerStatsResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{76}
}

func (x *GetWorkerStatsResponse) GetWorkerStats() map[int32]*WorkerStats {
	if x != nil {
		return x.WorkerStats
	}
	return nil
}

type FetchListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"` // URI to fetch the list from (can include glob patterns)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchListRequest) Reset() {
	*x = FetchListRequest{}
	mi := &file_taskqueue_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchListRequest) ProtoMessage() {}

func (x *FetchListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchListRequest.ProtoReflect.Descriptor instead.
func (*FetchListRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{77}
}

func (x *FetchListRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type FetchListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []string               `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"` // Absolute paths from the given URI
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchListResponse) Reset() {
	*x = FetchListResponse{}
	mi := &file_taskqueue_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchListResponse) ProtoMessage() {}

func (x *FetchListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchListResponse.ProtoReflect.Descriptor instead.
func (*FetchListResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{78}
}

func (x *FetchListResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type FetchInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	IsFile        bool                   `protobuf:"varint,5,opt,name=is_file,json=isFile,proto3" json:"is_file,omitempty"`
	IsDir         bool                   `protobuf:"varint,6,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchInfoResponse) Reset() {
	*x = FetchInfoResponse{}
	mi := &file_taskqueue_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchInfoResponse) ProtoMessage() {}

func (x *FetchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchInfoResponse.ProtoReflect.Descriptor instead.
func (*FetchInfoResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{79}
}

func (x *FetchInfoResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *FetchInfoResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FetchInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FetchInfoResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FetchInfoResponse) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *FetchInfoResponse) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

type UploadTemplateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Script        []byte                 `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	Force         bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadTemplateRequest) Reset() {
	*x = UploadTemplateRequest{}
	mi := &file_taskqueue_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTemplateRequest) ProtoMessage() {}

func (x *UploadTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTemplateRequest.ProtoReflect.Descriptor instead.
func (*UploadTemplateRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{80}
}

func (x *UploadTemplateRequest) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *UploadTemplateRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UploadTemplateResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Success            bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message            string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WorkflowTemplateId *int32                 `protobuf:"varint,3,opt,name=workflow_template_id,json=workflowTemplateId,proto3,oneof" json:"workflow_template_id,omitempty"`
	Name               *string                `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Version            *string                `protobuf:"bytes,5,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Description        *string                `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ParamJson          *string                `protobuf:"bytes,7,opt,name=param_json,json=paramJson,proto3,oneof" json:"param_json,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UploadTemplateResponse) Reset() {
	*x = UploadTemplateResponse{}
	mi := &file_taskqueue_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTemplateResponse) ProtoMessage() {}

func (x *UploadTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTemplateResponse.ProtoReflect.Descriptor instead.
func (*UploadTemplateResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{81}
}

func (x *UploadTemplateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadTemplateResponse) GetWorkflowTemplateId() int32 {
	if x != nil && x.WorkflowTemplateId != nil {
		return *x.WorkflowTemplateId
	}
	return 0
}

func (x *UploadTemplateResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UploadTemplateResponse) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *UploadTemplateResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UploadTemplateResponse) GetParamJson() string {
	if x != nil && x.ParamJson != nil {
		return *x.ParamJson
	}
	return ""
}

type RunTemplateRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	WorkflowTemplateId int32                  `protobuf:"varint,1,opt,name=workflow_template_id,json=workflowTemplateId,proto3" json:"workflow_template_id,omitempty"`
	ParamValuesJson    string                 `protobuf:"bytes,2,opt,name=param_values_json,json=paramValuesJson,proto3" json:"param_values_json,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RunTemplateRequest) Reset() {
	*x = RunTemplateRequest{}
	mi := &file_taskqueue_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTemplateRequest) ProtoMessage() {}

func (x *RunTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTemplateRequest.ProtoReflect.Descriptor instead.
func (*RunTemplateRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{82}
}

func (x *RunTemplateRequest) GetWorkflowTemplateId() int32 {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return 0
}

func (x *RunTemplateRequest) GetParamValuesJson() string {
	if x != nil {
		return x.ParamValuesJson
	}
	return ""
}

type TemplateFilter struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	WorkflowTemplateId *int32                 `protobuf:"varint,1,opt,name=workflow_template_id,json=workflowTemplateId,proto3,oneof" json:"workflow_template_id,omitempty"`
	Name               *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Version            *string                `protobuf:"bytes,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TemplateFilter) Reset() {
	*x = TemplateFilter{}
	mi := &file_taskqueue_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateFilter) ProtoMessage() {}

func (x *TemplateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateFilter.ProtoReflect.Descriptor instead.
func (*TemplateFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{83}
}

func (x *TemplateFilter) GetWorkflowTemplateId() int32 {
	if x != nil && x.WorkflowTemplateId != nil {
		return *x.WorkflowTemplateId
	}
	return 0
}

func (x *TemplateFilter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TemplateFilter) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type Template struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	WorkflowTemplateId int32                  `protobuf:"varint,1,opt,name=workflow_template_id,json=workflowTemplateId,proto3" json:"workflow_template_id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version            string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description        string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ParamJson          string                 `protobuf:"bytes,5,opt,name=param_json,json=paramJson,proto3" json:"param_json,omitempty"`
	UploadedAt         string                 `protobuf:"bytes,6,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	UploadedBy         *int32                 `protobuf:"varint,7,opt,name=uploaded_by,json=uploadedBy,proto3,oneof" json:"uploaded_by,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Template) Reset() {
	*x = Template{}
	mi := &file_taskqueue_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{84}
}

func (x *Template) GetWorkflowTemplateId() int32 {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return 0
}

func (x *Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Template) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Template) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Template) GetParamJson() string {
	if x != nil {
		return x.ParamJson
	}
	return ""
}

func (x *Template) GetUploadedAt() string {
	if x != nil {
		return x.UploadedAt
	}
	return ""
}

func (x *Template) GetUploadedBy() int32 {
	if x != nil && x.UploadedBy != nil {
		return *x.UploadedBy
	}
	return 0
}

type TemplateList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Templates     []*Template            `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateList) Reset() {
	*x = TemplateList{}
	mi := &file_taskqueue_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateList) ProtoMessage() {}

func (x *TemplateList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateList.ProtoReflect.Descriptor instead.
func (*TemplateList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{85}
}

func (x *TemplateList) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

type TemplateRun struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TemplateRunId      int32                  `protobuf:"varint,1,opt,name=template_run_id,json=templateRunId,proto3" json:"template_run_id,omitempty"`
	WorkflowTemplateId int32                  `protobuf:"varint,2,opt,name=workflow_template_id,json=workflowTemplateId,proto3" json:"workflow_template_id,omitempty"`
	TemplateName       *string                `protobuf:"bytes,3,opt,name=template_name,json=templateName,proto3,oneof" json:"template_name,omitempty"`
	TemplateVersion    *string                `protobuf:"bytes,4,opt,name=template_version,json=templateVersion,proto3,oneof" json:"template_version,omitempty"`
	WorkflowName       *string                `protobuf:"bytes,5,opt,name=workflow_name,json=workflowName,proto3,oneof" json:"workflow_name,omitempty"`
	RunBy              *int32                 `protobuf:"varint,6,opt,name=run_by,json=runBy,proto3,oneof" json:"run_by,omitempty"`
	Status             string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	WorkflowId         *int32                 `protobuf:"varint,8,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ParamValuesJson    string                 `protobuf:"bytes,10,opt,name=param_values_json,json=paramValuesJson,proto3" json:"param_values_json,omitempty"`
	ErrorMessage       *string                `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	RunByUsername      *string                `protobuf:"bytes,12,opt,name=run_by_username,json=runByUsername,proto3,oneof" json:"run_by_username,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TemplateRun) Reset() {
	*x = TemplateRun{}
	mi := &file_taskqueue_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRun) ProtoMessage() {}

func (x *TemplateRun) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRun.ProtoReflect.Descriptor instead.
func (*TemplateRun) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{86}
}

func (x *TemplateRun) GetTemplateRunId() int32 {
	if x != nil {
		return x.TemplateRunId
	}
	return 0
}

func (x *TemplateRun) GetWorkflowTemplateId() int32 {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return 0
}

func (x *TemplateRun) GetTemplateName() string {
	if x != nil && x.TemplateName != nil {
		return *x.TemplateName
	}
	return ""
}

func (x *TemplateRun) GetTemplateVersion() string {
	if x != nil && x.TemplateVersion != nil {
		return *x.TemplateVersion
	}
	return ""
}

func (x *TemplateRun) GetWorkflowName() string {
	if x != nil && x.WorkflowName != nil {
		return *x.WorkflowName
	}
	return ""
}

func (x *TemplateRun) GetRunBy() int32 {
	if x != nil && x.RunBy != nil {
		return *x.RunBy
	}
	return 0
}

func (x *TemplateRun) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TemplateRun) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *TemplateRun) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TemplateRun) GetParamValuesJson() string {
	if x != nil {
		return x.ParamValuesJson
	}
	return ""
}

func (x *TemplateRun) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *TemplateRun) GetRunByUsername() string {
	if x != nil && x.RunByUsername != nil {
		return *x.RunByUsername
	}
	return ""
}

type TemplateRunList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Runs          []*TemplateRun         `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateRunList) Reset() {
	*x = TemplateRunList{}
	mi := &file_taskqueue_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateRunList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRunList) ProtoMessage() {}

func (x *TemplateRunList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRunList.ProtoReflect.Descriptor instead.
func (*TemplateRunList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{87}
}

func (x *TemplateRunList) GetRuns() []*TemplateRun {
	if x != nil {
		return x.Runs
	}
	return nil
}

type TemplateRunFilter struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	WorkflowTemplateId *int32                 `protobuf:"varint,1,opt,name=workflow_template_id,json=workflowTemplateId,proto3,oneof" json:"workflow_template_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TemplateRunFilter) Reset() {
	*x = TemplateRunFilter{}
	mi := &file_taskqueue_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateRunFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRunFilter) ProtoMessage() {}

func (x *TemplateRunFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRunFilter.ProtoReflect.Descriptor instead.
func (*TemplateRunFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{88}
}

func (x *TemplateRunFilter) GetWorkflowTemplateId() int32 {
	if x != nil && x.WorkflowTemplateId != nil {
		return *x.WorkflowTemplateId
	}
	return 0
}

type UpdateTemplateRunRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TemplateRunId int32                  `protobuf:"varint,1,opt,name=template_run_id,json=templateRunId,proto3" json:"template_run_id,omitempty"`
	WorkflowId    *int32                 `protobuf:"varint,2,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	ErrorMessage  *string                `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTemplateRunRequest) Reset() {
	*x = UpdateTemplateRunRequest{}
	mi := &file_taskqueue_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTemplateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTemplateRunRequest) ProtoMessage() {}

func (x *UpdateTemplateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTemplateRunRequest.ProtoReflect.Descriptor instead.
func (*UpdateTemplateRunRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateTemplateRunRequest) GetTemplateRunId() int32 {
	if x != nil {
		return x.TemplateRunId
	}
	return 0
}

func (x *UpdateTemplateRunRequest) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *UpdateTemplateRunRequest) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type WorkspaceRootRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Provider      string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"` // e.g., "azure.default" or "openstack.ovh"
	Region        string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`     // e.g., "northeurope"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkspaceRootRequest) Reset() {
	*x = WorkspaceRootRequest{}
	mi := &file_taskqueue_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceRootRequest) ProtoMessage() {}

func (x *WorkspaceRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceRootRequest.ProtoReflect.Descriptor instead.
func (*WorkspaceRootRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{90}
}

func (x *WorkspaceRootRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *WorkspaceRootRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type WorkspaceRootResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RootUri       string                 `protobuf:"bytes,1,opt,name=root_uri,json=rootUri,proto3" json:"root_uri,omitempty"` // e.g., "aznorth://workspace"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkspaceRootResponse) Reset() {
	*x = WorkspaceRootResponse{}
	mi := &file_taskqueue_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceRootResponse) ProtoMessage() {}

func (x *WorkspaceRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceRootResponse.ProtoReflect.Descriptor instead.
func (*WorkspaceRootResponse) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{91}
}

func (x *WorkspaceRootResponse) GetRootUri() string {
	if x != nil {
		return x.RootUri
	}
	return ""
}

type DeleteTemplateRunRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TemplateRunId int32                  `protobuf:"varint,1,opt,name=template_run_id,json=templateRunId,proto3" json:"template_run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTemplateRunRequest) Reset() {
	*x = DeleteTemplateRunRequest{}
	mi := &file_taskqueue_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTemplateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTemplateRunRequest) ProtoMessage() {}

func (x *DeleteTemplateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTemplateRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteTemplateRunRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{92}
}

func (x *DeleteTemplateRunRequest) GetTemplateRunId() int32 {
	if x != nil {
		return x.TemplateRunId
	}
	return 0
}

type ResourceSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Cpu           int32                  `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem           float32                `protobuf:"fixed32,3,opt,name=mem,proto3" json:"mem,omitempty"`
	Disk          float32                `protobuf:"fixed32,4,opt,name=disk,proto3" json:"disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceSpec) Reset() {
	*x = ResourceSpec{}
	mi := &file_taskqueue_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpec) ProtoMessage() {}

func (x *ResourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpec.ProtoReflect.Descriptor instead.
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{93}
}

func (x *ResourceSpec) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *ResourceSpec) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResourceSpec) GetMem() float32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *ResourceSpec) GetDisk() float32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

type WorkerEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// optional because a worker may fail before registration
	WorkerId      *int32 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3,oneof" json:"worker_id,omitempty"`
	WorkerName    string `protobuf:"bytes,2,opt,name=worker_name,json=workerName,proto3" json:"worker_name,omitempty"`    // free text (hostname or generated name)
	Level         string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`                                // single letter: D/I/W/E
	EventClass    string `protobuf:"bytes,4,opt,name=event_class,json=eventClass,proto3" json:"event_class,omitempty"`    // e.g. "install", "bootstrap", "runtime", "network"
	Message       string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                            // short human description
	DetailsJson   string `protobuf:"bytes,6,opt,name=details_json,json=detailsJson,proto3" json:"details_json,omitempty"` // raw JSON string (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerEvent) Reset() {
	*x = WorkerEvent{}
	mi := &file_taskqueue_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerEvent) ProtoMessage() {}

func (x *WorkerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerEvent.ProtoReflect.Descriptor instead.
func (*WorkerEvent) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{94}
}

func (x *WorkerEvent) GetWorkerId() int32 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *WorkerEvent) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *WorkerEvent) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *WorkerEvent) GetEventClass() string {
	if x != nil {
		return x.EventClass
	}
	return ""
}

func (x *WorkerEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WorkerEvent) GetDetailsJson() string {
	if x != nil {
		return x.DetailsJson
	}
	return ""
}

type WorkerEventFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      *int32                 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3,oneof" json:"worker_id,omitempty"`
	Level         *string                `protobuf:"bytes,2,opt,name=level,proto3,oneof" json:"level,omitempty"`  // 'D','I','W','E'
	Class         *string                `protobuf:"bytes,3,opt,name=class,proto3,oneof" json:"class,omitempty"`  // event_class filter
	Limit         *int32                 `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"` // max number of events (default 50)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerEventFilter) Reset() {
	*x = WorkerEventFilter{}
	mi := &file_taskqueue_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerEventFilter) ProtoMessage() {}

func (x *WorkerEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerEventFilter.ProtoReflect.Descriptor instead.
func (*WorkerEventFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{95}
}

func (x *WorkerEventFilter) GetWorkerId() int32 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *WorkerEventFilter) GetLevel() string {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ""
}

func (x *WorkerEventFilter) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *WorkerEventFilter) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type WorkerEventRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       int32                  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	WorkerId      *int32                 `protobuf:"varint,3,opt,name=worker_id,json=workerId,proto3,oneof" json:"worker_id,omitempty"`
	WorkerName    string                 `protobuf:"bytes,4,opt,name=worker_name,json=workerName,proto3" json:"worker_name,omitempty"`
	Level         string                 `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	EventClass    string                 `protobuf:"bytes,6,opt,name=event_class,json=eventClass,proto3" json:"event_class,omitempty"`
	Message       string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	DetailsJson   string                 `protobuf:"bytes,8,opt,name=details_json,json=detailsJson,proto3" json:"details_json,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerEventRecord) Reset() {
	*x = WorkerEventRecord{}
	mi := &file_taskqueue_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerEventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerEventRecord) ProtoMessage() {}

func (x *WorkerEventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerEventRecord.ProtoReflect.Descriptor instead.
func (*WorkerEventRecord) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{96}
}

func (x *WorkerEventRecord) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *WorkerEventRecord) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkerEventRecord) GetWorkerId() int32 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *WorkerEventRecord) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *WorkerEventRecord) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *WorkerEventRecord) GetEventClass() string {
	if x != nil {
		return x.EventClass
	}
	return ""
}

func (x *WorkerEventRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WorkerEventRecord) GetDetailsJson() string {
	if x != nil {
		return x.DetailsJson
	}
	return ""
}

type WorkerEventList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*WorkerEventRecord   `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerEventList) Reset() {
	*x = WorkerEventList{}
	mi := &file_taskqueue_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerEventList) ProtoMessage() {}

func (x *WorkerEventList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerEventList.ProtoReflect.Descriptor instead.
func (*WorkerEventList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{97}
}

func (x *WorkerEventList) GetEvents() []*WorkerEventRecord {
	if x != nil {
		return x.Events
	}
	return nil
}

type WorkerEventId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       int32                  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerEventId) Reset() {
	*x = WorkerEventId{}
	mi := &file_taskqueue_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerEventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerEventId) ProtoMessage() {}

func (x *WorkerEventId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerEventId.ProtoReflect.Descriptor instead.
func (*WorkerEventId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{98}
}

func (x *WorkerEventId) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

type WorkerEventPruneFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Before        *string                `protobuf:"bytes,1,opt,name=before,proto3,oneof" json:"before,omitempty"` // RFC3339 UTC, e.g. "2025-08-19T00:00:00Z"
	Level         *string                `protobuf:"bytes,2,opt,name=level,proto3,oneof" json:"level,omitempty"`   // 'D'|'I'|'W'|'E'
	Class         *string                `protobuf:"bytes,3,opt,name=class,proto3,oneof" json:"class,omitempty"`   // event_class exact match
	WorkerId      *int32                 `protobuf:"varint,4,opt,name=worker_id,json=workerId,proto3,oneof" json:"worker_id,omitempty"`
	DryRun        bool                   `protobuf:"varint,5,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"` // if true, count only; no deletion
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerEventPruneFilter) Reset() {
	*x = WorkerEventPruneFilter{}
	mi := &file_taskqueue_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerEventPruneFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerEventPruneFilter) ProtoMessage() {}

func (x *WorkerEventPruneFilter) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerEventPruneFilter.ProtoReflect.Descriptor instead.
func (*WorkerEventPruneFilter) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{99}
}

func (x *WorkerEventPruneFilter) GetBefore() string {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return ""
}

func (x *WorkerEventPruneFilter) GetLevel() string {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ""
}

func (x *WorkerEventPruneFilter) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *WorkerEventPruneFilter) GetWorkerId() int32 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *WorkerEventPruneFilter) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type WorkerEventPruneResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Matched       int32                  `protobuf:"varint,1,opt,name=matched,proto3" json:"matched,omitempty"`
	Deleted       int32                  `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerEventPruneResult) Reset() {
	*x = WorkerEventPruneResult{}
	mi := &file_taskqueue_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerEventPruneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerEventPruneResult) ProtoMessage() {}

func (x *WorkerEventPruneResult) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerEventPruneResult.ProtoReflect.Descriptor instead.
func (*WorkerEventPruneResult) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{100}
}

func (x *WorkerEventPruneResult) GetMatched() int32 {
	if x != nil {
		return x.Matched
	}
	return 0
}

func (x *WorkerEventPruneResult) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

type Provider struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProviderId    int32                  `protobuf:"varint,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	ProviderName  string                 `protobuf:"bytes,2,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	ConfigName    string                 `protobuf:"bytes,3,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Provider) Reset() {
	*x = Provider{}
	mi := &file_taskqueue_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{101}
}

func (x *Provider) GetProviderId() int32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *Provider) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *Provider) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type ProviderList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Providers     []*Provider            `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProviderList) Reset() {
	*x = ProviderList{}
	mi := &file_taskqueue_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderList) ProtoMessage() {}

func (x *ProviderList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderList.ProtoReflect.Descriptor instead.
func (*ProviderList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{102}
}

func (x *ProviderList) GetProviders() []*Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegionId      int32                  `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	ProviderId    int32                  `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	RegionName    string                 `protobuf:"bytes,3,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	IsDefault     bool                   `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Region) Reset() {
	*x = Region{}
	mi := &file_taskqueue_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{103}
}

func (x *Region) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Region) GetProviderId() int32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *Region) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *Region) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type RegionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Regions       []*Region              `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegionList) Reset() {
	*x = RegionList{}
	mi := &file_taskqueue_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionList) ProtoMessage() {}

func (x *RegionList) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionList.ProtoReflect.Descriptor instead.
func (*RegionList) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{104}
}

func (x *RegionList) GetRegions() []*Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

type FlavorCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProviderName  string                 `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	ConfigName    string                 `protobuf:"bytes,2,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	FlavorName    string                 `protobuf:"bytes,3,opt,name=flavor_name,json=flavorName,proto3" json:"flavor_name,omitempty"`
	Cpu           int32                  `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        float32                `protobuf:"fixed32,5,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk          float32                `protobuf:"fixed32,6,opt,name=disk,proto3" json:"disk,omitempty"`
	Bandwidth     *int32                 `protobuf:"varint,7,opt,name=bandwidth,proto3,oneof" json:"bandwidth,omitempty"`
	Gpu           *string                `protobuf:"bytes,8,opt,name=gpu,proto3,oneof" json:"gpu,omitempty"`
	Gpumem        *int32                 `protobuf:"varint,9,opt,name=gpumem,proto3,oneof" json:"gpumem,omitempty"`
	HasGpu        *bool                  `protobuf:"varint,10,opt,name=has_gpu,json=hasGpu,proto3,oneof" json:"has_gpu,omitempty"`
	HasQuickDisks *bool                  `protobuf:"varint,11,opt,name=has_quick_disks,json=hasQuickDisks,proto3,oneof" json:"has_quick_disks,omitempty"`
	RegionNames   []string               `protobuf:"bytes,12,rep,name=region_names,json=regionNames,proto3" json:"region_names,omitempty"`
	Costs         []float32              `protobuf:"fixed32,13,rep,packed,name=costs,proto3" json:"costs,omitempty"`
	Evictions     []float32              `protobuf:"fixed32,14,rep,packed,name=evictions,proto3" json:"evictions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlavorCreateRequest) Reset() {
	*x = FlavorCreateRequest{}
	mi := &file_taskqueue_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlavorCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavorCreateRequest) ProtoMessage() {}

func (x *FlavorCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavorCreateRequest.ProtoReflect.Descriptor instead.
func (*FlavorCreateRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{105}
}

func (x *FlavorCreateRequest) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *FlavorCreateRequest) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *FlavorCreateRequest) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *FlavorCreateRequest) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *FlavorCreateRequest) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *FlavorCreateRequest) GetDisk() float32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *FlavorCreateRequest) GetBandwidth() int32 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *FlavorCreateRequest) GetGpu() string {
	if x != nil && x.Gpu != nil {
		return *x.Gpu
	}
	return ""
}

func (x *FlavorCreateRequest) GetGpumem() int32 {
	if x != nil && x.Gpumem != nil {
		return *x.Gpumem
	}
	return 0
}

func (x *FlavorCreateRequest) GetHasGpu() bool {
	if x != nil && x.HasGpu != nil {
		return *x.HasGpu
	}
	return false
}

func (x *FlavorCreateRequest) GetHasQuickDisks() bool {
	if x != nil && x.HasQuickDisks != nil {
		return *x.HasQuickDisks
	}
	return false
}

func (x *FlavorCreateRequest) GetRegionNames() []string {
	if x != nil {
		return x.RegionNames
	}
	return nil
}

func (x *FlavorCreateRequest) GetCosts() []float32 {
	if x != nil {
		return x.Costs
	}
	return nil
}

func (x *FlavorCreateRequest) GetEvictions() []float32 {
	if x != nil {
		return x.Evictions
	}
	return nil
}

type FlavorId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlavorId      int32                  `protobuf:"varint,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlavorId) Reset() {
	*x = FlavorId{}
	mi := &file_taskqueue_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlavorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavorId) ProtoMessage() {}

func (x *FlavorId) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavorId.ProtoReflect.Descriptor instead.
func (*FlavorId) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{106}
}

func (x *FlavorId) GetFlavorId() int32 {
	if x != nil {
		return x.FlavorId
	}
	return 0
}

var File_taskqueue_proto protoreflect.FileDescriptor

const file_taskqueue_proto_rawDesc = "" +
	"\n" +
	"\x0ftaskqueue.proto\x12\ttaskqueue\x1a\x1bgoogle/protobuf/empty.proto\"'\n" +
	"\fTaskResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x05R\x06taskId\"\xe6\x01\n" +
	"\n" +
	"WorkerInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12%\n" +
	"\vconcurrency\x18\x02 \x01(\x05H\x00R\vconcurrency\x88\x01\x01\x12&\n" +
	"\fis_permanent\x18\x03 \x01(\bH\x01R\visPermanent\x88\x01\x01\x12\x1f\n" +
	"\bprovider\x18\x04 \x01(\tH\x02R\bprovider\x88\x01\x01\x12\x1b\n" +
	"\x06region\x18\x05 \x01(\tH\x03R\x06region\x88\x01\x01B\x0e\n" +
	"\f_concurrencyB\x0f\n" +
	"\r_is_permanentB\v\n" +
	"\t_providerB\t\n" +
	"\a_region\"\xe9\x05\n" +
	"\vTaskRequest\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x19\n" +
	"\x05shell\x18\x02 \x01(\tH\x00R\x05shell\x88\x01\x01\x12\x1c\n" +
	"\tcontainer\x18\x03 \x01(\tR\tcontainer\x120\n" +
	"\x11container_options\x18\x04 \x01(\tH\x01R\x10containerOptions\x88\x01\x01\x12\x1c\n" +
	"\astep_id\x18\x05 \x01(\x05H\x02R\x06stepId\x88\x01\x01\x12\x14\n" +
	"\x05input\x18\x06 \x03(\tR\x05input\x12\x1a\n" +
	"\bresource\x18\a \x03(\tR\bresource\x12\x1b\n" +
	"\x06output\x18\b \x01(\tH\x03R\x06output\x88\x01\x01\x12\x19\n" +
	"\x05retry\x18\t \x01(\x05H\x04R\x05retry\x88\x01\x01\x12\x1e\n" +
	"\bis_final\x18\n" +
	" \x01(\bH\x05R\aisFinal\x88\x01\x01\x12\"\n" +
	"\n" +
	"uses_cache\x18\v \x01(\bH\x06R\tusesCache\x88\x01\x01\x12.\n" +
	"\x10download_timeout\x18\f \x01(\x02H\aR\x0fdownloadTimeout\x88\x01\x01\x12,\n" +
	"\x0frunning_timeout\x18\r \x01(\x02H\bR\x0erunningTimeout\x88\x01\x01\x12*\n" +
	"\x0eupload_timeout\x18\x0e \x01(\x02H\tR\ruploadTimeout\x88\x01\x01\x12\x16\n" +
	"\x06status\x18\x0f \x01(\tR\x06status\x12\x1e\n" +
	"\n" +
	"dependency\x18\x10 \x03(\x05R\n" +
	"dependency\x12 \n" +
	"\ttask_name\x18\x11 \x01(\tH\n" +
	"R\btaskName\x88\x01\x01B\b\n" +
	"\x06_shellB\x14\n" +
	"\x12_container_optionsB\n" +
	"\n" +
	"\b_step_idB\t\n" +
	"\a_outputB\b\n" +
	"\x06_retryB\v\n" +
	"\t_is_finalB\r\n" +
	"\v_uses_cacheB\x13\n" +
	"\x11_download_timeoutB\x12\n" +
	"\x10_running_timeoutB\x11\n" +
	"\x0f_upload_timeoutB\f\n" +
	"\n" +
	"_task_name\"\xe6\a\n" +
	"\x04Task\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x05R\x06taskId\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\x12\x19\n" +
	"\x05shell\x18\x03 \x01(\tH\x00R\x05shell\x88\x01\x01\x12\x1c\n" +
	"\tcontainer\x18\x04 \x01(\tR\tcontainer\x120\n" +
	"\x11container_options\x18\x05 \x01(\tH\x01R\x10containerOptions\x88\x01\x01\x12\x1c\n" +
	"\astep_id\x18\x06 \x01(\x05H\x02R\x06stepId\x88\x01\x01\x12\x14\n" +
	"\x05input\x18\a \x03(\tR\x05input\x12\x1a\n" +
	"\bresource\x18\b \x03(\tR\bresource\x12\x1b\n" +
	"\x06output\x18\t \x01(\tH\x03R\x06output\x88\x01\x01\x12\x19\n" +
	"\x05retry\x18\n" +
	" \x01(\x05H\x04R\x05retry\x88\x01\x01\x12\x1e\n" +
	"\bis_final\x18\v \x01(\bH\x05R\aisFinal\x88\x01\x01\x12\"\n" +
	"\n" +
	"uses_cache\x18\f \x01(\bH\x06R\tusesCache\x88\x01\x01\x12.\n" +
	"\x10download_timeout\x18\r \x01(\x02H\aR\x0fdownloadTimeout\x88\x01\x01\x12,\n" +
	"\x0frunning_timeout\x18\x0e \x01(\x02H\bR\x0erunningTimeout\x88\x01\x01\x12*\n" +
	"\x0eupload_timeout\x18\x0f \x01(\x02H\tR\ruploadTimeout\x88\x01\x01\x12\x16\n" +
	"\x06status\x18\x10 \x01(\tR\x06status\x12 \n" +
	"\tworker_id\x18\x11 \x01(\x05H\n" +
	"R\bworkerId\x88\x01\x01\x12$\n" +
	"\vworkflow_id\x18\x12 \x01(\x05H\vR\n" +
	"workflowId\x88\x01\x01\x12 \n" +
	"\ttask_name\x18\x13 \x01(\tH\fR\btaskName\x88\x01\x01\x12\x1f\n" +
	"\vretry_count\x18\x14 \x01(\x05R\n" +
	"retryCount\x12\x16\n" +
	"\x06hidden\x18\x15 \x01(\bR\x06hidden\x12-\n" +
	"\x10previous_task_id\x18\x16 \x01(\x05H\rR\x0epreviousTaskId\x88\x01\x01\x12\x1b\n" +
	"\x06weight\x18\x17 \x01(\x01H\x0eR\x06weight\x88\x01\x01B\b\n" +
	"\x06_shellB\x14\n" +
	"\x12_container_optionsB\n" +
	"\n" +
	"\b_step_idB\t\n" +
	"\a_outputB\b\n" +
	"\x06_retryB\v\n" +
	"\t_is_finalB\r\n" +
	"\v_uses_cacheB\x13\n" +
	"\x11_download_timeoutB\x12\n" +
	"\x10_running_timeoutB\x11\n" +
	"\x0f_upload_timeoutB\f\n" +
	"\n" +
	"_worker_idB\x0e\n" +
	"\f_workflow_idB\f\n" +
	"\n" +
	"_task_nameB\x13\n" +
	"\x11_previous_task_idB\t\n" +
	"\a_weight\"1\n" +
	"\bTaskList\x12%\n" +
	"\x05tasks\x18\x01 \x03(\v2\x0f.taskqueue.TaskR\x05tasks\"\xdd\x02\n" +
	"\x06Worker\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\x05R\bworkerId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vconcurrency\x18\x03 \x01(\x05R\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\x04 \x01(\x05R\bprefetch\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12\x12\n" +
	"\x04ipv4\x18\x06 \x01(\tR\x04ipv4\x12\x12\n" +
	"\x04ipv6\x18\a \x01(\tR\x04ipv6\x12\x16\n" +
	"\x06flavor\x18\b \x01(\tR\x06flavor\x12\x1a\n" +
	"\bprovider\x18\t \x01(\tR\bprovider\x12\x16\n" +
	"\x06region\x18\n" +
	" \x01(\tR\x06region\x12\x1c\n" +
	"\astep_id\x18\v \x01(\x05H\x00R\x06stepId\x88\x01\x01\x12 \n" +
	"\tstep_name\x18\f \x01(\tH\x01R\bstepName\x88\x01\x01B\n" +
	"\n" +
	"\b_step_idB\f\n" +
	"\n" +
	"_step_name\":\n" +
	"\vWorkersList\x12+\n" +
	"\aworkers\x18\x01 \x03(\v2\x11.taskqueue.WorkerR\aworkers\"J\n" +
	"\x12ListWorkersRequest\x12$\n" +
	"\vworkflow_id\x18\x01 \x01(\x05H\x00R\n" +
	"workflowId\x88\x01\x01B\x0e\n" +
	"\f_workflow_id\"$\n" +
	"\n" +
	"TaskUpdate\x12\x16\n" +
	"\x06weight\x18\x01 \x01(\x01R\x06weight\"\xa5\x01\n" +
	"\x0eTaskUpdateList\x12@\n" +
	"\aupdates\x18\x01 \x03(\v2&.taskqueue.TaskUpdateList.UpdatesEntryR\aupdates\x1aQ\n" +
	"\fUpdatesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.taskqueue.TaskUpdateR\x05value:\x028\x01\"\xb3\x01\n" +
	"\x10TaskListAndOther\x12%\n" +
	"\x05tasks\x18\x01 \x03(\v2\x0f.taskqueue.TaskR\x05tasks\x12 \n" +
	"\vconcurrency\x18\x02 \x01(\x05R\vconcurrency\x123\n" +
	"\aupdates\x18\x03 \x01(\v2\x19.taskqueue.TaskUpdateListR\aupdates\x12!\n" +
	"\factive_tasks\x18\x04 \x03(\x05R\vactiveTasks\"\xab\x01\n" +
	"\x10TaskStatusUpdate\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x05R\x06taskId\x12\x1d\n" +
	"\n" +
	"new_status\x18\x02 \x01(\tR\tnewStatus\x12\x1f\n" +
	"\bduration\x18\x03 \x01(\x05H\x00R\bduration\x88\x01\x01\x12\"\n" +
	"\n" +
	"free_retry\x18\x04 \x01(\bH\x01R\tfreeRetry\x88\x01\x01B\v\n" +
	"\t_durationB\r\n" +
	"\v_free_retry\"X\n" +
	"\aTaskLog\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x05R\x06taskId\x12\x19\n" +
	"\blog_type\x18\x02 \x01(\tR\alogType\x12\x19\n" +
	"\blog_text\x18\x03 \x01(\tR\alogText\"\xac\x01\n" +
	"\x0eGetLogsRequest\x12\x18\n" +
	"\ataskIds\x18\x01 \x03(\x05R\ataskIds\x12\x1c\n" +
	"\tchunkSize\x18\x02 \x01(\x05R\tchunkSize\x12%\n" +
	"\vskipFromEnd\x18\x03 \x01(\x05H\x00R\vskipFromEnd\x88\x01\x01\x12\x1e\n" +
	"\blog_type\x18\x04 \x01(\tH\x01R\alogType\x88\x01\x01B\x0e\n" +
	"\f_skipFromEndB\v\n" +
	"\t_log_type\"R\n" +
	"\bLogChunk\x12\x16\n" +
	"\x06taskId\x18\x01 \x01(\x05R\x06taskId\x12\x16\n" +
	"\x06stdout\x18\x02 \x03(\tR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\x03 \x03(\tR\x06stderr\"7\n" +
	"\fLogChunkList\x12'\n" +
	"\x04logs\x18\x01 \x03(\v2\x13.taskqueue.LogChunkR\x04logs\"$\n" +
	"\aTaskIds\x12\x19\n" +
	"\btask_ids\x18\x01 \x03(\x05R\ataskIds\"!\n" +
	"\x06TaskId\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x05R\x06taskId\"'\n" +
	"\bWorkerId\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\x05R\bworkerId\"a\n" +
	"\x0eWorkerDeletion\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\x05R\bworkerId\x12#\n" +
	"\n" +
	"undeployed\x18\x02 \x01(\bH\x00R\n" +
	"undeployed\x88\x01\x01B\r\n" +
	"\v_undeployed\"4\n" +
	"\x13WorkerStatusRequest\x12\x1d\n" +
	"\n" +
	"worker_ids\x18\x01 \x03(\x05R\tworkerIds\"C\n" +
	"\fWorkerStatus\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\x05R\bworkerId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\"K\n" +
	"\x14WorkerStatusResponse\x123\n" +
	"\bstatuses\x18\x01 \x03(\v2\x17.taskqueue.WorkerStatusR\bstatuses\"d\n" +
	"\rWorkerDetails\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\x05R\bworkerId\x12\x1f\n" +
	"\vworker_name\x18\x02 \x01(\tR\n" +
	"workerName\x12\x15\n" +
	"\x06job_id\x18\x03 \x01(\x05R\x05jobId\"N\n" +
	"\tWorkerIds\x12A\n" +
	"\x0fworkers_details\x18\x01 \x03(\v2\x18.taskqueue.WorkerDetailsR\x0eworkersDetails\"f\n" +
	"\x19PingAndGetNewTasksRequest\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\x05R\bworkerId\x12,\n" +
	"\x05stats\x18\x02 \x01(\v2\x16.taskqueue.WorkerStatsR\x05stats\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\xdc\x03\n" +
	"\x10ListTasksRequest\x12(\n" +
	"\rstatus_filter\x18\x01 \x01(\tH\x00R\fstatusFilter\x88\x01\x01\x12-\n" +
	"\x10worker_id_filter\x18\x02 \x01(\x05H\x01R\x0eworkerIdFilter\x88\x01\x01\x121\n" +
	"\x12workflow_id_filter\x18\x03 \x01(\x05H\x02R\x10workflowIdFilter\x88\x01\x01\x12)\n" +
	"\x0estep_id_filter\x18\x04 \x01(\x05H\x03R\fstepIdFilter\x88\x01\x01\x12*\n" +
	"\x0ecommand_filter\x18\x05 \x01(\tH\x04R\rcommandFilter\x88\x01\x01\x12\x19\n" +
	"\x05limit\x18\x06 \x01(\x05H\x05R\x05limit\x88\x01\x01\x12\x1b\n" +
	"\x06offset\x18\a \x01(\x05H\x06R\x06offset\x88\x01\x01\x12$\n" +
	"\vshow_hidden\x18\b \x01(\bH\aR\n" +
	"showHidden\x88\x01\x01B\x10\n" +
	"\x0e_status_filterB\x13\n" +
	"\x11_worker_id_filterB\x15\n" +
	"\x13_workflow_id_filterB\x11\n" +
	"\x0f_step_id_filterB\x11\n" +
	"\x0f_command_filterB\b\n" +
	"\x06_limitB\t\n" +
	"\a_offsetB\x0e\n" +
	"\f_show_hidden\"\xea\x01\n" +
	"\rWorkerRequest\x12\x1f\n" +
	"\vprovider_id\x18\x01 \x01(\x05R\n" +
	"providerId\x12\x1b\n" +
	"\tflavor_id\x18\x02 \x01(\x05R\bflavorId\x12\x1b\n" +
	"\tregion_id\x18\x03 \x01(\x05R\bregionId\x12\x16\n" +
	"\x06number\x18\x04 \x01(\x05R\x06number\x12 \n" +
	"\vconcurrency\x18\x05 \x01(\x05R\vconcurrency\x12\x1a\n" +
	"\bprefetch\x18\x06 \x01(\x05R\bprefetch\x12\x1c\n" +
	"\astep_id\x18\a \x01(\x05H\x00R\x06stepId\x88\x01\x01B\n" +
	"\n" +
	"\b_step_id\"\xd7\x02\n" +
	"\x13WorkerUpdateRequest\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\x05R\bworkerId\x12$\n" +
	"\vprovider_id\x18\x02 \x01(\x05H\x00R\n" +
	"providerId\x88\x01\x01\x12 \n" +
	"\tflavor_id\x18\x03 \x01(\x05H\x01R\bflavorId\x88\x01\x01\x12 \n" +
	"\tregion_id\x18\x04 \x01(\x05H\x02R\bregionId\x88\x01\x01\x12%\n" +
	"\vconcurrency\x18\x05 \x01(\x05H\x03R\vconcurrency\x88\x01\x01\x12\x1f\n" +
	"\bprefetch\x18\x06 \x01(\x05H\x04R\bprefetch\x88\x01\x01\x12\x1c\n" +
	"\astep_id\x18\a \x01(\x05H\x05R\x06stepId\x88\x01\x01B\x0e\n" +
	"\f_provider_idB\f\n" +
	"\n" +
	"_flavor_idB\f\n" +
	"\n" +
	"_region_idB\x0e\n" +
	"\f_concurrencyB\v\n" +
	"\t_prefetchB\n" +
	"\n" +
	"\b_step_id\"B\n" +
	"\x12ListFlavorsRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06filter\x18\x02 \x01(\tR\x06filter\"\xa9\x03\n" +
	"\x06Flavor\x12\x1b\n" +
	"\tflavor_id\x18\x01 \x01(\x05R\bflavorId\x12\x1f\n" +
	"\vflavor_name\x18\x02 \x01(\tR\n" +
	"flavorName\x12\x1f\n" +
	"\vprovider_id\x18\x03 \x01(\x05R\n" +
	"providerId\x12\x1a\n" +
	"\bprovider\x18\x04 \x01(\tR\bprovider\x12\x10\n" +
	"\x03cpu\x18\x05 \x01(\x05R\x03cpu\x12\x10\n" +
	"\x03mem\x18\x06 \x01(\x02R\x03mem\x12\x12\n" +
	"\x04disk\x18\a \x01(\x02R\x04disk\x12\x1c\n" +
	"\tbandwidth\x18\b \x01(\x05R\tbandwidth\x12\x10\n" +
	"\x03gpu\x18\t \x01(\tR\x03gpu\x12\x16\n" +
	"\x06gpumem\x18\n" +
	" \x01(\x05R\x06gpumem\x12\x17\n" +
	"\ahas_gpu\x18\v \x01(\bR\x06hasGpu\x12&\n" +
	"\x0fhas_quick_disks\x18\f \x01(\bR\rhasQuickDisks\x12\x1b\n" +
	"\tregion_id\x18\r \x01(\x05R\bregionId\x12\x16\n" +
	"\x06region\x18\x0e \x01(\tR\x06region\x12\x1a\n" +
	"\beviction\x18\x0f \x01(\x02R\beviction\x12\x12\n" +
	"\x04cost\x18\x10 \x01(\x02R\x04cost\":\n" +
	"\vFlavorsList\x12+\n" +
	"\aflavors\x18\x01 \x03(\v2\x11.taskqueue.FlavorR\aflavors\"^\n" +
	"\x0fListJobsRequest\x12\x19\n" +
	"\x05limit\x18\x01 \x01(\x05H\x00R\x05limit\x88\x01\x01\x12\x1b\n" +
	"\x06offset\x18\x02 \x01(\x05H\x01R\x06offset\x88\x01\x01B\b\n" +
	"\x06_limitB\t\n" +
	"\a_offset\"\x90\x02\n" +
	"\x03Job\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\x05R\x05jobId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1b\n" +
	"\tflavor_id\x18\x03 \x01(\x05R\bflavorId\x12\x14\n" +
	"\x05retry\x18\x04 \x01(\x05R\x05retry\x12\x1b\n" +
	"\tworker_id\x18\x05 \x01(\x05R\bworkerId\x12\x16\n" +
	"\x06action\x18\x06 \x01(\tR\x06action\x12\x1d\n" +
	"\n" +
	"created_at\x18\a \x01(\tR\tcreatedAt\x12\x1f\n" +
	"\vmodified_at\x18\b \x01(\tR\n" +
	"modifiedAt\x12 \n" +
	"\vprogression\x18\t \x01(\x05R\vprogression\x12\x10\n" +
	"\x03log\x18\n" +
	" \x01(\tR\x03log\"\x1e\n" +
	"\x05JobId\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\x05R\x05jobId\".\n" +
	"\bJobsList\x12\"\n" +
	"\x04jobs\x18\x01 \x03(\v2\x0e.taskqueue.JobR\x04jobs\"+\n" +
	"\x10JobStatusRequest\x12\x17\n" +
	"\ajob_ids\x18\x01 \x03(\x05R\x06jobIds\"\\\n" +
	"\tJobStatus\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\x05R\x05jobId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12 \n" +
	"\vprogression\x18\x03 \x01(\x05R\vprogression\"E\n" +
	"\x11JobStatusResponse\x120\n" +
	"\bstatuses\x18\x01 \x03(\v2\x14.taskqueue.JobStatusR\bstatuses\"\xb4\x01\n" +
	"\tJobUpdate\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\x05R\x05jobId\x12\x1b\n" +
	"\x06status\x18\x02 \x01(\tH\x00R\x06status\x88\x01\x01\x12\"\n" +
	"\n" +
	"append_log\x18\x03 \x01(\tH\x01R\tappendLog\x88\x01\x01\x12%\n" +
	"\vprogression\x18\x04 \x01(\x05H\x02R\vprogression\x88\x01\x01B\t\n" +
	"\a_statusB\r\n" +
	"\v_append_logB\x0e\n" +
	"\f_progression\"&\n" +
	"\fRcloneConfig\x12\x16\n" +
	"\x06config\x18\x01 \x01(\tR\x06config\"B\n" +
	"\x10DockerCredential\x12\x1a\n" +
	"\bregistry\x18\x01 \x01(\tR\bregistry\x12\x12\n" +
	"\x04auth\x18\x02 \x01(\tR\x04auth\"R\n" +
	"\x11DockerCredentials\x12=\n" +
	"\vcredentials\x18\x01 \x03(\v2\x1b.taskqueue.DockerCredentialR\vcredentials\"F\n" +
	"\fLoginRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"%\n" +
	"\rLoginResponse\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"\x1d\n" +
	"\x05Token\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"|\n" +
	"\x11CreateUserRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x19\n" +
	"\bis_admin\x18\x04 \x01(\bR\aisAdmin\"!\n" +
	"\x06UserId\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x05R\x06userId\"\x9f\x01\n" +
	"\x04User\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x05R\x06userId\x12\x1f\n" +
	"\busername\x18\x02 \x01(\tH\x00R\busername\x88\x01\x01\x12\x19\n" +
	"\x05email\x18\x03 \x01(\tH\x01R\x05email\x88\x01\x01\x12\x1e\n" +
	"\bis_admin\x18\x04 \x01(\bH\x02R\aisAdmin\x88\x01\x01B\v\n" +
	"\t_usernameB\b\n" +
	"\x06_emailB\v\n" +
	"\t_is_admin\"2\n" +
	"\tUsersList\x12%\n" +
	"\x05users\x18\x01 \x03(\v2\x0f.taskqueue.UserR\x05users\"y\n" +
	"\x15ChangePasswordRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12!\n" +
	"\fold_password\x18\x02 \x01(\tR\voldPassword\x12!\n" +
	"\fnew_password\x18\x03 \x01(\tR\vnewPassword\";\n" +
	"\x0fRecruiterFilter\x12\x1c\n" +
	"\astep_id\x18\x01 \x01(\x05H\x00R\x06stepId\x88\x01\x01B\n" +
	"\n" +
	"\b_step_id\":\n" +
	"\vRecruiterId\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\x05R\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\x05R\x04rank\"\xa4\x05\n" +
	"\tRecruiter\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\x05R\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\x05R\x04rank\x12 \n" +
	"\vprotofilter\x18\x03 \x01(\tR\vprotofilter\x12%\n" +
	"\vconcurrency\x18\x04 \x01(\x05H\x00R\vconcurrency\x88\x01\x01\x12\x1f\n" +
	"\bprefetch\x18\x05 \x01(\x05H\x01R\bprefetch\x88\x01\x01\x12$\n" +
	"\vmax_workers\x18\x06 \x01(\x05H\x02R\n" +
	"maxWorkers\x88\x01\x01\x12\x16\n" +
	"\x06rounds\x18\a \x01(\x05R\x06rounds\x12\x18\n" +
	"\atimeout\x18\b \x01(\x05R\atimeout\x12%\n" +
	"\fcpu_per_task\x18\t \x01(\x05H\x03R\n" +
	"cpuPerTask\x88\x01\x01\x12+\n" +
	"\x0fmemory_per_task\x18\n" +
	" \x01(\x02H\x04R\rmemoryPerTask\x88\x01\x01\x12'\n" +
	"\rdisk_per_task\x18\v \x01(\x02H\x05R\vdiskPerTask\x88\x01\x01\x12.\n" +
	"\x10prefetch_percent\x18\f \x01(\x05H\x06R\x0fprefetchPercent\x88\x01\x01\x12,\n" +
	"\x0fconcurrency_min\x18\r \x01(\x05H\aR\x0econcurrencyMin\x88\x01\x01\x12,\n" +
	"\x0fconcurrency_max\x18\x0e \x01(\x05H\bR\x0econcurrencyMax\x88\x01\x01B\x0e\n" +
	"\f_concurrencyB\v\n" +
	"\t_prefetchB\x0e\n" +
	"\f_max_workersB\x0f\n" +
	"\r_cpu_per_taskB\x12\n" +
	"\x10_memory_per_taskB\x10\n" +
	"\x0e_disk_per_taskB\x13\n" +
	"\x11_prefetch_percentB\x12\n" +
	"\x10_concurrency_minB\x12\n" +
	"\x10_concurrency_max\"\xe0\x05\n" +
	"\x0fRecruiterUpdate\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\x05R\x06stepId\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\x05R\x04rank\x12%\n" +
	"\vprotofilter\x18\x03 \x01(\tH\x00R\vprotofilter\x88\x01\x01\x12%\n" +
	"\vconcurrency\x18\x04 \x01(\x05H\x01R\vconcurrency\x88\x01\x01\x12\x1f\n" +
	"\bprefetch\x18\x05 \x01(\x05H\x02R\bprefetch\x88\x01\x01\x12$\n" +
	"\vmax_workers\x18\x06 \x01(\x05H\x03R\n" +
	"maxWorkers\x88\x01\x01\x12\x1b\n" +
	"\x06rounds\x18\a \x01(\x05H\x04R\x06rounds\x88\x01\x01\x12\x1d\n" +
	"\atimeout\x18\b \x01(\x05H\x05R\atimeout\x88\x01\x01\x12%\n" +
	"\fcpu_per_task\x18\t \x01(\x05H\x06R\n" +
	"cpuPerTask\x88\x01\x01\x12+\n" +
	"\x0fmemory_per_task\x18\n" +
	" \x01(\x02H\aR\rmemoryPerTask\x88\x01\x01\x12'\n" +
	"\rdisk_per_task\x18\v \x01(\x02H\bR\vdiskPerTask\x88\x01\x01\x12.\n" +
	"\x10prefetch_percent\x18\f \x01(\x05H\tR\x0fprefetchPercent\x88\x01\x01\x12,\n" +
	"\x0fconcurrency_min\x18\r \x01(\x05H\n" +
	"R\x0econcurrencyMin\x88\x01\x01\x12,\n" +
	"\x0fconcurrency_max\x18\x0e \x01(\x05H\vR\x0econcurrencyMax\x88\x01\x01B\x0e\n" +
	"\f_protofilterB\x0e\n" +
	"\f_concurrencyB\v\n" +
	"\t_prefetchB\x0e\n" +
	"\f_max_workersB\t\n" +
	"\a_roundsB\n" +
	"\n" +
	"\b_timeoutB\x0f\n" +
	"\r_cpu_per_taskB\x12\n" +
	"\x10_memory_per_taskB\x10\n" +
	"\x0e_disk_per_taskB\x13\n" +
	"\x11_prefetch_percentB\x12\n" +
	"\x10_concurrency_minB\x12\n" +
	"\x10_concurrency_max\"E\n" +
	"\rRecruiterList\x124\n" +
	"\n" +
	"recruiters\x18\x01 \x03(\v2\x14.taskqueue.RecruiterR\n" +
	"recruiters\"\x8d\x01\n" +
	"\x0eWorkflowFilter\x12 \n" +
	"\tname_like\x18\x01 \x01(\tH\x00R\bnameLike\x88\x01\x01\x12\x19\n" +
	"\x05limit\x18\x02 \x01(\x05H\x01R\x05limit\x88\x01\x01\x12\x1b\n" +
	"\x06offset\x18\x03 \x01(\x05H\x02R\x06offset\x88\x01\x01B\f\n" +
	"\n" +
	"_name_likeB\b\n" +
	"\x06_limitB\t\n" +
	"\a_offset\"-\n" +
	"\n" +
	"WorkflowId\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\x05R\n" +
	"workflowId\"\xa4\x01\n" +
	"\bWorkflow\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\x05R\n" +
	"workflowId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\frun_strategy\x18\x04 \x01(\tR\vrunStrategy\x12,\n" +
	"\x0fmaximum_workers\x18\x05 \x01(\x05H\x00R\x0emaximumWorkers\x88\x01\x01B\x12\n" +
	"\x10_maximum_workers\"\xa0\x01\n" +
	"\x0fWorkflowRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12&\n" +
	"\frun_strategy\x18\x02 \x01(\tH\x00R\vrunStrategy\x88\x01\x01\x12,\n" +
	"\x0fmaximum_workers\x18\x03 \x01(\x05H\x01R\x0emaximumWorkers\x88\x01\x01B\x0f\n" +
	"\r_run_strategyB\x12\n" +
	"\x10_maximum_workers\"A\n" +
	"\fWorkflowList\x121\n" +
	"\tworkflows\x18\x01 \x03(\v2\x13.taskqueue.WorkflowR\tworkflows\"y\n" +
	"\n" +
	"StepFilter\x12\x1e\n" +
	"\n" +
	"WorkflowId\x18\x01 \x01(\x05R\n" +
	"WorkflowId\x12\x19\n" +
	"\x05limit\x18\x02 \x01(\x05H\x00R\x05limit\x88\x01\x01\x12\x1b\n" +
	"\x06offset\x18\x03 \x01(\x05H\x01R\x06offset\x88\x01\x01B\b\n" +
	"\x06_limitB\t\n" +
	"\a_offset\"!\n" +
	"\x06StepId\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\x05R\x06stepId\"y\n" +
	"\x04Step\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\x05R\x06stepId\x12#\n" +
	"\rworkflow_name\x18\x02 \x01(\tR\fworkflowName\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\x05R\n" +
	"workflowId\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\"\x93\x01\n" +
	"\vStepRequest\x12(\n" +
	"\rworkflow_name\x18\x01 \x01(\tH\x00R\fworkflowName\x88\x01\x01\x12$\n" +
	"\vworkflow_id\x18\x02 \x01(\x05H\x01R\n" +
	"workflowId\x88\x01\x01\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04nameB\x10\n" +
	"\x0e_workflow_nameB\x0e\n" +
	"\f_workflow_id\"1\n" +
	"\bStepList\x12%\n" +
	"\x05steps\x18\x01 \x03(\v2\x0f.taskqueue.StepR\x05steps\"c\n" +
	"\x10StepStatsRequest\x12$\n" +
	"\vworkflow_id\x18\x01 \x01(\x05H\x00R\n" +
	"workflowId\x88\x01\x01\x12\x19\n" +
	"\bstep_ids\x18\x02 \x03(\x05R\astepIdsB\x0e\n" +
	"\f_workflow_id\"S\n" +
	"\x05Accum\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\x12\x10\n" +
	"\x03sum\x18\x02 \x01(\x02R\x03sum\x12\x10\n" +
	"\x03min\x18\x03 \x01(\x02R\x03min\x12\x10\n" +
	"\x03max\x18\x04 \x01(\x02R\x03max\"\x96\x06\n" +
	"\tStepStats\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\x05R\x06stepId\x12\x1b\n" +
	"\tstep_name\x18\x02 \x01(\tR\bstepName\x12\x1f\n" +
	"\vtotal_tasks\x18\x03 \x01(\x05R\n" +
	"totalTasks\x12#\n" +
	"\rwaiting_tasks\x18\x04 \x01(\x05R\fwaitingTasks\x12#\n" +
	"\rpending_tasks\x18\x05 \x01(\x05R\fpendingTasks\x12%\n" +
	"\x0eaccepted_tasks\x18\x06 \x01(\x05R\racceptedTasks\x12#\n" +
	"\rrunning_tasks\x18\a \x01(\x05R\frunningTasks\x12'\n" +
	"\x0fuploading_tasks\x18\b \x01(\x05R\x0euploadingTasks\x12)\n" +
	"\x10successful_tasks\x18\t \x01(\x05R\x0fsuccessfulTasks\x12!\n" +
	"\ffailed_tasks\x18\n" +
	" \x01(\x05R\vfailedTasks\x12.\n" +
	"\x13really_failed_tasks\x18\v \x01(\x05R\x11reallyFailedTasks\x121\n" +
	"\vsuccess_run\x18\f \x01(\v2\x10.taskqueue.AccumR\n" +
	"successRun\x12/\n" +
	"\n" +
	"failed_run\x18\r \x01(\v2\x10.taskqueue.AccumR\tfailedRun\x121\n" +
	"\vrunning_run\x18\x0e \x01(\v2\x10.taskqueue.AccumR\n" +
	"runningRun\x12,\n" +
	"\bdownload\x18\x0f \x01(\v2\x10.taskqueue.AccumR\bdownload\x12(\n" +
	"\x06upload\x18\x10 \x01(\v2\x10.taskqueue.AccumR\x06upload\x12\"\n" +
	"\n" +
	"start_time\x18\x11 \x01(\x05H\x00R\tstartTime\x88\x01\x01\x12\x1e\n" +
	"\bend_time\x18\x12 \x01(\x05H\x01R\aendTime\x88\x01\x01\x12&\n" +
	"\x0fstats_eval_time\x18\x13 \x01(\x05R\rstatsEvalTimeB\r\n" +
	"\v_start_timeB\v\n" +
	"\t_end_time\"?\n" +
	"\x11StepStatsResponse\x12*\n" +
	"\x05stats\x18\x01 \x03(\v2\x14.taskqueue.StepStatsR\x05stats\"\xb4\x02\n" +
	"\vWorkerStats\x12*\n" +
	"\x11cpu_usage_percent\x18\x01 \x01(\x02R\x0fcpuUsagePercent\x12*\n" +
	"\x11mem_usage_percent\x18\x02 \x01(\x02R\x0fmemUsagePercent\x12\x1b\n" +
	"\tload_1min\x18\x03 \x01(\x02R\bload1min\x12%\n" +
	"\x0eiowait_percent\x18\x04 \x01(\x02R\riowaitPercent\x12*\n" +
	"\x05disks\x18\x05 \x03(\v2\x14.taskqueue.DiskUsageR\x05disks\x12/\n" +
	"\adisk_io\x18\x06 \x01(\v2\x16.taskqueue.DiskIOStatsR\x06diskIo\x12,\n" +
	"\x06net_io\x18\a \x01(\v2\x15.taskqueue.NetIOStatsR\x05netIo\"Q\n" +
	"\tDiskUsage\x12\x1f\n" +
	"\vdevice_name\x18\x01 \x01(\tR\n" +
	"deviceName\x12#\n" +
	"\rusage_percent\x18\x02 \x01(\x02R\fusagePercent\"\xb5\x01\n" +
	"\vDiskIOStats\x12(\n" +
	"\x10read_bytes_total\x18\x01 \x01(\x03R\x0ereadBytesTotal\x12*\n" +
	"\x11write_bytes_total\x18\x02 \x01(\x03R\x0fwriteBytesTotal\x12&\n" +
	"\x0fread_bytes_rate\x18\x03 \x01(\x02R\rreadBytesRate\x12(\n" +
	"\x10write_bytes_rate\x18\x04 \x01(\x02R\x0ewriteBytesRate\"\xb0\x01\n" +
	"\n" +
	"NetIOStats\x12(\n" +
	"\x10recv_bytes_total\x18\x01 \x01(\x03R\x0erecvBytesTotal\x12(\n" +
	"\x10sent_bytes_total\x18\x02 \x01(\x03R\x0esentBytesTotal\x12&\n" +
	"\x0frecv_bytes_rate\x18\x03 \x01(\x02R\rrecvBytesRate\x12&\n" +
	"\x0fsent_bytes_rate\x18\x04 \x01(\x02R\rsentBytesRate\"6\n" +
	"\x15GetWorkerStatsRequest\x12\x1d\n" +
	"\n" +
	"worker_ids\x18\x01 \x03(\x05R\tworkerIds\"\xc7\x01\n" +
	"\x16GetWorkerStatsResponse\x12U\n" +
	"\fworker_stats\x18\x01 \x03(\v22.taskqueue.GetWorkerStatsResponse.WorkerStatsEntryR\vworkerStats\x1aV\n" +
	"\x10WorkerStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.taskqueue.WorkerStatsR\x05value:\x028\x01\"$\n" +
	"\x10FetchListRequest\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\")\n" +
	"\x11FetchListResponse\x12\x14\n" +
	"\x05files\x18\x01 \x03(\tR\x05files\"\xa7\x01\n" +
	"\x11FetchInfoResponse\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12\x17\n" +
	"\ais_file\x18\x05 \x01(\bR\x06isFile\x12\x15\n" +
	"\x06is_dir\x18\x06 \x01(\bR\x05isDir\"E\n" +
	"\x15UploadTemplateRequest\x12\x16\n" +
	"\x06script\x18\x01 \x01(\fR\x06script\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"\xd3\x02\n" +
	"\x16UploadTemplateResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x125\n" +
	"\x14workflow_template_id\x18\x03 \x01(\x05H\x00R\x12workflowTemplateId\x88\x01\x01\x12\x17\n" +
	"\x04name\x18\x04 \x01(\tH\x01R\x04name\x88\x01\x01\x12\x1d\n" +
	"\aversion\x18\x05 \x01(\tH\x02R\aversion\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x06 \x01(\tH\x03R\vdescription\x88\x01\x01\x12\"\n" +
	"\n" +
	"param_json\x18\a \x01(\tH\x04R\tparamJson\x88\x01\x01B\x17\n" +
	"\x15_workflow_template_idB\a\n" +
	"\x05_nameB\n" +
	"\n" +
	"\b_versionB\x0e\n" +
	"\f_descriptionB\r\n" +
	"\v_param_json\"r\n" +
	"\x12RunTemplateRequest\x120\n" +
	"\x14workflow_template_id\x18\x01 \x01(\x05R\x12workflowTemplateId\x12*\n" +
	"\x11param_values_json\x18\x02 \x01(\tR\x0fparamValuesJson\"\xad\x01\n" +
	"\x0eTemplateFilter\x125\n" +
	"\x14workflow_template_id\x18\x01 \x01(\x05H\x00R\x12workflowTemplateId\x88\x01\x01\x12\x17\n" +
	"\x04name\x18\x02 \x01(\tH\x01R\x04name\x88\x01\x01\x12\x1d\n" +
	"\aversion\x18\x03 \x01(\tH\x02R\aversion\x88\x01\x01B\x17\n" +
	"\x15_workflow_template_idB\a\n" +
	"\x05_nameB\n" +
	"\n" +
	"\b_version\"\x82\x02\n" +
	"\bTemplate\x120\n" +
	"\x14workflow_template_id\x18\x01 \x01(\x05R\x12workflowTemplateId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"param_json\x18\x05 \x01(\tR\tparamJson\x12\x1f\n" +
	"\vuploaded_at\x18\x06 \x01(\tR\n" +
	"uploadedAt\x12$\n" +
	"\vuploaded_by\x18\a \x01(\x05H\x00R\n" +
	"uploadedBy\x88\x01\x01B\x0e\n" +
	"\f_uploaded_by\"A\n" +
	"\fTemplateList\x121\n" +
	"\ttemplates\x18\x01 \x03(\v2\x13.taskqueue.TemplateR\ttemplates\"\xe1\x04\n" +
	"\vTemplateRun\x12&\n" +
	"\x0ftemplate_run_id\x18\x01 \x01(\x05R\rtemplateRunId\x120\n" +
	"\x14workflow_template_id\x18\x02 \x01(\x05R\x12workflowTemplateId\x12(\n" +
	"\rtemplate_name\x18\x03 \x01(\tH\x00R\ftemplateName\x88\x01\x01\x12.\n" +
	"\x10template_version\x18\x04 \x01(\tH\x01R\x0ftemplateVersion\x88\x01\x01\x12(\n" +
	"\rworkflow_name\x18\x05 \x01(\tH\x02R\fworkflowName\x88\x01\x01\x12\x1a\n" +
	"\x06run_by\x18\x06 \x01(\x05H\x03R\x05runBy\x88\x01\x01\x12\x16\n" +
	"\x06status\x18\a \x01(\tR\x06status\x12$\n" +
	"\vworkflow_id\x18\b \x01(\x05H\x04R\n" +
	"workflowId\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"created_at\x18\t \x01(\tR\tcreatedAt\x12*\n" +
	"\x11param_values_json\x18\n" +
	" \x01(\tR\x0fparamValuesJson\x12(\n" +
	"\rerror_message\x18\v \x01(\tH\x05R\ferrorMessage\x88\x01\x01\x12+\n" +
	"\x0frun_by_username\x18\f \x01(\tH\x06R\rrunByUsername\x88\x01\x01B\x10\n" +
	"\x0e_template_nameB\x13\n" +
	"\x11_template_versionB\x10\n" +
	"\x0e_workflow_nameB\t\n" +
	"\a_run_byB\x0e\n" +
	"\f_workflow_idB\x10\n" +
	"\x0e_error_messageB\x12\n" +
	"\x10_run_by_username\"=\n" +
	"\x0fTemplateRunList\x12*\n" +
	"\x04runs\x18\x01 \x03(\v2\x16.taskqueue.TemplateRunR\x04runs\"c\n" +
	"\x11TemplateRunFilter\x125\n" +
	"\x14workflow_template_id\x18\x01 \x01(\x05H\x00R\x12workflowTemplateId\x88\x01\x01B\x17\n" +
	"\x15_workflow_template_id\"\xb4\x01\n" +
	"\x18UpdateTemplateRunRequest\x12&\n" +
	"\x0ftemplate_run_id\x18\x01 \x01(\x05R\rtemplateRunId\x12$\n" +
	"\vworkflow_id\x18\x02 \x01(\x05H\x00R\n" +
	"workflowId\x88\x01\x01\x12(\n" +
	"\rerror_message\x18\x03 \x01(\tH\x01R\ferrorMessage\x88\x01\x01B\x0e\n" +
	"\f_workflow_idB\x10\n" +
	"\x0e_error_message\"J\n" +
	"\x14WorkspaceRootRequest\x12\x1a\n" +
	"\bprovider\x18\x01 \x01(\tR\bprovider\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\"2\n" +
	"\x15WorkspaceRootResponse\x12\x19\n" +
	"\broot_uri\x18\x01 \x01(\tR\arootUri\"B\n" +
	"\x18DeleteTemplateRunRequest\x12&\n" +
	"\x0ftemplate_run_id\x18\x01 \x01(\x05R\rtemplateRunId\"c\n" +
	"\fResourceSpec\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x10\n" +
	"\x03cpu\x18\x02 \x01(\x05R\x03cpu\x12\x10\n" +
	"\x03mem\x18\x03 \x01(\x02R\x03mem\x12\x12\n" +
	"\x04disk\x18\x04 \x01(\x02R\x04disk\"\xd2\x01\n" +
	"\vWorkerEvent\x12 \n" +
	"\tworker_id\x18\x01 \x01(\x05H\x00R\bworkerId\x88\x01\x01\x12\x1f\n" +
	"\vworker_name\x18\x02 \x01(\tR\n" +
	"workerName\x12\x14\n" +
	"\x05level\x18\x03 \x01(\tR\x05level\x12\x1f\n" +
	"\vevent_class\x18\x04 \x01(\tR\n" +
	"eventClass\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12!\n" +
	"\fdetails_json\x18\x06 \x01(\tR\vdetailsJsonB\f\n" +
	"\n" +
	"_worker_id\"\xb2\x01\n" +
	"\x11WorkerEventFilter\x12 \n" +
	"\tworker_id\x18\x01 \x01(\x05H\x00R\bworkerId\x88\x01\x01\x12\x19\n" +
	"\x05level\x18\x02 \x01(\tH\x01R\x05level\x88\x01\x01\x12\x19\n" +
	"\x05class\x18\x03 \x01(\tH\x02R\x05class\x88\x01\x01\x12\x19\n" +
	"\x05limit\x18\x04 \x01(\x05H\x03R\x05limit\x88\x01\x01B\f\n" +
	"\n" +
	"_worker_idB\b\n" +
	"\x06_levelB\b\n" +
	"\x06_classB\b\n" +
	"\x06_limit\"\x92\x02\n" +
	"\x11WorkerEventRecord\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x05R\aeventId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x02 \x01(\tR\tcreatedAt\x12 \n" +
	"\tworker_id\x18\x03 \x01(\x05H\x00R\bworkerId\x88\x01\x01\x12\x1f\n" +
	"\vworker_name\x18\x04 \x01(\tR\n" +
	"workerName\x12\x14\n" +
	"\x05level\x18\x05 \x01(\tR\x05level\x12\x1f\n" +
	"\vevent_class\x18\x06 \x01(\tR\n" +
	"eventClass\x12\x18\n" +
	"\amessage\x18\a \x01(\tR\amessage\x12!\n" +
	"\fdetails_json\x18\b \x01(\tR\vdetailsJsonB\f\n" +
	"\n" +
	"_worker_id\"G\n" +
	"\x0fWorkerEventList\x124\n" +
	"\x06events\x18\x01 \x03(\v2\x1c.taskqueue.WorkerEventRecordR\x06events\"*\n" +
	"\rWorkerEventId\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x05R\aeventId\"\xd3\x01\n" +
	"\x16WorkerEventPruneFilter\x12\x1b\n" +
	"\x06before\x18\x01 \x01(\tH\x00R\x06before\x88\x01\x01\x12\x19\n" +
	"\x05level\x18\x02 \x01(\tH\x01R\x05level\x88\x01\x01\x12\x19\n" +
	"\x05class\x18\x03 \x01(\tH\x02R\x05class\x88\x01\x01\x12 \n" +
	"\tworker_id\x18\x04 \x01(\x05H\x03R\bworkerId\x88\x01\x01\x12\x17\n" +
	"\adry_run\x18\x05 \x01(\bR\x06dryRunB\t\n" +
	"\a_beforeB\b\n" +
	"\x06_levelB\b\n" +
	"\x06_classB\f\n" +
	"\n" +
	"_worker_id\"L\n" +
	"\x16WorkerEventPruneResult\x12\x18\n" +
	"\amatched\x18\x01 \x01(\x05R\amatched\x12\x18\n" +
	"\adeleted\x18\x02 \x01(\x05R\adeleted\"q\n" +
	"\bProvider\x12\x1f\n" +
	"\vprovider_id\x18\x01 \x01(\x05R\n" +
	"providerId\x12#\n" +
	"\rprovider_name\x18\x02 \x01(\tR\fproviderName\x12\x1f\n" +
	"\vconfig_name\x18\x03 \x01(\tR\n" +
	"configName\"A\n" +
	"\fProviderList\x121\n" +
	"\tproviders\x18\x01 \x03(\v2\x13.taskqueue.ProviderR\tproviders\"\x86\x01\n" +
	"\x06Region\x12\x1b\n" +
	"\tregion_id\x18\x01 \x01(\x05R\bregionId\x12\x1f\n" +
	"\vprovider_id\x18\x02 \x01(\x05R\n" +
	"providerId\x12\x1f\n" +
	"\vregion_name\x18\x03 \x01(\tR\n" +
	"regionName\x12\x1d\n" +
	"\n" +
	"is_default\x18\x04 \x01(\bR\tisDefault\"9\n" +
	"\n" +
	"RegionList\x12+\n" +
	"\aregions\x18\x01 \x03(\v2\x11.taskqueue.RegionR\aregions\"\xf4\x03\n" +
	"\x13FlavorCreateRequest\x12#\n" +
	"\rprovider_name\x18\x01 \x01(\tR\fproviderName\x12\x1f\n" +
	"\vconfig_name\x18\x02 \x01(\tR\n" +
	"configName\x12\x1f\n" +
	"\vflavor_name\x18\x03 \x01(\tR\n" +
	"flavorName\x12\x10\n" +
	"\x03cpu\x18\x04 \x01(\x05R\x03cpu\x12\x16\n" +
	"\x06memory\x18\x05 \x01(\x02R\x06memory\x12\x12\n" +
	"\x04disk\x18\x06 \x01(\x02R\x04disk\x12!\n" +
	"\tbandwidth\x18\a \x01(\x05H\x00R\tbandwidth\x88\x01\x01\x12\x15\n" +
	"\x03gpu\x18\b \x01(\tH\x01R\x03gpu\x88\x01\x01\x12\x1b\n" +
	"\x06gpumem\x18\t \x01(\x05H\x02R\x06gpumem\x88\x01\x01\x12\x1c\n" +
	"\ahas_gpu\x18\n" +
	" \x01(\bH\x03R\x06hasGpu\x88\x01\x01\x12+\n" +
	"\x0fhas_quick_disks\x18\v \x01(\bH\x04R\rhasQuickDisks\x88\x01\x01\x12!\n" +
	"\fregion_names\x18\f \x03(\tR\vregionNames\x12\x14\n" +
	"\x05costs\x18\r \x03(\x02R\x05costs\x12\x1c\n" +
	"\tevictions\x18\x0e \x03(\x02R\tevictionsB\f\n" +
	"\n" +
	"_bandwidthB\x06\n" +
	"\x04_gpuB\t\n" +
	"\a_gpumemB\n" +
	"\n" +
	"\b_has_gpuB\x12\n" +
	"\x10_has_quick_disks\"'\n" +
	"\bFlavorId\x12\x1b\n" +
	"\tflavor_id\x18\x01 \x01(\x05R\bflavorId2\x98\x1e\n" +
	"\tTaskQueue\x12=\n" +
	"\n" +
	"SubmitTask\x12\x16.taskqueue.TaskRequest\x1a\x17.taskqueue.TaskResponse\x12<\n" +
	"\x0eRegisterWorker\x12\x15.taskqueue.WorkerInfo\x1a\x13.taskqueue.WorkerId\x12X\n" +
	"\x13PingAndTakeNewTasks\x12$.taskqueue.PingAndGetNewTasksRequest\x1a\x1b.taskqueue.TaskListAndOther\x12?\n" +
	"\x10UpdateTaskStatus\x12\x1b.taskqueue.TaskStatusUpdate\x1a\x0e.taskqueue.Ack\x124\n" +
	"\fSendTaskLogs\x12\x12.taskqueue.TaskLog\x1a\x0e.taskqueue.Ack(\x01\x12?\n" +
	"\x14StreamTaskLogsOutput\x12\x11.taskqueue.TaskId\x1a\x12.taskqueue.TaskLog0\x01\x12<\n" +
	"\x11StreamTaskLogsErr\x12\x11.taskqueue.TaskId\x1a\x12.taskqueue.TaskLog0\x01\x12B\n" +
	"\fGetLogsChunk\x12\x19.taskqueue.GetLogsRequest\x1a\x17.taskqueue.LogChunkList\x12=\n" +
	"\tListTasks\x12\x1b.taskqueue.ListTasksRequest\x1a\x13.taskqueue.TaskList\x12D\n" +
	"\vListWorkers\x12\x1d.taskqueue.ListWorkersRequest\x1a\x16.taskqueue.WorkersList\x12>\n" +
	"\fCreateWorker\x12\x18.taskqueue.WorkerRequest\x1a\x14.taskqueue.WorkerIds\x12=\n" +
	"\x12UpdateWorkerStatus\x12\x17.taskqueue.WorkerStatus\x1a\x0e.taskqueue.Ack\x12;\n" +
	"\fDeleteWorker\x12\x19.taskqueue.WorkerDeletion\x1a\x10.taskqueue.JobId\x12>\n" +
	"\fUpdateWorker\x12\x1e.taskqueue.WorkerUpdateRequest\x1a\x0e.taskqueue.Ack\x12T\n" +
	"\x11GetWorkerStatuses\x12\x1e.taskqueue.WorkerStatusRequest\x1a\x1f.taskqueue.WorkerStatusResponse\x12;\n" +
	"\bListJobs\x12\x1a.taskqueue.ListJobsRequest\x1a\x13.taskqueue.JobsList\x12K\n" +
	"\x0eGetJobStatuses\x12\x1b.taskqueue.JobStatusRequest\x1a\x1c.taskqueue.JobStatusResponse\x12-\n" +
	"\tDeleteJob\x12\x10.taskqueue.JobId\x1a\x0e.taskqueue.Ack\x121\n" +
	"\tUpdateJob\x12\x14.taskqueue.JobUpdate\x1a\x0e.taskqueue.Ack\x12D\n" +
	"\vListFlavors\x12\x1d.taskqueue.ListFlavorsRequest\x1a\x16.taskqueue.FlavorsList\x12@\n" +
	"\rListProviders\x12\x16.google.protobuf.Empty\x1a\x17.taskqueue.ProviderList\x12<\n" +
	"\vListRegions\x12\x16.google.protobuf.Empty\x1a\x15.taskqueue.RegionList\x12C\n" +
	"\fCreateFlavor\x12\x1e.taskqueue.FlavorCreateRequest\x1a\x13.taskqueue.FlavorId\x12B\n" +
	"\x0fGetRcloneConfig\x12\x16.google.protobuf.Empty\x1a\x17.taskqueue.RcloneConfig\x12L\n" +
	"\x14GetDockerCredentials\x12\x16.google.protobuf.Empty\x1a\x1c.taskqueue.DockerCredentials\x12:\n" +
	"\x05Login\x12\x17.taskqueue.LoginRequest\x1a\x18.taskqueue.LoginResponse\x12*\n" +
	"\x06Logout\x12\x10.taskqueue.Token\x1a\x0e.taskqueue.Ack\x12=\n" +
	"\n" +
	"CreateUser\x12\x1c.taskqueue.CreateUserRequest\x1a\x11.taskqueue.UserId\x129\n" +
	"\tListUsers\x12\x16.google.protobuf.Empty\x1a\x14.taskqueue.UsersList\x12/\n" +
	"\n" +
	"DeleteUser\x12\x11.taskqueue.UserId\x1a\x0e.taskqueue.Ack\x12-\n" +
	"\n" +
	"UpdateUser\x12\x0f.taskqueue.User\x1a\x0e.taskqueue.Ack\x12B\n" +
	"\x0eChangePassword\x12 .taskqueue.ChangePasswordRequest\x1a\x0e.taskqueue.Ack\x12F\n" +
	"\x0eListRecruiters\x12\x1a.taskqueue.RecruiterFilter\x1a\x18.taskqueue.RecruiterList\x127\n" +
	"\x0fCreateRecruiter\x12\x14.taskqueue.Recruiter\x1a\x0e.taskqueue.Ack\x12=\n" +
	"\x0fUpdateRecruiter\x12\x1a.taskqueue.RecruiterUpdate\x1a\x0e.taskqueue.Ack\x129\n" +
	"\x0fDeleteRecruiter\x12\x16.taskqueue.RecruiterId\x1a\x0e.taskqueue.Ack\x12C\n" +
	"\rListWorkflows\x12\x19.taskqueue.WorkflowFilter\x1a\x17.taskqueue.WorkflowList\x12C\n" +
	"\x0eCreateWorkflow\x12\x1a.taskqueue.WorkflowRequest\x1a\x15.taskqueue.WorkflowId\x127\n" +
	"\x0eDeleteWorkflow\x12\x15.taskqueue.WorkflowId\x1a\x0e.taskqueue.Ack\x127\n" +
	"\tListSteps\x12\x15.taskqueue.StepFilter\x1a\x13.taskqueue.StepList\x127\n" +
	"\n" +
	"CreateStep\x12\x16.taskqueue.StepRequest\x1a\x11.taskqueue.StepId\x12/\n" +
	"\n" +
	"DeleteStep\x12\x11.taskqueue.StepId\x1a\x0e.taskqueue.Ack\x12I\n" +
	"\fGetStepStats\x12\x1b.taskqueue.StepStatsRequest\x1a\x1c.taskqueue.StepStatsResponse\x12U\n" +
	"\x0eGetWorkerStats\x12 .taskqueue.GetWorkerStatsRequest\x1a!.taskqueue.GetWorkerStatsResponse\x12F\n" +
	"\tFetchList\x12\x1b.taskqueue.FetchListRequest\x1a\x1c.taskqueue.FetchListResponse\x12F\n" +
	"\tFetchInfo\x12\x1b.taskqueue.FetchListRequest\x1a\x1c.taskqueue.FetchInfoResponse\x12U\n" +
	"\x0eUploadTemplate\x12 .taskqueue.UploadTemplateRequest\x1a!.taskqueue.UploadTemplateResponse\x12D\n" +
	"\vRunTemplate\x12\x1d.taskqueue.RunTemplateRequest\x1a\x16.taskqueue.TemplateRun\x12C\n" +
	"\rListTemplates\x12\x19.taskqueue.TemplateFilter\x1a\x17.taskqueue.TemplateList\x12L\n" +
	"\x10ListTemplateRuns\x12\x1c.taskqueue.TemplateRunFilter\x1a\x1a.taskqueue.TemplateRunList\x12H\n" +
	"\x11UpdateTemplateRun\x12#.taskqueue.UpdateTemplateRunRequest\x1a\x0e.taskqueue.Ack\x12H\n" +
	"\x11DeleteTemplateRun\x12#.taskqueue.DeleteTemplateRunRequest\x1a\x0e.taskqueue.Ack\x12U\n" +
	"\x10GetWorkspaceRoot\x12\x1f.taskqueue.WorkspaceRootRequest\x1a .taskqueue.WorkspaceRootResponse\x12A\n" +
	"\x16RegisterSpecifications\x12\x17.taskqueue.ResourceSpec\x1a\x0e.taskqueue.Ack\x12;\n" +
	"\x11ReportWorkerEvent\x12\x16.taskqueue.WorkerEvent\x1a\x0e.taskqueue.Ack\x12L\n" +
	"\x10ListWorkerEvents\x12\x1c.taskqueue.WorkerEventFilter\x1a\x1a.taskqueue.WorkerEventList\x12=\n" +
	"\x11DeleteWorkerEvent\x12\x18.taskqueue.WorkerEventId\x1a\x0e.taskqueue.Ack\x12Y\n" +
	"\x11PruneWorkerEvents\x12!.taskqueue.WorkerEventPruneFilter\x1a!.taskqueue.WorkerEventPruneResultB\x11Z\x0fgen/taskqueuepbb\x06proto3"

var (
	file_taskqueue_proto_rawDescOnce sync.Once
	file_taskqueue_proto_rawDescData []byte
)

func file_taskqueue_proto_rawDescGZIP() []byte {
	file_taskqueue_proto_rawDescOnce.Do(func() {
		file_taskqueue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_taskqueue_proto_rawDesc), len(file_taskqueue_proto_rawDesc)))
	})
	return file_taskqueue_proto_rawDescData
}

var file_taskqueue_proto_msgTypes = make([]protoimpl.MessageInfo, 109)
var file_taskqueue_proto_goTypes = []any{
	(*TaskResponse)(nil),              // 0: taskqueue.TaskResponse
	(*WorkerInfo)(nil),                // 1: taskqueue.WorkerInfo
	(*TaskRequest)(nil),               // 2: taskqueue.TaskRequest
	(*Task)(nil),                      // 3: taskqueue.Task
	(*TaskList)(nil),                  // 4: taskqueue.TaskList
	(*Worker)(nil),                    // 5: taskqueue.Worker
	(*WorkersList)(nil),               // 6: taskqueue.WorkersList
	(*ListWorkersRequest)(nil),        // 7: taskqueue.ListWorkersRequest
	(*TaskUpdate)(nil),                // 8: taskqueue.TaskUpdate
	(*TaskUpdateList)(nil),            // 9: taskqueue.TaskUpdateList
	(*TaskListAndOther)(nil),          // 10: taskqueue.TaskListAndOther
	(*TaskStatusUpdate)(nil),          // 11: taskqueue.TaskStatusUpdate
	(*TaskLog)(nil),                   // 12: taskqueue.TaskLog
	(*GetLogsRequest)(nil),            // 13: taskqueue.GetLogsRequest
	(*LogChunk)(nil),                  // 14: taskqueue.LogChunk
	(*LogChunkList)(nil),              // 15: taskqueue.LogChunkList
	(*TaskIds)(nil),                   // 16: taskqueue.TaskIds
	(*TaskId)(nil),                    // 17: taskqueue.TaskId
	(*WorkerId)(nil),                  // 18: taskqueue.WorkerId
	(*WorkerDeletion)(nil),            // 19: taskqueue.WorkerDeletion
	(*WorkerStatusRequest)(nil),       // 20: taskqueue.WorkerStatusRequest
	(*WorkerStatus)(nil),              // 21: taskqueue.WorkerStatus
	(*WorkerStatusResponse)(nil),      // 22: taskqueue.WorkerStatusResponse
	(*WorkerDetails)(nil),             // 23: taskqueue.WorkerDetails
	(*WorkerIds)(nil),                 // 24: taskqueue.WorkerIds
	(*PingAndGetNewTasksRequest)(nil), // 25: taskqueue.PingAndGetNewTasksRequest
	(*Ack)(nil),                       // 26: taskqueue.Ack
	(*ListTasksRequest)(nil),          // 27: taskqueue.ListTasksRequest
	(*WorkerRequest)(nil),             // 28: taskqueue.WorkerRequest
	(*WorkerUpdateRequest)(nil),       // 29: taskqueue.WorkerUpdateRequest
	(*ListFlavorsRequest)(nil),        // 30: taskqueue.ListFlavorsRequest
	(*Flavor)(nil),                    // 31: taskqueue.Flavor
	(*FlavorsList)(nil),               // 32: taskqueue.FlavorsList
	(*ListJobsRequest)(nil),           // 33: taskqueue.ListJobsRequest
	(*Job)(nil),                       // 34: taskqueue.Job
	(*JobId)(nil),                     // 35: taskqueue.JobId
	(*JobsList)(nil),                  // 36: taskqueue.JobsList
	(*JobStatusRequest)(nil),          // 37: taskqueue.JobStatusRequest
	(*JobStatus)(nil),                 // 38: taskqueue.JobStatus
	(*JobStatusResponse)(nil),         // 39: taskqueue.JobStatusResponse
	(*JobUpdate)(nil),                 // 40: taskqueue.JobUpdate
	(*RcloneConfig)(nil),              // 41: taskqueue.RcloneConfig
	(*DockerCredential)(nil),          // 42: taskqueue.DockerCredential
	(*DockerCredentials)(nil),         // 43: taskqueue.DockerCredentials
	(*LoginRequest)(nil),              // 44: taskqueue.LoginRequest
	(*LoginResponse)(nil),             // 45: taskqueue.LoginResponse
	(*Token)(nil),                     // 46: taskqueue.Token
	(*CreateUserRequest)(nil),         // 47: taskqueue.CreateUserRequest
	(*UserId)(nil),                    // 48: taskqueue.UserId
	(*User)(nil),                      // 49: taskqueue.User
	(*UsersList)(nil),                 // 50: taskqueue.UsersList
	(*ChangePasswordRequest)(nil),     // 51: taskqueue.ChangePasswordRequest
	(*RecruiterFilter)(nil),           // 52: taskqueue.RecruiterFilter
	(*RecruiterId)(nil),               // 53: taskqueue.RecruiterId
	(*Recruiter)(nil),                 // 54: taskqueue.Recruiter
	(*RecruiterUpdate)(nil),           // 55: taskqueue.RecruiterUpdate
	(*RecruiterList)(nil),             // 56: taskqueue.RecruiterList
	(*WorkflowFilter)(nil),            // 57: taskqueue.WorkflowFilter
	(*WorkflowId)(nil),                // 58: taskqueue.WorkflowId
	(*Workflow)(nil),                  // 59: taskqueue.Workflow
	(*WorkflowRequest)(nil),           // 60: taskqueue.WorkflowRequest
	(*WorkflowList)(nil),              // 61: taskqueue.WorkflowList
	(*StepFilter)(nil),                // 62: taskqueue.StepFilter
	(*StepId)(nil),                    // 63: taskqueue.StepId
	(*Step)(nil),                      // 64: taskqueue.Step
	(*StepRequest)(nil),               // 65: taskqueue.StepRequest
	(*StepList)(nil),                  // 66: taskqueue.StepList
	(*StepStatsRequest)(nil),          // 67: taskqueue.StepStatsRequest
	(*Accum)(nil),                     // 68: taskqueue.Accum
	(*StepStats)(nil),                 // 69: taskqueue.StepStats
	(*StepStatsResponse)(nil),         // 70: taskqueue.StepStatsResponse
	(*WorkerStats)(nil),               // 71: taskqueue.WorkerStats
	(*DiskUsage)(nil),                 // 72: taskqueue.DiskUsage
	(*DiskIOStats)(nil),               // 73: taskqueue.DiskIOStats
	(*NetIOStats)(nil),                // 74: taskqueue.NetIOStats
	(*GetWorkerStatsRequest)(nil),     // 75: taskqueue.GetWorkerStatsRequest
	(*GetWorkerStatsResponse)(nil),    // 76: taskqueue.GetWorkerStatsResponse
	(*FetchListRequest)(nil),          // 77: taskqueue.FetchListRequest
	(*FetchListResponse)(nil),         // 78: taskqueue.FetchListResponse
	(*FetchInfoResponse)(nil),         // 79: taskqueue.FetchInfoResponse
	(*UploadTemplateRequest)(nil),     // 80: taskqueue.UploadTemplateRequest
	(*UploadTemplateResponse)(nil),    // 81: taskqueue.UploadTemplateResponse
	(*RunTemplateRequest)(nil),        // 82: taskqueue.RunTemplateRequest
	(*TemplateFilter)(nil),            // 83: taskqueue.TemplateFilter
	(*Template)(nil),                  // 84: taskqueue.Template
	(*TemplateList)(nil),              // 85: taskqueue.TemplateList
	(*TemplateRun)(nil),               // 86: taskqueue.TemplateRun
	(*TemplateRunList)(nil),           // 87: taskqueue.TemplateRunList
	(*TemplateRunFilter)(nil),         // 88: taskqueue.TemplateRunFilter
	(*UpdateTemplateRunRequest)(nil),  // 89: taskqueue.UpdateTemplateRunRequest
	(*WorkspaceRootRequest)(nil),      // 90: taskqueue.WorkspaceRootRequest
	(*WorkspaceRootResponse)(nil),     // 91: taskqueue.WorkspaceRootResponse
	(*DeleteTemplateRunRequest)(nil),  // 92: taskqueue.DeleteTemplateRunRequest
	(*ResourceSpec)(nil),              // 93: taskqueue.ResourceSpec
	(*WorkerEvent)(nil),               // 94: taskqueue.WorkerEvent
	(*WorkerEventFilter)(nil),         // 95: taskqueue.WorkerEventFilter
	(*WorkerEventRecord)(nil),         // 96: taskqueue.WorkerEventRecord
	(*WorkerEventList)(nil),           // 97: taskqueue.WorkerEventList
	(*WorkerEventId)(nil),             // 98: taskqueue.WorkerEventId
	(*WorkerEventPruneFilter)(nil),    // 99: taskqueue.WorkerEventPruneFilter
	(*WorkerEventPruneResult)(nil),    // 100: taskqueue.WorkerEventPruneResult
	(*Provider)(nil),                  // 101: taskqueue.Provider
	(*ProviderList)(nil),              // 102: taskqueue.ProviderList
	(*Region)(nil),                    // 103: taskqueue.Region
	(*RegionList)(nil),                // 104: taskqueue.RegionList
	(*FlavorCreateRequest)(nil),       // 105: taskqueue.FlavorCreateRequest
	(*FlavorId)(nil),                  // 106: taskqueue.FlavorId
	nil,                               // 107: taskqueue.TaskUpdateList.UpdatesEntry
	nil,                               // 108: taskqueue.GetWorkerStatsResponse.WorkerStatsEntry
	(*emptypb.Empty)(nil),             // 109: google.protobuf.Empty
}
var file_taskqueue_proto_depIdxs = []int32{
	3,   // 0: taskqueue.TaskList.tasks:type_name -> taskqueue.Task
	5,   // 1: taskqueue.WorkersList.workers:type_name -> taskqueue.Worker
	107, // 2: taskqueue.TaskUpdateList.updates:type_name -> taskqueue.TaskUpdateList.UpdatesEntry
	3,   // 3: taskqueue.TaskListAndOther.tasks:type_name -> taskqueue.Task
	9,   // 4: taskqueue.TaskListAndOther.updates:type_name -> taskqueue.TaskUpdateList
	14,  // 5: taskqueue.LogChunkList.logs:type_name -> taskqueue.LogChunk
	21,  // 6: taskqueue.WorkerStatusResponse.statuses:type_name -> taskqueue.WorkerStatus
	23,  // 7: taskqueue.WorkerIds.workers_details:type_name -> taskqueue.WorkerDetails
	71,  // 8: taskqueue.PingAndGetNewTasksRequest.stats:type_name -> taskqueue.WorkerStats
	31,  // 9: taskqueue.FlavorsList.flavors:type_name -> taskqueue.Flavor
	34,  // 10: taskqueue.JobsList.jobs:type_name -> taskqueue.Job
	38,  // 11: taskqueue.JobStatusResponse.statuses:type_name -> taskqueue.JobStatus
	42,  // 12: taskqueue.DockerCredentials.credentials:type_name -> taskqueue.DockerCredential
	49,  // 13: taskqueue.UsersList.users:type_name -> taskqueue.User
	54,  // 14: taskqueue.RecruiterList.recruiters:type_name -> taskqueue.Recruiter
	59,  // 15: taskqueue.WorkflowList.workflows:type_name -> taskqueue.Workflow
	64,  // 16: taskqueue.StepList.steps:type_name -> taskqueue.Step
	68,  // 17: taskqueue.StepStats.success_run:type_name -> taskqueue.Accum
	68,  // 18: taskqueue.StepStats.failed_run:type_name -> taskqueue.Accum
	68,  // 19: taskqueue.StepStats.running_run:type_name -> taskqueue.Accum
	68,  // 20: taskqueue.StepStats.download:type_name -> taskqueue.Accum
	68,  // 21: taskqueue.StepStats.upload:type_name -> taskqueue.Accum
	69,  // 22: taskqueue.StepStatsResponse.stats:type_name -> taskqueue.StepStats
	72,  // 23: taskqueue.WorkerStats.disks:type_name -> taskqueue.DiskUsage
	73,  // 24: taskqueue.WorkerStats.disk_io:type_name -> taskqueue.DiskIOStats
	74,  // 25: taskqueue.WorkerStats.net_io:type_name -> taskqueue.NetIOStats
	108, // 26: taskqueue.GetWorkerStatsResponse.worker_stats:type_name -> taskqueue.GetWorkerStatsResponse.WorkerStatsEntry
	84,  // 27: taskqueue.TemplateList.templates:type_name -> taskqueue.Template
	86,  // 28: taskqueue.TemplateRunList.runs:type_name -> taskqueue.TemplateRun
	96,  // 29: taskqueue.WorkerEventList.events:type_name -> taskqueue.WorkerEventRecord
	101, // 30: taskqueue.ProviderList.providers:type_name -> taskqueue.Provider
	103, // 31: taskqueue.RegionList.regions:type_name -> taskqueue.Region
	8,   // 32: taskqueue.TaskUpdateList.UpdatesEntry.value:type_name -> taskqueue.TaskUpdate
	71,  // 33: taskqueue.GetWorkerStatsResponse.WorkerStatsEntry.value:type_name -> taskqueue.WorkerStats
	2,   // 34: taskqueue.TaskQueue.SubmitTask:input_type -> taskqueue.TaskRequest
	1,   // 35: taskqueue.TaskQueue.RegisterWorker:input_type -> taskqueue.WorkerInfo
	25,  // 36: taskqueue.TaskQueue.PingAndTakeNewTasks:input_type -> taskqueue.PingAndGetNewTasksRequest
	11,  // 37: taskqueue.TaskQueue.UpdateTaskStatus:input_type -> taskqueue.TaskStatusUpdate
	12,  // 38: taskqueue.TaskQueue.SendTaskLogs:input_type -> taskqueue.TaskLog
	17,  // 39: taskqueue.TaskQueue.StreamTaskLogsOutput:input_type -> taskqueue.TaskId
	17,  // 40: taskqueue.TaskQueue.StreamTaskLogsErr:input_type -> taskqueue.TaskId
	13,  // 41: taskqueue.TaskQueue.GetLogsChunk:input_type -> taskqueue.GetLogsRequest
	27,  // 42: taskqueue.TaskQueue.ListTasks:input_type -> taskqueue.ListTasksRequest
	7,   // 43: taskqueue.TaskQueue.ListWorkers:input_type -> taskqueue.ListWorkersRequest
	28,  // 44: taskqueue.TaskQueue.CreateWorker:input_type -> taskqueue.WorkerRequest
	21,  // 45: taskqueue.TaskQueue.UpdateWorkerStatus:input_type -> taskqueue.WorkerStatus
	19,  // 46: taskqueue.TaskQueue.DeleteWorker:input_type -> taskqueue.WorkerDeletion
	29,  // 47: taskqueue.TaskQueue.UpdateWorker:input_type -> taskqueue.WorkerUpdateRequest
	20,  // 48: taskqueue.TaskQueue.GetWorkerStatuses:input_type -> taskqueue.WorkerStatusRequest
	33,  // 49: taskqueue.TaskQueue.ListJobs:input_type -> taskqueue.ListJobsRequest
	37,  // 50: taskqueue.TaskQueue.GetJobStatuses:input_type -> taskqueue.JobStatusRequest
	35,  // 51: taskqueue.TaskQueue.DeleteJob:input_type -> taskqueue.JobId
	40,  // 52: taskqueue.TaskQueue.UpdateJob:input_type -> taskqueue.JobUpdate
	30,  // 53: taskqueue.TaskQueue.ListFlavors:input_type -> taskqueue.ListFlavorsRequest
	109, // 54: taskqueue.TaskQueue.ListProviders:input_type -> google.protobuf.Empty
	109, // 55: taskqueue.TaskQueue.ListRegions:input_type -> google.protobuf.Empty
	105, // 56: taskqueue.TaskQueue.CreateFlavor:input_type -> taskqueue.FlavorCreateRequest
	109, // 57: taskqueue.TaskQueue.GetRcloneConfig:input_type -> google.protobuf.Empty
	109, // 58: taskqueue.TaskQueue.GetDockerCredentials:input_type -> google.protobuf.Empty
	44,  // 59: taskqueue.TaskQueue.Login:input_type -> taskqueue.LoginRequest
	46,  // 60: taskqueue.TaskQueue.Logout:input_type -> taskqueue.Token
	47,  // 61: taskqueue.TaskQueue.CreateUser:input_type -> taskqueue.CreateUserRequest
	109, // 62: taskqueue.TaskQueue.ListUsers:input_type -> google.protobuf.Empty
	48,  // 63: taskqueue.TaskQueue.DeleteUser:input_type -> taskqueue.UserId
	49,  // 64: taskqueue.TaskQueue.UpdateUser:input_type -> taskqueue.User
	51,  // 65: taskqueue.TaskQueue.ChangePassword:input_type -> taskqueue.ChangePasswordRequest
	52,  // 66: taskqueue.TaskQueue.ListRecruiters:input_type -> taskqueue.RecruiterFilter
	54,  // 67: taskqueue.TaskQueue.CreateRecruiter:input_type -> taskqueue.Recruiter
	55,  // 68: taskqueue.TaskQueue.UpdateRecruiter:input_type -> taskqueue.RecruiterUpdate
	53,  // 69: taskqueue.TaskQueue.DeleteRecruiter:input_type -> taskqueue.RecruiterId
	57,  // 70: taskqueue.TaskQueue.ListWorkflows:input_type -> taskqueue.WorkflowFilter
	60,  // 71: taskqueue.TaskQueue.CreateWorkflow:input_type -> taskqueue.WorkflowRequest
	58,  // 72: taskqueue.TaskQueue.DeleteWorkflow:input_type -> taskqueue.WorkflowId
	62,  // 73: taskqueue.TaskQueue.ListSteps:input_type -> taskqueue.StepFilter
	65,  // 74: taskqueue.TaskQueue.CreateStep:input_type -> taskqueue.StepRequest
	63,  // 75: taskqueue.TaskQueue.DeleteStep:input_type -> taskqueue.StepId
	67,  // 76: taskqueue.TaskQueue.GetStepStats:input_type -> taskqueue.StepStatsRequest
	75,  // 77: taskqueue.TaskQueue.GetWorkerStats:input_type -> taskqueue.GetWorkerStatsRequest
	77,  // 78: taskqueue.TaskQueue.FetchList:input_type -> taskqueue.FetchListRequest
	77,  // 79: taskqueue.TaskQueue.FetchInfo:input_type -> taskqueue.FetchListRequest
	80,  // 80: taskqueue.TaskQueue.UploadTemplate:input_type -> taskqueue.UploadTemplateRequest
	82,  // 81: taskqueue.TaskQueue.RunTemplate:input_type -> taskqueue.RunTemplateRequest
	83,  // 82: taskqueue.TaskQueue.ListTemplates:input_type -> taskqueue.TemplateFilter
	88,  // 83: taskqueue.TaskQueue.ListTemplateRuns:input_type -> taskqueue.TemplateRunFilter
	89,  // 84: taskqueue.TaskQueue.UpdateTemplateRun:input_type -> taskqueue.UpdateTemplateRunRequest
	92,  // 85: taskqueue.TaskQueue.DeleteTemplateRun:input_type -> taskqueue.DeleteTemplateRunRequest
	90,  // 86: taskqueue.TaskQueue.GetWorkspaceRoot:input_type -> taskqueue.WorkspaceRootRequest
	93,  // 87: taskqueue.TaskQueue.RegisterSpecifications:input_type -> taskqueue.ResourceSpec
	94,  // 88: taskqueue.TaskQueue.ReportWorkerEvent:input_type -> taskqueue.WorkerEvent
	95,  // 89: taskqueue.TaskQueue.ListWorkerEvents:input_type -> taskqueue.WorkerEventFilter
	98,  // 90: taskqueue.TaskQueue.DeleteWorkerEvent:input_type -> taskqueue.WorkerEventId
	99,  // 91: taskqueue.TaskQueue.PruneWorkerEvents:input_type -> taskqueue.WorkerEventPruneFilter
	0,   // 92: taskqueue.TaskQueue.SubmitTask:output_type -> taskqueue.TaskResponse
	18,  // 93: taskqueue.TaskQueue.RegisterWorker:output_type -> taskqueue.WorkerId
	10,  // 94: taskqueue.TaskQueue.PingAndTakeNewTasks:output_type -> taskqueue.TaskListAndOther
	26,  // 95: taskqueue.TaskQueue.UpdateTaskStatus:output_type -> taskqueue.Ack
	26,  // 96: taskqueue.TaskQueue.SendTaskLogs:output_type -> taskqueue.Ack
	12,  // 97: taskqueue.TaskQueue.StreamTaskLogsOutput:output_type -> taskqueue.TaskLog
	12,  // 98: taskqueue.TaskQueue.StreamTaskLogsErr:output_type -> taskqueue.TaskLog
	15,  // 99: taskqueue.TaskQueue.GetLogsChunk:output_type -> taskqueue.LogChunkList
	4,   // 100: taskqueue.TaskQueue.ListTasks:output_type -> taskqueue.TaskList
	6,   // 101: taskqueue.TaskQueue.ListWorkers:output_type -> taskqueue.WorkersList
	24,  // 102: taskqueue.TaskQueue.CreateWorker:output_type -> taskqueue.WorkerIds
	26,  // 103: taskqueue.TaskQueue.UpdateWorkerStatus:output_type -> taskqueue.Ack
	35,  // 104: taskqueue.TaskQueue.DeleteWorker:output_type -> taskqueue.JobId
	26,  // 105: taskqueue.TaskQueue.UpdateWorker:output_type -> taskqueue.Ack
	22,  // 106: taskqueue.TaskQueue.GetWorkerStatuses:output_type -> taskqueue.WorkerStatusResponse
	36,  // 107: taskqueue.TaskQueue.ListJobs:output_type -> taskqueue.JobsList
	39,  // 108: taskqueue.TaskQueue.GetJobStatuses:output_type -> taskqueue.JobStatusResponse
	26,  // 109: taskqueue.TaskQueue.DeleteJob:output_type -> taskqueue.Ack
	26,  // 110: taskqueue.TaskQueue.UpdateJob:output_type -> taskqueue.Ack
	32,  // 111: taskqueue.TaskQueue.ListFlavors:output_type -> taskqueue.FlavorsList
	102, // 112: taskqueue.TaskQueue.ListProviders:output_type -> taskqueue.ProviderList
	104, // 113: taskqueue.TaskQueue.ListRegions:output_type -> taskqueue.RegionList
	106, // 114: taskqueue.TaskQueue.CreateFlavor:output_type -> taskqueue.FlavorId
	41,  // 115: taskqueue.TaskQueue.GetRcloneConfig:output_type -> taskqueue.RcloneConfig
	43,  // 116: taskqueue.TaskQueue.GetDockerCredentials:output_type -> taskqueue.DockerCredentials
	45,  // 117: taskqueue.TaskQueue.Login:output_type -> taskqueue.LoginResponse
	26,  // 118: taskqueue.TaskQueue.Logout:output_type -> taskqueue.Ack
	48,  // 119: taskqueue.TaskQueue.CreateUser:output_type -> taskqueue.UserId
	50,  // 120: taskqueue.TaskQueue.ListUsers:output_type -> taskqueue.UsersList
	26,  // 121: taskqueue.TaskQueue.DeleteUser:output_type -> taskqueue.Ack
	26,  // 122: taskqueue.TaskQueue.UpdateUser:output_type -> taskqueue.Ack
	26,  // 123: taskqueue.TaskQueue.ChangePassword:output_type -> taskqueue.Ack
	56,  // 124: taskqueue.TaskQueue.ListRecruiters:output_type -> taskqueue.RecruiterList
	26,  // 125: taskqueue.TaskQueue.CreateRecruiter:output_type -> taskqueue.Ack
	26,  // 126: taskqueue.TaskQueue.UpdateRecruiter:output_type -> taskqueue.Ack
	26,  // 127: taskqueue.TaskQueue.DeleteRecruiter:output_type -> taskqueue.Ack
	61,  // 128: taskqueue.TaskQueue.ListWorkflows:output_type -> taskqueue.WorkflowList
	58,  // 129: taskqueue.TaskQueue.CreateWorkflow:output_type -> taskqueue.WorkflowId
	26,  // 130: taskqueue.TaskQueue.DeleteWorkflow:output_type -> taskqueue.Ack
	66,  // 131: taskqueue.TaskQueue.ListSteps:output_type -> taskqueue.StepList
	63,  // 132: taskqueue.TaskQueue.CreateStep:output_type -> taskqueue.StepId
	26,  // 133: taskqueue.TaskQueue.DeleteStep:output_type -> taskqueue.Ack
	70,  // 134: taskqueue.TaskQueue.GetStepStats:output_type -> taskqueue.StepStatsResponse
	76,  // 135: taskqueue.TaskQueue.GetWorkerStats:output_type -> taskqueue.GetWorkerStatsResponse
	78,  // 136: taskqueue.TaskQueue.FetchList:output_type -> taskqueue.FetchListResponse
	79,  // 137: taskqueue.TaskQueue.FetchInfo:output_type -> taskqueue.FetchInfoResponse
	81,  // 138: taskqueue.TaskQueue.UploadTemplate:output_type -> taskqueue.UploadTemplateResponse
	86,  // 139: taskqueue.TaskQueue.RunTemplate:output_type -> taskqueue.TemplateRun
	85,  // 140: taskqueue.TaskQueue.ListTemplates:output_type -> taskqueue.TemplateList
	87,  // 141: taskqueue.TaskQueue.ListTemplateRuns:output_type -> taskqueue.TemplateRunList
	26,  // 142: taskqueue.TaskQueue.UpdateTemplateRun:output_type -> taskqueue.Ack
	26,  // 143: taskqueue.TaskQueue.DeleteTemplateRun:output_type -> taskqueue.Ack
	91,  // 144: taskqueue.TaskQueue.GetWorkspaceRoot:output_type -> taskqueue.WorkspaceRootResponse
	26,  // 145: taskqueue.TaskQueue.RegisterSpecifications:output_type -> taskqueue.Ack
	26,  // 146: taskqueue.TaskQueue.ReportWorkerEvent:output_type -> taskqueue.Ack
	97,  // 147: taskqueue.TaskQueue.ListWorkerEvents:output_type -> taskqueue.WorkerEventList
	26,  // 148: taskqueue.TaskQueue.DeleteWorkerEvent:output_type -> taskqueue.Ack
	100, // 149: taskqueue.TaskQueue.PruneWorkerEvents:output_type -> taskqueue.WorkerEventPruneResult
	92,  // [92:150] is the sub-list for method output_type
	34,  // [34:92] is the sub-list for method input_type
	34,  // [34:34] is the sub-list for extension type_name
	34,  // [34:34] is the sub-list for extension extendee
	0,   // [0:34] is the sub-list for field type_name
}

func init() { file_taskqueue_proto_init() }
func file_taskqueue_proto_init() {
	if File_taskqueue_proto != nil {
		return
	}
	file_taskqueue_proto_msgTypes[1].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[2].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[3].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[5].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[7].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[11].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[13].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[19].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[27].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[28].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[29].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[33].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[40].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[49].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[52].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[54].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[55].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[57].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[59].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[60].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[62].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[65].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[67].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[69].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[81].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[83].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[84].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[86].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[88].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[89].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[94].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[95].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[96].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[99].OneofWrappers = []any{}
	file_taskqueue_proto_msgTypes[105].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_taskqueue_proto_rawDesc), len(file_taskqueue_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   109,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taskqueue_proto_goTypes,
		DependencyIndexes: file_taskqueue_proto_depIdxs,
		MessageInfos:      file_taskqueue_proto_msgTypes,
	}.Build()
	File_taskqueue_proto = out.File
	file_taskqueue_proto_goTypes = nil
	file_taskqueue_proto_depIdxs = nil
}
