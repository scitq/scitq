syntax = "proto3";

package taskqueue;

option go_package = "gen/taskqueuepb";

import "google/protobuf/empty.proto";

service TaskQueue {
    rpc SubmitTask(TaskRequest) returns (TaskResponse);
    rpc RegisterWorker(WorkerInfo) returns (WorkerId);
    rpc PingAndTakeNewTasks(PingAndGetNewTasksRequest) returns (TaskListAndOther);
    rpc UpdateTaskStatus(TaskStatusUpdate) returns (Ack);
    rpc SendTaskLogs(stream TaskLog) returns (Ack);
    rpc StreamTaskLogsOutput(TaskId) returns (stream TaskLog);
    rpc StreamTaskLogsErr(TaskId) returns (stream TaskLog);
    rpc GetLogsChunk(GetLogsRequest) returns (LogChunkList);
    rpc ListTasks (ListTasksRequest) returns (TaskList);
    rpc ListWorkers (ListWorkersRequest) returns (WorkersList);
    rpc CreateWorker(WorkerRequest) returns (WorkerIds);
    rpc UpdateWorkerStatus(WorkerStatus) returns (Ack);
    rpc DeleteWorker(WorkerId) returns (JobId);
    rpc UpdateWorker(WorkerUpdateRequest) returns (Ack);
    rpc GetWorkerStatuses (WorkerStatusRequest) returns (WorkerStatusResponse);
    rpc ListJobs (ListJobsRequest) returns (JobsList);
    rpc GetJobStatuses (JobStatusRequest) returns (JobStatusResponse);
    rpc DeleteJob (JobId) returns (Ack);
    rpc ListFlavors (ListFlavorsRequest) returns (FlavorsList);
    rpc GetRcloneConfig(google.protobuf.Empty) returns (RcloneConfig);
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Logout(Token) returns (Ack);
    rpc CreateUser(CreateUserRequest) returns (UserId);
    rpc ListUsers(google.protobuf.Empty) returns (UsersList);
    rpc DeleteUser(UserId) returns (Ack);
    rpc UpdateUser(User) returns (Ack);
    rpc ChangePassword(ChangePasswordRequest) returns (Ack);
    rpc ListRecruiters(RecruiterFilter) returns (RecruiterList);
    rpc CreateRecruiter(Recruiter) returns (Ack);
    rpc UpdateRecruiter(RecruiterUpdate) returns (Ack);
    rpc DeleteRecruiter(RecruiterId) returns (Ack);
    rpc ListWorkflows(WorkflowFilter) returns (WorkflowList);
    rpc CreateWorkflow(WorkflowRequest) returns (WorkflowId);
    rpc DeleteWorkflow(WorkflowId) returns (Ack);
    rpc ListSteps(WorkflowId) returns (StepList);
    rpc CreateStep(StepRequest) returns (StepId);
    rpc DeleteStep(StepId) returns (Ack);
    rpc GetWorkerStats (GetWorkerStatsRequest) returns (GetWorkerStatsResponse);
    rpc FetchList (FetchListRequest) returns (FetchListResponse);
    // Template system
    rpc UploadTemplate(UploadTemplateRequest) returns (UploadTemplateResponse);
    rpc RunTemplate(RunTemplateRequest) returns (TemplateRun);
    rpc ListTemplates(TemplateFilter) returns (TemplateList);
    rpc ListTemplateRuns(TemplateRunFilter) returns (TemplateRunList);
    rpc UpdateTemplateRun(UpdateTemplateRunRequest) returns (Ack);
    rpc DeleteTemplateRun(DeleteTemplateRunRequest) returns (Ack);
    rpc GetWorkspaceRoot(WorkspaceRootRequest) returns (WorkspaceRootResponse);
}   

message TaskResponse {
    uint32 task_id = 1;
}

message WorkerInfo {
    string name = 1;
    optional uint32 concurrency = 2;
}

message TaskRequest {
    string command = 1;
    optional string shell = 2;
    string container = 3;
    optional string container_options = 4;
    optional uint32 step_id = 5;
    repeated string input = 6;
    repeated string resource = 7;
    optional string output = 8;
    optional uint32 retry = 9;
    optional bool is_final  = 10;
    optional bool uses_cache  = 11;
    optional float download_timeout  = 12;
    optional float running_timeout  = 13;
    optional float upload_timeout  = 14;
    string status = 15;
    repeated uint32 dependency = 16; // IDs of tasks that this task depends on
    optional string task_name = 17;
}

message Task {
    uint32 task_id = 1;
    string command = 2;
    optional string shell = 3;
    string container = 4;
    optional string container_options = 5;
    optional uint32 step_id = 6;
    repeated string input = 7;
    repeated string resource = 8;
    optional string output = 9;
    optional uint32 retry = 10;
    optional bool is_final  = 11;
    optional bool uses_cache  = 12;
    optional float download_timeout  = 13;
    optional float running_timeout  = 14;
    optional float upload_timeout  = 15;
    string status = 16;
    optional uint32 worker_id = 17;
    optional uint32 workflow_id = 18;
    optional string task_name = 19;
}

message TaskList {
    repeated Task tasks = 1;
}

message Worker {
    uint32 worker_id = 1;
    string name = 2;
    uint32 concurrency = 3;
    uint32 prefetch = 4;
    string status = 5;
    string ipv4 = 6;
    string ipv6 = 7;
    string flavor = 8;
    string provider = 9;
    string region = 10;
}


message WorkersList {
    repeated Worker workers = 1;
}

message ListWorkersRequest {
}

message TaskUpdate {
    double weight = 1; 
}

message TaskUpdateList {
    map<uint32, TaskUpdate> updates = 1; // optional â€” can be empty
}

message TaskListAndOther {
    repeated Task tasks = 1;
    uint32 concurrency = 2;
    TaskUpdateList updates = 3;
    repeated uint32 active_tasks = 4;
}

message TaskStatusUpdate {
    uint32 task_id = 1;
    string new_status = 2;
}

message TaskLog {
    uint32 task_id = 1;
    string log_type = 2; // 'O' for stdout, 'E' for stderr
    string log_text = 3;
}

message GetLogsRequest {
  repeated uint32 taskIds = 1;
    uint32 chunkSize = 2;
  optional uint32 skipFromEnd = 3;
  optional string log_type = 4;
}

message LogChunk {
  uint32 taskId = 1;
  repeated string stdout = 2;
  repeated string stderr = 3;
}

message LogChunkList {
  repeated LogChunk logs = 1;
}

message TaskIds {
    repeated uint32 task_ids = 1;
}

message TaskId {
    uint32 task_id = 1;
}

message WorkerId {
    uint32 worker_id = 1;
}

message WorkerStatusRequest {
  repeated uint32 worker_ids = 1;
}

message WorkerStatus {
  uint32 worker_id = 1;
  string status = 2;
}

message WorkerStatusResponse {
  repeated WorkerStatus statuses = 1;
}

message WorkerDetails {
  uint32 worker_id = 1;
  string worker_name = 2;
  uint32 job_id = 3;
}

message WorkerIds {
  repeated WorkerDetails workers_details = 1;
}

message PingAndGetNewTasksRequest {
    uint32 worker_id = 1;
    WorkerStats stats = 2; // Optional
}

message Ack {
    bool success = 1;
}

message ListTasksRequest {
    optional string status_filter = 1;
    optional uint32 worker_id_filter = 2;
}

message WorkerRequest {
    uint32 provider_id = 1;
    uint32 flavor_id = 2;
    uint32 region_id = 3;
    uint32 number = 4;
    uint32 concurrency = 5;
    uint32 prefetch = 6;
    optional uint32 step_id = 7;
}

message WorkerUpdateRequest {
    uint32 worker_id = 1;
    optional uint32 provider_id = 2;
    optional uint32 flavor_id = 3;
    optional uint32 region_id = 4;
    optional uint32 concurrency = 5;
    optional uint32 prefetch = 6;
    optional uint32 step_id = 7;
}

message ListFlavorsRequest {
    uint32 limit = 1 ;
    string filter = 2 ; 
}

message Flavor {
  // Fields from the "flavor" table
  uint32 flavor_id      = 1;  // PRIMARY KEY
  string flavor_name    = 2;  // Name of the flavor
  uint32 provider_id    = 3;  // Foreign key to provider table
  string provider = 4; // Name of the provider (provider_name.config_name)
  int32  cpu            = 5;  // Number of CPU cores
  float mem             = 6;  // Memory in GB (or as needed)
  float disk            = 7;  // Disk size in GB (or as needed)
  int32  bandwidth      = 8;  // Bandwidth (if applicable)
  string gpu            = 9;  // GPU description
  int32  gpumem         = 10;  // GPU memory (in GB, for example)
  bool   has_gpu        = 11; // Whether a GPU is present
  bool   has_quick_disks = 12; // Whether quick disks are supported

  // Fields from the "flavor_region" table
  uint32 region_id      = 13; // Foreign key to region table
  string region         = 14; // (Optional) Region name
  float  eviction       = 15; // Eviction rate value
  float  cost           = 16; // Cost value
}

message FlavorsList {
    repeated Flavor flavors = 1;
}

message ListJobsRequest {
}

message Job {
  uint32 job_id = 1;
  string status = 2;         
  uint32 flavor_id = 3;      
  uint32 retry = 4;          
  uint32 worker_id = 5;      
  string action = 6;         
  string created_at = 7;     
  string modified_at = 8;    
  uint32 progression = 9;    
  string log = 10;
}

message JobId {
    uint32 job_id = 1;
}


message JobsList {
    repeated Job jobs = 1;
}

message JobStatusRequest {
  repeated uint32 job_ids = 1;
}

message JobStatus {
  uint32 job_id = 1;
  string status = 2;
  uint32 progression = 3;
}

message JobStatusResponse {
  repeated JobStatus statuses = 1;
}

message RcloneConfig {
    string config = 1;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
}

message Token {
  string token = 1;
}

message CreateUserRequest {
  string username = 1;
  string password = 2;
  string email = 3;
  bool is_admin = 4;
}

message UserId {
  uint32 user_id = 1;
}

message User {
  uint32 user_id = 1;
  optional string username = 2;
  optional string email = 3;
  optional bool is_admin = 4;
}

message UsersList {
  repeated User users = 1;
}

message ChangePasswordRequest {
    string username = 1;
  string old_password = 2;
  string new_password = 3;
}

message RecruiterFilter {
    optional uint32 step_id = 1;
}

message RecruiterId {
    uint32 step_id = 1;
    uint32 rank = 2;
}

message Recruiter {
    uint32 step_id = 1;
    uint32 rank = 2;
    string protofilter = 3;
    uint32 concurrency = 4;
    uint32 prefetch = 5;
    optional uint32 max_workers = 6;
    uint32 rounds = 7;
    uint32 timeout = 8;
}

message RecruiterUpdate {
  uint32 step_id = 1;
  uint32 rank = 2;
  optional string protofilter = 3;
  optional uint32 concurrency = 4;
  optional uint32 prefetch = 5;
  optional uint32 max_workers = 6;
  optional uint32 rounds = 7;
  optional uint32 timeout = 8;
}

message RecruiterList {
    repeated Recruiter recruiters = 1;
}

message WorkflowFilter {
    optional string name_like = 1;
}

message WorkflowId {
    uint32 workflow_id = 1;
}

message Workflow {
    uint32 workflow_id = 1;
    string name = 2;
    string run_strategy = 4;
    optional uint32 maximum_workers = 5;
}
message WorkflowRequest {
    string name = 1;
    optional string run_strategy = 2;
    optional uint32 maximum_workers = 3;
}

message WorkflowList {
    repeated Workflow workflows = 1;
}

message StepId {
    uint32 step_id = 1;
}
message Step {
    uint32 step_id = 1;
    string workflow_name = 2;
    uint32 workflow_id = 3;
    string name = 4;
}
message StepRequest {
    optional string workflow_name = 1;
    optional uint32 workflow_id = 2;
    string name = 3;
}
message StepList {
    repeated Step steps = 1;
}

message WorkerStats {
    float cpu_usage_percent = 1;      // 0-100, float
    float mem_usage_percent = 2;      // 0-100, float
    float load_1min = 3;               // e.g., 0.58, float
    float iowait_percent = 4;       // 0-100 float 

    repeated DiskUsage disks = 5;      // Per-disk usage

    DiskIOStats disk_io = 6;            // Global disk IO (aggregated)
    NetIOStats net_io = 7;              // Global network IO (aggregated)
}

message DiskUsage {
    string device_name = 1;            // E.g., "/dev/sda1"
    float usage_percent = 2;            // 0-100, float
}

message DiskIOStats {
    int64 read_bytes_total = 1;        // Total bytes read
    int64 write_bytes_total = 2;       // Total bytes written
    float read_bytes_rate = 3;          // Bytes per second
    float write_bytes_rate = 4;         // Bytes per second
}

message NetIOStats {
    int64 recv_bytes_total = 1;        // Total bytes received
    int64 sent_bytes_total = 2;         // Total bytes sent
    float recv_bytes_rate = 3;          // Bytes per second
    float sent_bytes_rate = 4;          // Bytes per second
}

message GetWorkerStatsRequest {
    repeated uint32 worker_ids = 1;
}

message GetWorkerStatsResponse {
    map<uint32, WorkerStats> worker_stats = 1;
}

message FetchListRequest {
  string uri = 1; // URI to fetch the list from (can include glob patterns)
}

message FetchListResponse {
  repeated string files = 1; // Absolute paths from the given URI
}

message UploadTemplateRequest {
  bytes script = 1;
  bool force = 2;
}

message UploadTemplateResponse {
  bool success = 1;
  string message = 2;
  optional uint32 workflow_template_id = 3;
  optional string name = 4;
  optional string version = 5;
  optional string description = 6;
  optional string param_json = 7;
}


message RunTemplateRequest {
  uint32 workflow_template_id = 1;
  string param_values_json = 2;
}

message TemplateFilter {
  optional uint32 workflow_template_id = 1;
  optional string name = 2;
  optional string version = 3;
}

message Template {
  uint32 workflow_template_id = 1;
  string name = 2;
  string version = 3;
  string description = 4;
  string param_json = 5;
  string uploaded_at = 6;
  optional uint32 uploaded_by = 7;
}

message TemplateList {
  repeated Template templates = 1;
}

message TemplateRun {
  uint32 template_run_id = 1;
  uint32 workflow_template_id = 2;
  optional string template_name = 3;
  optional string template_version = 4;
  optional string workflow_name = 5;
  optional uint32 run_by = 6;
  string status = 7;
  optional uint32 workflow_id = 8;
  string created_at = 9;
  string param_values_json = 10;
  optional string error_message = 11;
  optional string run_by_username = 12;
}

message TemplateRunList {
  repeated TemplateRun runs = 1;
}

message TemplateRunFilter {
  optional uint32 workflow_template_id = 1;
}

message UpdateTemplateRunRequest {
  uint32 template_run_id = 1;
  optional uint32 workflow_id = 2;
  optional string error_message = 3;
}

message WorkspaceRootRequest {
  string provider = 1; // e.g., "azure.default" or "openstack.ovh"
  string region   = 2; // e.g., "northeurope"
}

message WorkspaceRootResponse {
  string root_uri = 1; // e.g., "aznorth://workspace"
}

message DeleteTemplateRunRequest {
  uint32 template_run_id = 1;
}