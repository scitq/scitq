syntax = "proto3";

package taskqueue;

option go_package = "gen/taskqueuepb";

service TaskQueue {
    rpc SubmitTask(TaskRequest) returns (TaskResponse);
    rpc RegisterWorker(WorkerInfo) returns (WorkerId);
    rpc PingAndTakeNewTasks(WorkerId) returns (TaskListAndOther);
    rpc UpdateTaskStatus(TaskStatusUpdate) returns (Ack);
    rpc SendTaskLogs(stream TaskLog) returns (Ack);
    rpc StreamTaskLogs(TaskId) returns (stream TaskLog);
    rpc ListTasks (ListTasksRequest) returns (TaskList);
    rpc ListWorkers (ListWorkersRequest) returns (WorkersList);
    rpc CreateWorker(WorkerRequest) returns (WorkerIds);
    rpc DeleteWorker(WorkerId) returns (Ack);
    }

message TaskRequest {
    string command = 1;
    string container = 2;
}

message TaskResponse {
    uint32 task_id = 1;
}

message WorkerInfo {
    string name = 1;
    optional uint32 concurrency = 2;
}

message Task {
    uint32 task_id = 1;
    string command = 2;
    string container = 3;
    string status = 4;
}

message TaskList {
    repeated Task tasks = 1;
}

message Worker {
    uint32 worker_id = 1;
    string name = 2;
    uint32 concurrency = 3;
}


message WorkersList {
    repeated Worker workers = 1;
}

message ListWorkersRequest {
}

message TaskListAndOther {
    repeated Task tasks = 1;
    uint32 concurrency = 2;
}

message TaskStatusUpdate {
    uint32 task_id = 1;
    string new_status = 2;
}

message TaskLog {
    uint32 task_id = 1;
    string log_type = 2; // 'O' for stdout, 'E' for stderr
    string log_text = 3;
}

message TaskId {
    uint32 task_id = 1;
}

message WorkerId {
    uint32 worker_id = 1;
}

message WorkerIds {
    repeated uint32 worker_ids = 1;
}

message Ack {
    bool success = 1;
}

message ListTasksRequest {
    optional string status_filter = 1;
}

message WorkerRequest {
    string provider = 1;
    string flavor = 2;
    uint32 number = 3;
    uint32 concurrency = 4;
    uint32 prefetch = 5;
    uint32 step_id = 6;
    uint32 flavor_id = 7;
    uint32 region_id = 8;
}