// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "taskqueue.proto" (package "taskqueue", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TaskQueue } from "./taskqueue";
import type { FetchListResponse } from "./taskqueue";
import type { FetchListRequest } from "./taskqueue";
import type { GetWorkerStatsResponse } from "./taskqueue";
import type { GetWorkerStatsRequest } from "./taskqueue";
import type { StepId } from "./taskqueue";
import type { StepRequest } from "./taskqueue";
import type { StepList } from "./taskqueue";
import type { WorkflowId } from "./taskqueue";
import type { WorkflowRequest } from "./taskqueue";
import type { WorkflowList } from "./taskqueue";
import type { WorkflowFilter } from "./taskqueue";
import type { RecruiterId } from "./taskqueue";
import type { RecruiterUpdate } from "./taskqueue";
import type { Recruiter } from "./taskqueue";
import type { RecruiterList } from "./taskqueue";
import type { RecruiterFilter } from "./taskqueue";
import type { ChangePasswordRequest } from "./taskqueue";
import type { User } from "./taskqueue";
import type { UsersList } from "./taskqueue";
import type { UserId } from "./taskqueue";
import type { CreateUserRequest } from "./taskqueue";
import type { Token } from "./taskqueue";
import type { LoginResponse } from "./taskqueue";
import type { LoginRequest } from "./taskqueue";
import type { RcloneConfig } from "./taskqueue";
import type { Empty } from "./google/protobuf/empty";
import type { FlavorsList } from "./taskqueue";
import type { ListFlavorsRequest } from "./taskqueue";
import type { JobStatusResponse } from "./taskqueue";
import type { JobStatusRequest } from "./taskqueue";
import type { JobsList } from "./taskqueue";
import type { ListJobsRequest } from "./taskqueue";
import type { WorkerStatusResponse } from "./taskqueue";
import type { WorkerStatusRequest } from "./taskqueue";
import type { WorkerUpdateRequest } from "./taskqueue";
import type { JobId } from "./taskqueue";
import type { WorkerStatus } from "./taskqueue";
import type { WorkerIds } from "./taskqueue";
import type { WorkerRequest } from "./taskqueue";
import type { WorkersList } from "./taskqueue";
import type { ListWorkersRequest } from "./taskqueue";
import type { TaskList } from "./taskqueue";
import type { ListTasksRequest } from "./taskqueue";
import type { LogChunkList } from "./taskqueue";
import type { GetLogsRequest } from "./taskqueue";
import type { TaskId } from "./taskqueue";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { TaskLog } from "./taskqueue";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { Ack } from "./taskqueue";
import type { TaskStatusUpdate } from "./taskqueue";
import type { TaskListAndOther } from "./taskqueue";
import type { PingAndGetNewTasksRequest } from "./taskqueue";
import type { WorkerId } from "./taskqueue";
import type { WorkerInfo } from "./taskqueue";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TaskResponse } from "./taskqueue";
import type { TaskRequest } from "./taskqueue";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service taskqueue.TaskQueue
 */
export interface ITaskQueueClient {
    /**
     * @generated from protobuf rpc: SubmitTask(taskqueue.TaskRequest) returns (taskqueue.TaskResponse);
     */
    submitTask(input: TaskRequest, options?: RpcOptions): UnaryCall<TaskRequest, TaskResponse>;
    /**
     * @generated from protobuf rpc: RegisterWorker(taskqueue.WorkerInfo) returns (taskqueue.WorkerId);
     */
    registerWorker(input: WorkerInfo, options?: RpcOptions): UnaryCall<WorkerInfo, WorkerId>;
    /**
     * @generated from protobuf rpc: PingAndTakeNewTasks(taskqueue.PingAndGetNewTasksRequest) returns (taskqueue.TaskListAndOther);
     */
    pingAndTakeNewTasks(input: PingAndGetNewTasksRequest, options?: RpcOptions): UnaryCall<PingAndGetNewTasksRequest, TaskListAndOther>;
    /**
     * @generated from protobuf rpc: UpdateTaskStatus(taskqueue.TaskStatusUpdate) returns (taskqueue.Ack);
     */
    updateTaskStatus(input: TaskStatusUpdate, options?: RpcOptions): UnaryCall<TaskStatusUpdate, Ack>;
    /**
     * @generated from protobuf rpc: SendTaskLogs(stream taskqueue.TaskLog) returns (taskqueue.Ack);
     */
    sendTaskLogs(options?: RpcOptions): ClientStreamingCall<TaskLog, Ack>;
    /**
     * @generated from protobuf rpc: StreamTaskLogsOutput(taskqueue.TaskId) returns (stream taskqueue.TaskLog);
     */
    streamTaskLogsOutput(input: TaskId, options?: RpcOptions): ServerStreamingCall<TaskId, TaskLog>;
    /**
     * @generated from protobuf rpc: StreamTaskLogsErr(taskqueue.TaskId) returns (stream taskqueue.TaskLog);
     */
    streamTaskLogsErr(input: TaskId, options?: RpcOptions): ServerStreamingCall<TaskId, TaskLog>;
    /**
     * @generated from protobuf rpc: GetLogsChunk(taskqueue.GetLogsRequest) returns (taskqueue.LogChunkList);
     */
    getLogsChunk(input: GetLogsRequest, options?: RpcOptions): UnaryCall<GetLogsRequest, LogChunkList>;
    /**
     * @generated from protobuf rpc: ListTasks(taskqueue.ListTasksRequest) returns (taskqueue.TaskList);
     */
    listTasks(input: ListTasksRequest, options?: RpcOptions): UnaryCall<ListTasksRequest, TaskList>;
    /**
     * @generated from protobuf rpc: ListWorkers(taskqueue.ListWorkersRequest) returns (taskqueue.WorkersList);
     */
    listWorkers(input: ListWorkersRequest, options?: RpcOptions): UnaryCall<ListWorkersRequest, WorkersList>;
    /**
     * @generated from protobuf rpc: CreateWorker(taskqueue.WorkerRequest) returns (taskqueue.WorkerIds);
     */
    createWorker(input: WorkerRequest, options?: RpcOptions): UnaryCall<WorkerRequest, WorkerIds>;
    /**
     * @generated from protobuf rpc: UpdateWorkerStatus(taskqueue.WorkerStatus) returns (taskqueue.Ack);
     */
    updateWorkerStatus(input: WorkerStatus, options?: RpcOptions): UnaryCall<WorkerStatus, Ack>;
    /**
     * @generated from protobuf rpc: DeleteWorker(taskqueue.WorkerId) returns (taskqueue.JobId);
     */
    deleteWorker(input: WorkerId, options?: RpcOptions): UnaryCall<WorkerId, JobId>;
    /**
     * @generated from protobuf rpc: UpdateWorker(taskqueue.WorkerUpdateRequest) returns (taskqueue.Ack);
     */
    updateWorker(input: WorkerUpdateRequest, options?: RpcOptions): UnaryCall<WorkerUpdateRequest, Ack>;
    /**
     * @generated from protobuf rpc: GetWorkerStatuses(taskqueue.WorkerStatusRequest) returns (taskqueue.WorkerStatusResponse);
     */
    getWorkerStatuses(input: WorkerStatusRequest, options?: RpcOptions): UnaryCall<WorkerStatusRequest, WorkerStatusResponse>;
    /**
     * @generated from protobuf rpc: ListJobs(taskqueue.ListJobsRequest) returns (taskqueue.JobsList);
     */
    listJobs(input: ListJobsRequest, options?: RpcOptions): UnaryCall<ListJobsRequest, JobsList>;
    /**
     * @generated from protobuf rpc: GetJobStatuses(taskqueue.JobStatusRequest) returns (taskqueue.JobStatusResponse);
     */
    getJobStatuses(input: JobStatusRequest, options?: RpcOptions): UnaryCall<JobStatusRequest, JobStatusResponse>;
    /**
     * @generated from protobuf rpc: DeleteJob(taskqueue.JobId) returns (taskqueue.Ack);
     */
    deleteJob(input: JobId, options?: RpcOptions): UnaryCall<JobId, Ack>;
    /**
     * @generated from protobuf rpc: ListFlavors(taskqueue.ListFlavorsRequest) returns (taskqueue.FlavorsList);
     */
    listFlavors(input: ListFlavorsRequest, options?: RpcOptions): UnaryCall<ListFlavorsRequest, FlavorsList>;
    /**
     * @generated from protobuf rpc: GetRcloneConfig(google.protobuf.Empty) returns (taskqueue.RcloneConfig);
     */
    getRcloneConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, RcloneConfig>;
    /**
     * @generated from protobuf rpc: Login(taskqueue.LoginRequest) returns (taskqueue.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: Logout(taskqueue.Token) returns (taskqueue.Ack);
     */
    logout(input: Token, options?: RpcOptions): UnaryCall<Token, Ack>;
    /**
     * @generated from protobuf rpc: CreateUser(taskqueue.CreateUserRequest) returns (taskqueue.UserId);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, UserId>;
    /**
     * @generated from protobuf rpc: ListUsers(google.protobuf.Empty) returns (taskqueue.UsersList);
     */
    listUsers(input: Empty, options?: RpcOptions): UnaryCall<Empty, UsersList>;
    /**
     * @generated from protobuf rpc: DeleteUser(taskqueue.UserId) returns (taskqueue.Ack);
     */
    deleteUser(input: UserId, options?: RpcOptions): UnaryCall<UserId, Ack>;
    /**
     * @generated from protobuf rpc: UpdateUser(taskqueue.User) returns (taskqueue.Ack);
     */
    updateUser(input: User, options?: RpcOptions): UnaryCall<User, Ack>;
    /**
     * @generated from protobuf rpc: ChangePassword(taskqueue.ChangePasswordRequest) returns (taskqueue.Ack);
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, Ack>;
    /**
     * @generated from protobuf rpc: ListRecruiters(taskqueue.RecruiterFilter) returns (taskqueue.RecruiterList);
     */
    listRecruiters(input: RecruiterFilter, options?: RpcOptions): UnaryCall<RecruiterFilter, RecruiterList>;
    /**
     * @generated from protobuf rpc: CreateRecruiter(taskqueue.Recruiter) returns (taskqueue.Ack);
     */
    createRecruiter(input: Recruiter, options?: RpcOptions): UnaryCall<Recruiter, Ack>;
    /**
     * @generated from protobuf rpc: UpdateRecruiter(taskqueue.RecruiterUpdate) returns (taskqueue.Ack);
     */
    updateRecruiter(input: RecruiterUpdate, options?: RpcOptions): UnaryCall<RecruiterUpdate, Ack>;
    /**
     * @generated from protobuf rpc: DeleteRecruiter(taskqueue.RecruiterId) returns (taskqueue.Ack);
     */
    deleteRecruiter(input: RecruiterId, options?: RpcOptions): UnaryCall<RecruiterId, Ack>;
    /**
     * @generated from protobuf rpc: ListWorkflows(taskqueue.WorkflowFilter) returns (taskqueue.WorkflowList);
     */
    listWorkflows(input: WorkflowFilter, options?: RpcOptions): UnaryCall<WorkflowFilter, WorkflowList>;
    /**
     * @generated from protobuf rpc: CreateWorkflow(taskqueue.WorkflowRequest) returns (taskqueue.WorkflowId);
     */
    createWorkflow(input: WorkflowRequest, options?: RpcOptions): UnaryCall<WorkflowRequest, WorkflowId>;
    /**
     * @generated from protobuf rpc: DeleteWorkflow(taskqueue.WorkflowId) returns (taskqueue.Ack);
     */
    deleteWorkflow(input: WorkflowId, options?: RpcOptions): UnaryCall<WorkflowId, Ack>;
    /**
     * @generated from protobuf rpc: ListSteps(taskqueue.WorkflowId) returns (taskqueue.StepList);
     */
    listSteps(input: WorkflowId, options?: RpcOptions): UnaryCall<WorkflowId, StepList>;
    /**
     * @generated from protobuf rpc: CreateStep(taskqueue.StepRequest) returns (taskqueue.StepId);
     */
    createStep(input: StepRequest, options?: RpcOptions): UnaryCall<StepRequest, StepId>;
    /**
     * @generated from protobuf rpc: DeleteStep(taskqueue.StepId) returns (taskqueue.Ack);
     */
    deleteStep(input: StepId, options?: RpcOptions): UnaryCall<StepId, Ack>;
    /**
     * @generated from protobuf rpc: GetWorkerStats(taskqueue.GetWorkerStatsRequest) returns (taskqueue.GetWorkerStatsResponse);
     */
    getWorkerStats(input: GetWorkerStatsRequest, options?: RpcOptions): UnaryCall<GetWorkerStatsRequest, GetWorkerStatsResponse>;
    /**
     * @generated from protobuf rpc: FetchList(taskqueue.FetchListRequest) returns (taskqueue.FetchListResponse);
     */
    fetchList(input: FetchListRequest, options?: RpcOptions): UnaryCall<FetchListRequest, FetchListResponse>;
}
/**
 * @generated from protobuf service taskqueue.TaskQueue
 */
export class TaskQueueClient implements ITaskQueueClient, ServiceInfo {
    typeName = TaskQueue.typeName;
    methods = TaskQueue.methods;
    options = TaskQueue.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubmitTask(taskqueue.TaskRequest) returns (taskqueue.TaskResponse);
     */
    submitTask(input: TaskRequest, options?: RpcOptions): UnaryCall<TaskRequest, TaskResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TaskRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterWorker(taskqueue.WorkerInfo) returns (taskqueue.WorkerId);
     */
    registerWorker(input: WorkerInfo, options?: RpcOptions): UnaryCall<WorkerInfo, WorkerId> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkerInfo, WorkerId>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PingAndTakeNewTasks(taskqueue.PingAndGetNewTasksRequest) returns (taskqueue.TaskListAndOther);
     */
    pingAndTakeNewTasks(input: PingAndGetNewTasksRequest, options?: RpcOptions): UnaryCall<PingAndGetNewTasksRequest, TaskListAndOther> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingAndGetNewTasksRequest, TaskListAndOther>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTaskStatus(taskqueue.TaskStatusUpdate) returns (taskqueue.Ack);
     */
    updateTaskStatus(input: TaskStatusUpdate, options?: RpcOptions): UnaryCall<TaskStatusUpdate, Ack> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TaskStatusUpdate, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendTaskLogs(stream taskqueue.TaskLog) returns (taskqueue.Ack);
     */
    sendTaskLogs(options?: RpcOptions): ClientStreamingCall<TaskLog, Ack> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TaskLog, Ack>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: StreamTaskLogsOutput(taskqueue.TaskId) returns (stream taskqueue.TaskLog);
     */
    streamTaskLogsOutput(input: TaskId, options?: RpcOptions): ServerStreamingCall<TaskId, TaskLog> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<TaskId, TaskLog>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamTaskLogsErr(taskqueue.TaskId) returns (stream taskqueue.TaskLog);
     */
    streamTaskLogsErr(input: TaskId, options?: RpcOptions): ServerStreamingCall<TaskId, TaskLog> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<TaskId, TaskLog>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLogsChunk(taskqueue.GetLogsRequest) returns (taskqueue.LogChunkList);
     */
    getLogsChunk(input: GetLogsRequest, options?: RpcOptions): UnaryCall<GetLogsRequest, LogChunkList> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLogsRequest, LogChunkList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListTasks(taskqueue.ListTasksRequest) returns (taskqueue.TaskList);
     */
    listTasks(input: ListTasksRequest, options?: RpcOptions): UnaryCall<ListTasksRequest, TaskList> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTasksRequest, TaskList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListWorkers(taskqueue.ListWorkersRequest) returns (taskqueue.WorkersList);
     */
    listWorkers(input: ListWorkersRequest, options?: RpcOptions): UnaryCall<ListWorkersRequest, WorkersList> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListWorkersRequest, WorkersList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateWorker(taskqueue.WorkerRequest) returns (taskqueue.WorkerIds);
     */
    createWorker(input: WorkerRequest, options?: RpcOptions): UnaryCall<WorkerRequest, WorkerIds> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkerRequest, WorkerIds>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateWorkerStatus(taskqueue.WorkerStatus) returns (taskqueue.Ack);
     */
    updateWorkerStatus(input: WorkerStatus, options?: RpcOptions): UnaryCall<WorkerStatus, Ack> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkerStatus, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteWorker(taskqueue.WorkerId) returns (taskqueue.JobId);
     */
    deleteWorker(input: WorkerId, options?: RpcOptions): UnaryCall<WorkerId, JobId> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkerId, JobId>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateWorker(taskqueue.WorkerUpdateRequest) returns (taskqueue.Ack);
     */
    updateWorker(input: WorkerUpdateRequest, options?: RpcOptions): UnaryCall<WorkerUpdateRequest, Ack> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkerUpdateRequest, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetWorkerStatuses(taskqueue.WorkerStatusRequest) returns (taskqueue.WorkerStatusResponse);
     */
    getWorkerStatuses(input: WorkerStatusRequest, options?: RpcOptions): UnaryCall<WorkerStatusRequest, WorkerStatusResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkerStatusRequest, WorkerStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListJobs(taskqueue.ListJobsRequest) returns (taskqueue.JobsList);
     */
    listJobs(input: ListJobsRequest, options?: RpcOptions): UnaryCall<ListJobsRequest, JobsList> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListJobsRequest, JobsList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetJobStatuses(taskqueue.JobStatusRequest) returns (taskqueue.JobStatusResponse);
     */
    getJobStatuses(input: JobStatusRequest, options?: RpcOptions): UnaryCall<JobStatusRequest, JobStatusResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<JobStatusRequest, JobStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteJob(taskqueue.JobId) returns (taskqueue.Ack);
     */
    deleteJob(input: JobId, options?: RpcOptions): UnaryCall<JobId, Ack> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<JobId, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListFlavors(taskqueue.ListFlavorsRequest) returns (taskqueue.FlavorsList);
     */
    listFlavors(input: ListFlavorsRequest, options?: RpcOptions): UnaryCall<ListFlavorsRequest, FlavorsList> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListFlavorsRequest, FlavorsList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRcloneConfig(google.protobuf.Empty) returns (taskqueue.RcloneConfig);
     */
    getRcloneConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, RcloneConfig> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, RcloneConfig>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Login(taskqueue.LoginRequest) returns (taskqueue.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Logout(taskqueue.Token) returns (taskqueue.Ack);
     */
    logout(input: Token, options?: RpcOptions): UnaryCall<Token, Ack> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<Token, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateUser(taskqueue.CreateUserRequest) returns (taskqueue.UserId);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, UserId> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, UserId>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListUsers(google.protobuf.Empty) returns (taskqueue.UsersList);
     */
    listUsers(input: Empty, options?: RpcOptions): UnaryCall<Empty, UsersList> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, UsersList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(taskqueue.UserId) returns (taskqueue.Ack);
     */
    deleteUser(input: UserId, options?: RpcOptions): UnaryCall<UserId, Ack> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserId, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(taskqueue.User) returns (taskqueue.Ack);
     */
    updateUser(input: User, options?: RpcOptions): UnaryCall<User, Ack> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangePassword(taskqueue.ChangePasswordRequest) returns (taskqueue.Ack);
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, Ack> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangePasswordRequest, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListRecruiters(taskqueue.RecruiterFilter) returns (taskqueue.RecruiterList);
     */
    listRecruiters(input: RecruiterFilter, options?: RpcOptions): UnaryCall<RecruiterFilter, RecruiterList> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecruiterFilter, RecruiterList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateRecruiter(taskqueue.Recruiter) returns (taskqueue.Ack);
     */
    createRecruiter(input: Recruiter, options?: RpcOptions): UnaryCall<Recruiter, Ack> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<Recruiter, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateRecruiter(taskqueue.RecruiterUpdate) returns (taskqueue.Ack);
     */
    updateRecruiter(input: RecruiterUpdate, options?: RpcOptions): UnaryCall<RecruiterUpdate, Ack> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecruiterUpdate, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteRecruiter(taskqueue.RecruiterId) returns (taskqueue.Ack);
     */
    deleteRecruiter(input: RecruiterId, options?: RpcOptions): UnaryCall<RecruiterId, Ack> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecruiterId, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListWorkflows(taskqueue.WorkflowFilter) returns (taskqueue.WorkflowList);
     */
    listWorkflows(input: WorkflowFilter, options?: RpcOptions): UnaryCall<WorkflowFilter, WorkflowList> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkflowFilter, WorkflowList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateWorkflow(taskqueue.WorkflowRequest) returns (taskqueue.WorkflowId);
     */
    createWorkflow(input: WorkflowRequest, options?: RpcOptions): UnaryCall<WorkflowRequest, WorkflowId> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkflowRequest, WorkflowId>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteWorkflow(taskqueue.WorkflowId) returns (taskqueue.Ack);
     */
    deleteWorkflow(input: WorkflowId, options?: RpcOptions): UnaryCall<WorkflowId, Ack> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkflowId, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListSteps(taskqueue.WorkflowId) returns (taskqueue.StepList);
     */
    listSteps(input: WorkflowId, options?: RpcOptions): UnaryCall<WorkflowId, StepList> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<WorkflowId, StepList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateStep(taskqueue.StepRequest) returns (taskqueue.StepId);
     */
    createStep(input: StepRequest, options?: RpcOptions): UnaryCall<StepRequest, StepId> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<StepRequest, StepId>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteStep(taskqueue.StepId) returns (taskqueue.Ack);
     */
    deleteStep(input: StepId, options?: RpcOptions): UnaryCall<StepId, Ack> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<StepId, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetWorkerStats(taskqueue.GetWorkerStatsRequest) returns (taskqueue.GetWorkerStatsResponse);
     */
    getWorkerStats(input: GetWorkerStatsRequest, options?: RpcOptions): UnaryCall<GetWorkerStatsRequest, GetWorkerStatsResponse> {
        const method = this.methods[37], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetWorkerStatsRequest, GetWorkerStatsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchList(taskqueue.FetchListRequest) returns (taskqueue.FetchListResponse);
     */
    fetchList(input: FetchListRequest, options?: RpcOptions): UnaryCall<FetchListRequest, FetchListResponse> {
        const method = this.methods[38], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchListRequest, FetchListResponse>("unary", this._transport, method, opt, input);
    }
}
